# This file was generated by SableCC (http://www.sablecc.org/). 

from types import *
from pyswip import Prolog
import os,io

def caller(n=1):
    import inspect
    return inspect.getouterframes(inspect.currentframe())[n][3]
	
def abstract():
    raise NotImplementedError(caller() + ' must be implemented in subclass')

class Stack(list):
    def push(self, value):
        self.append(value)
    
    def peek(self):
        return self[len(self)-1]
    
    def empty(self):
        return len(self) == 0
        	
class PushbackReader(object):
    def __init__(self, reader):
        self.__reader = reader
        self.__stack = Stack()

    def peek (self):
        if (len(self.__stack) > 0 ): 
    	    result = self.__stack.peek()
        else:
    	    result = self.__reader.read(1)
    	    self.__reader.seek(-1, 1) # go back to the previous position
        return result

    def read (self):
        if ( len(self.__stack) > 0 ):
    	    return self.__stack.pop()
        return self.__reader.read(1)

    def unread (self, c):
        self.__stack.append(c)

class StringBuffer(object):
  def __init__(self, obj=None):
      self.buffer = [] 
      if not(obj == None):
          if isinstance(obj, type('String')):
              self.buffer.extend(list(obj))
          else:
              self.buffer.extend(list(str(obj)))
      
  def append(self, obj):
      if isinstance(obj, type('String')):
          self.buffer.extend(list(obj))
      else:
          self.buffer.extend(list(str(obj)))
      
  def charAt(self, index):
      return self.buffer[index]
  
  def __len__(self):
      return len(self.buffer)
  
  def __eq__(self, other):
      if type(self) != type(other):
          return False
      else:
          return (self.buffer == other.buffer)
  
  def __ne__(self, other):
      if type(self) != type(other):
          return True
      else:
          return (self.buffer != other.buffer)
        
  def clear(self):
      del self.buffer[0:len(self.buffer)]
  
  def __str__(self):
      return ''.join(self.buffer)
      
  def __repr__(self):
      return "'" + self.__str__() + "'"
  
  def substring(self, start, finish):
      return ''.join(self.buffer[start:finish])
      
  def __getitem__(self, index):
      return self.buffer[index]
      
  def __setitem__(self, index, c):
      if not(isinstance(c, type('String'))):
          raise RuntimeError("Only single characters can be assigned")
      if not(len(c) == 1):
          raise RuntimeError("Only single characters can be assigned")
      self.buffer[index] = c
  
  def __iter__(self):
      return self.buffer
  
  def __getslice__(self, start, finish):
      return self.substring(start, finish)
      
  def reverse(self):
      self.buffer.reverse()
    
  def __contains__(self, c):
      if not(isinstance(c, type('String'))):
          raise RuntimeError("Only single characters can be assigned")
      if not(len(c) == 1):
          raise RuntimeError("Only single characters can be assigned")
      return self.buffer.__contains__(c)
      
  def contains(self, c):
      self.__contains__(c)



############################# nodes.py ############################################## 

class Node(object):
    def __init__(self):
        if self.__class__ is Node:
            raise TypeError("Node class can not be instantiated.")
        self.parent = None

    def clone(self):
        abstract()
		
    def getparent(self):
        return self.parent

    def setparent(self, parent):
        self.parent = parent

    def removeChild(self, child):
    	abstract()
    	
    def replaceChild(self, oldChild, newChild):
    	abstract()

    def replaceBy(self, node):
        if (self.parent != None):
            self.parent.replaceChild(self, node)

    def toString(self, other):
        if isinstance(other, list):
            sb = StringBuffer()

            for node in other:
                sb.append(node)

            return str(sb)
        
        if (other != None):
            return str(other)

        return ''
        
    def cloneNode(self, node):
        if(node != None):
            return node.clone()

        return None

    def cloneList(self, lst):
        clone = list()

        for node in lst:
            clone.append(node.clone())

        return clone

    def apply(self, analysis):
        abstract()

class Token(Node):
    def __init__(self):
        super(Token, self).__init__()
        self.text = None
        self.line = 0
        self.pos = 0

    def getText(self):
        return self.text

    def setText(self, text):
        self.text = text

    def getLine(self):
        return self.line

    def setLine(self, line):
        self.line = line

    def getPos(self):
        return self.pos

    def setPos(self, pos):
        self.pos = pos

    def __str__(self):
        return self.text + " "
    
    def removeChild(self, child):
        pass
      
    def replaceChild(self, oldChild,  newChild):
        pass
      

class TComma(Token):
    TokenIndex = 0
    
    def __init__(self, line=0, pos=0):
        super(TComma, self).__init__()
        super(TComma, self).setText(",")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TComma(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTComma(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TComma text.")


class TLpar(Token):
    TokenIndex = 2
    
    def __init__(self, line=0, pos=0):
        super(TLpar, self).__init__()
        super(TLpar, self).setText("(")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TLpar(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTLpar(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TLpar text.")


class TRpar(Token):
    TokenIndex = 3
    
    def __init__(self, line=0, pos=0):
        super(TRpar, self).__init__()
        super(TRpar, self).setText(")")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TRpar(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTRpar(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TRpar text.")


class TLbracket(Token):
    TokenIndex = 4
    
    def __init__(self, line=0, pos=0):
        super(TLbracket, self).__init__()
        super(TLbracket, self).setText("[")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TLbracket(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTLbracket(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TLbracket text.")


class TRbracket(Token):
    TokenIndex = 5
    
    def __init__(self, line=0, pos=0):
        super(TRbracket, self).__init__()
        super(TRbracket, self).setText("]")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TRbracket(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTRbracket(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TRbracket text.")


class TLbrace(Token):
    TokenIndex = 6
    
    def __init__(self, line=0, pos=0):
        super(TLbrace, self).__init__()
        super(TLbrace, self).setText("{")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TLbrace(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTLbrace(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TLbrace text.")


class TRbrace(Token):
    TokenIndex = 7
    
    def __init__(self, line=0, pos=0):
        super(TRbrace, self).__init__()
        super(TRbrace, self).setText("}")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TRbrace(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTRbrace(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TRbrace text.")


class THash(Token):
    TokenIndex = 8
    
    def __init__(self, line=0, pos=0):
        super(THash, self).__init__()
        super(THash, self).setText("#")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return THash(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTHash(self)

    def setText(self, text):
        raise RuntimeError("Cannot change THash text.")


class TTAnd(Token):
    TokenIndex = 9
    
    def __init__(self, line=0, pos=0):
        super(TTAnd, self).__init__()
        super(TTAnd, self).setText("and")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTAnd(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTAnd(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTAnd text.")


class TTOr(Token):
    TokenIndex = 10
    
    def __init__(self, line=0, pos=0):
        super(TTOr, self).__init__()
        super(TTOr, self).setText("or")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTOr(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTOr(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTOr text.")


class TTImpliedByLp(Token):
    TokenIndex = 14
    
    def __init__(self, line=0, pos=0):
        super(TTImpliedByLp, self).__init__()
        super(TTImpliedByLp, self).setText(":-")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTImpliedByLp(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTImpliedByLp(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTImpliedByLp text.")


class TTConstraint(Token):
    TokenIndex = 15
    
    def __init__(self, line=0, pos=0):
        super(TTConstraint, self).__init__()
        super(TTConstraint, self).setText("!-")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTConstraint(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTConstraint(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTConstraint text.")


class TTExists(Token):
    TokenIndex = 17
    
    def __init__(self, line=0, pos=0):
        super(TTExists, self).__init__()
        super(TTExists, self).setText("exists")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTExists(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTExists(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTExists text.")


class TTForall(Token):
    TokenIndex = 18
    
    def __init__(self, line=0, pos=0):
        super(TTForall, self).__init__()
        super(TTForall, self).setText("forall")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTForall(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTForall(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTForall text.")


class TTUnivfalse(Token):
    TokenIndex = 19
    
    def __init__(self, line=0, pos=0):
        super(TTUnivfalse, self).__init__()
        super(TTUnivfalse, self).setText("false")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTUnivfalse(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTUnivfalse(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTUnivfalse text.")


class TTUnivtrue(Token):
    TokenIndex = 20
    
    def __init__(self, line=0, pos=0):
        super(TTUnivtrue, self).__init__()
        super(TTUnivtrue, self).setText("true")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTUnivtrue(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTUnivtrue(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTUnivtrue text.")


class TGt(Token):
    TokenIndex = 21
    
    def __init__(self, line=0, pos=0):
        super(TGt, self).__init__()
        super(TGt, self).setText(">")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TGt(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTGt(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TGt text.")


class TLt(Token):
    TokenIndex = 22
    
    def __init__(self, line=0, pos=0):
        super(TLt, self).__init__()
        super(TLt, self).setText("<")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TLt(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTLt(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TLt text.")


class TGte(Token):
    TokenIndex = 23
    
    def __init__(self, line=0, pos=0):
        super(TGte, self).__init__()
        super(TGte, self).setText(">=")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TGte(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTGte(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TGte text.")


class TLte(Token):
    TokenIndex = 24
    
    def __init__(self, line=0, pos=0):
        super(TLte, self).__init__()
        super(TLte, self).setText("=<")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TLte(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTLte(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TLte text.")


class TEqual(Token):
    TokenIndex = 25
    
    def __init__(self, line=0, pos=0):
        super(TEqual, self).__init__()
        super(TEqual, self).setText("=")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TEqual(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTEqual(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TEqual text.")


class TUnequal(Token):
    TokenIndex = 26
    
    def __init__(self, line=0, pos=0):
        super(TUnequal, self).__init__()
        super(TUnequal, self).setText("!=")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TUnequal(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTUnequal(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TUnequal text.")


class TAddOp(Token):
    TokenIndex = 27
    
    def __init__(self, line=0, pos=0):
        super(TAddOp, self).__init__()
        super(TAddOp, self).setText("+")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TAddOp(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTAddOp(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TAddOp text.")


class TSubOp(Token):
    TokenIndex = 28
    
    def __init__(self, line=0, pos=0):
        super(TSubOp, self).__init__()
        super(TSubOp, self).setText("-")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TSubOp(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTSubOp(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TSubOp text.")


class TStar(Token):
    TokenIndex = 29
    
    def __init__(self, line=0, pos=0):
        super(TStar, self).__init__()
        super(TStar, self).setText("*")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TStar(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTStar(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TStar text.")


class TDivOp(Token):
    TokenIndex = 30
    
    def __init__(self, line=0, pos=0):
        super(TDivOp, self).__init__()
        super(TDivOp, self).setText("/")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TDivOp(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTDivOp(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TDivOp text.")


class TTAssumption(Token):
    TokenIndex = 31
    
    def __init__(self, line=0, pos=0):
        super(TTAssumption, self).__init__()
        super(TTAssumption, self).setText("assumption")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTAssumption(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTAssumption(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTAssumption text.")


class TTAxiom(Token):
    TokenIndex = 32
    
    def __init__(self, line=0, pos=0):
        super(TTAxiom, self).__init__()
        super(TTAxiom, self).setText("axiom")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTAxiom(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTAxiom(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTAxiom text.")


class TTCapability(Token):
    TokenIndex = 33
    
    def __init__(self, line=0, pos=0):
        super(TTCapability, self).__init__()
        super(TTCapability, self).setText("capability")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTCapability(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTCapability(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTCapability text.")


class TTChoreography(Token):
    TokenIndex = 34
    
    def __init__(self, line=0, pos=0):
        super(TTChoreography, self).__init__()
        super(TTChoreography, self).setText("choreography")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTChoreography(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTChoreography(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTChoreography text.")


class TTConcept(Token):
    TokenIndex = 35
    
    def __init__(self, line=0, pos=0):
        super(TTConcept, self).__init__()
        super(TTConcept, self).setText("concept")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTConcept(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTConcept(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTConcept text.")


class TTDefinedby(Token):
    TokenIndex = 36
    
    def __init__(self, line=0, pos=0):
        super(TTDefinedby, self).__init__()
        super(TTDefinedby, self).setText("definedBy")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTDefinedby(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTDefinedby(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTDefinedby text.")


class TTEffect(Token):
    TokenIndex = 37
    
    def __init__(self, line=0, pos=0):
        super(TTEffect, self).__init__()
        super(TTEffect, self).setText("effect")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTEffect(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTEffect(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTEffect text.")


class TTGgmediator(Token):
    TokenIndex = 39
    
    def __init__(self, line=0, pos=0):
        super(TTGgmediator, self).__init__()
        super(TTGgmediator, self).setText("ggMediator")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTGgmediator(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTGgmediator(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTGgmediator text.")


class TTGoal(Token):
    TokenIndex = 40
    
    def __init__(self, line=0, pos=0):
        super(TTGoal, self).__init__()
        super(TTGoal, self).setText("goal")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTGoal(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTGoal(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTGoal text.")


class TTHasvalue(Token):
    TokenIndex = 41
    
    def __init__(self, line=0, pos=0):
        super(TTHasvalue, self).__init__()
        super(TTHasvalue, self).setText("hasValue")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTHasvalue(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTHasvalue(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTHasvalue text.")


class TTImpliestype(Token):
    TokenIndex = 42
    
    def __init__(self, line=0, pos=0):
        super(TTImpliestype, self).__init__()
        super(TTImpliestype, self).setText("impliesType")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTImpliestype(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTImpliestype(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTImpliestype text.")


class TTImportontology(Token):
    TokenIndex = 43
    
    def __init__(self, line=0, pos=0):
        super(TTImportontology, self).__init__()
        super(TTImportontology, self).setText("importsOntology")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTImportontology(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTImportontology(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTImportontology text.")


class TTInstance(Token):
    TokenIndex = 44
    
    def __init__(self, line=0, pos=0):
        super(TTInstance, self).__init__()
        super(TTInstance, self).setText("instance")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTInstance(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTInstance(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTInstance text.")


class TTInterface(Token):
    TokenIndex = 45
    
    def __init__(self, line=0, pos=0):
        super(TTInterface, self).__init__()
        super(TTInterface, self).setText("interface")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTInterface(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTInterface(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTInterface text.")


class TTInverseof(Token):
    TokenIndex = 46
    
    def __init__(self, line=0, pos=0):
        super(TTInverseof, self).__init__()
        super(TTInverseof, self).setText("inverseOf")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTInverseof(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTInverseof(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTInverseof text.")


class TTMemberof(Token):
    TokenIndex = 47
    
    def __init__(self, line=0, pos=0):
        super(TTMemberof, self).__init__()
        super(TTMemberof, self).setText("memberOf")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTMemberof(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTMemberof(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTMemberof text.")


class TTNamespace(Token):
    TokenIndex = 48
    
    def __init__(self, line=0, pos=0):
        super(TTNamespace, self).__init__()
        super(TTNamespace, self).setText("namespace")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTNamespace(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTNamespace(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTNamespace text.")


class TTOftype(Token):
    TokenIndex = 50
    
    def __init__(self, line=0, pos=0):
        super(TTOftype, self).__init__()
        super(TTOftype, self).setText("ofType")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTOftype(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTOftype(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTOftype text.")


class TTOntology(Token):
    TokenIndex = 51
    
    def __init__(self, line=0, pos=0):
        super(TTOntology, self).__init__()
        super(TTOntology, self).setText("ontology")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTOntology(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTOntology(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTOntology text.")


class TTOomediator(Token):
    TokenIndex = 52
    
    def __init__(self, line=0, pos=0):
        super(TTOomediator, self).__init__()
        super(TTOomediator, self).setText("ooMediator")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTOomediator(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTOomediator(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTOomediator text.")


class TTOrchestration(Token):
    TokenIndex = 53
    
    def __init__(self, line=0, pos=0):
        super(TTOrchestration, self).__init__()
        super(TTOrchestration, self).setText("orchestration")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTOrchestration(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTOrchestration(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTOrchestration text.")


class TTPostcondition(Token):
    TokenIndex = 54
    
    def __init__(self, line=0, pos=0):
        super(TTPostcondition, self).__init__()
        super(TTPostcondition, self).setText("postcondition")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTPostcondition(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTPostcondition(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTPostcondition text.")


class TTPrecondition(Token):
    TokenIndex = 55
    
    def __init__(self, line=0, pos=0):
        super(TTPrecondition, self).__init__()
        super(TTPrecondition, self).setText("precondition")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTPrecondition(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTPrecondition(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTPrecondition text.")


class TTReflexive(Token):
    TokenIndex = 56
    
    def __init__(self, line=0, pos=0):
        super(TTReflexive, self).__init__()
        super(TTReflexive, self).setText("reflexive")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTReflexive(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTReflexive(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTReflexive text.")


class TTRelation(Token):
    TokenIndex = 57
    
    def __init__(self, line=0, pos=0):
        super(TTRelation, self).__init__()
        super(TTRelation, self).setText("relation")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTRelation(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTRelation(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTRelation text.")


class TTRelationInstance(Token):
    TokenIndex = 58
    
    def __init__(self, line=0, pos=0):
        super(TTRelationInstance, self).__init__()
        super(TTRelationInstance, self).setText("relationInstance")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTRelationInstance(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTRelationInstance(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTRelationInstance text.")


class TTSharedvariable(Token):
    TokenIndex = 59
    
    def __init__(self, line=0, pos=0):
        super(TTSharedvariable, self).__init__()
        super(TTSharedvariable, self).setText("sharedVariables")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTSharedvariable(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTSharedvariable(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTSharedvariable text.")


class TTSource(Token):
    TokenIndex = 60
    
    def __init__(self, line=0, pos=0):
        super(TTSource, self).__init__()
        super(TTSource, self).setText("source")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTSource(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTSource(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTSource text.")


class TTSubconcept(Token):
    TokenIndex = 61
    
    def __init__(self, line=0, pos=0):
        super(TTSubconcept, self).__init__()
        super(TTSubconcept, self).setText("subConceptOf")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTSubconcept(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTSubconcept(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTSubconcept text.")


class TTSubrelation(Token):
    TokenIndex = 62
    
    def __init__(self, line=0, pos=0):
        super(TTSubrelation, self).__init__()
        super(TTSubrelation, self).setText("subRelationOf")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTSubrelation(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTSubrelation(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTSubrelation text.")


class TTSymmetric(Token):
    TokenIndex = 63
    
    def __init__(self, line=0, pos=0):
        super(TTSymmetric, self).__init__()
        super(TTSymmetric, self).setText("symmetric")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTSymmetric(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTSymmetric(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTSymmetric text.")


class TTTarget(Token):
    TokenIndex = 64
    
    def __init__(self, line=0, pos=0):
        super(TTTarget, self).__init__()
        super(TTTarget, self).setText("target")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTTarget(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTTarget(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTTarget text.")


class TTTransitive(Token):
    TokenIndex = 65
    
    def __init__(self, line=0, pos=0):
        super(TTTransitive, self).__init__()
        super(TTTransitive, self).setText("transitive")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTTransitive(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTTransitive(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTTransitive text.")


class TTUsemediator(Token):
    TokenIndex = 66
    
    def __init__(self, line=0, pos=0):
        super(TTUsemediator, self).__init__()
        super(TTUsemediator, self).setText("usesMediator")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTUsemediator(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTUsemediator(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTUsemediator text.")


class TTUseservice(Token):
    TokenIndex = 67
    
    def __init__(self, line=0, pos=0):
        super(TTUseservice, self).__init__()
        super(TTUseservice, self).setText("usesService")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTUseservice(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTUseservice(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTUseservice text.")


class TTWebservice(Token):
    TokenIndex = 68
    
    def __init__(self, line=0, pos=0):
        super(TTWebservice, self).__init__()
        super(TTWebservice, self).setText("webService")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTWebservice(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTWebservice(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTWebservice text.")


class TTWgmediator(Token):
    TokenIndex = 69
    
    def __init__(self, line=0, pos=0):
        super(TTWgmediator, self).__init__()
        super(TTWgmediator, self).setText("wgMediator")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTWgmediator(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTWgmediator(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTWgmediator text.")


class TTWsmlvariant(Token):
    TokenIndex = 70
    
    def __init__(self, line=0, pos=0):
        super(TTWsmlvariant, self).__init__()
        super(TTWsmlvariant, self).setText("wsmlVariant")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTWsmlvariant(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTWsmlvariant(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTWsmlvariant text.")


class TTWwmediator(Token):
    TokenIndex = 71
    
    def __init__(self, line=0, pos=0):
        super(TTWwmediator, self).__init__()
        super(TTWwmediator, self).setText("wwMediator")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TTWwmediator(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTTWwmediator(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TTWwmediator text.")


class TAnonymous(Token):
    TokenIndex = 73
    
    def __init__(self, line=0, pos=0):
        super(TAnonymous, self).__init__()
        super(TAnonymous, self).setText("_#")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
      return TAnonymous(self.getLine(), self.getPos())

    def __copy__(self):
        return self.clone()
        
    def apply(self, analysis):
        analysis.caseTAnonymous(self)

    def setText(self, text):
        raise RuntimeError("Cannot change TAnonymous text.")


class TTBlank(Token):
    TokenIndex = -1
        
    def __init__(self, text, line=0, pos=0):
        super(TTBlank, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TTBlank(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTTBlank(self)
      
class TTComment(Token):
    TokenIndex = -1
        
    def __init__(self, text, line=0, pos=0):
        super(TTComment, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TTComment(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTTComment(self)
      
class TEndpoint(Token):
    TokenIndex = 1
    
    def __init__(self, text, line=0, pos=0):
        super(TEndpoint, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TEndpoint(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTEndpoint(self)
      
class TTImplies(Token):
    TokenIndex = 11
    
    def __init__(self, text, line=0, pos=0):
        super(TTImplies, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TTImplies(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTTImplies(self)
      
class TTImpliedBy(Token):
    TokenIndex = 12
    
    def __init__(self, text, line=0, pos=0):
        super(TTImpliedBy, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TTImpliedBy(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTTImpliedBy(self)
      
class TTEquivalent(Token):
    TokenIndex = 13
    
    def __init__(self, text, line=0, pos=0):
        super(TTEquivalent, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TTEquivalent(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTTEquivalent(self)
      
class TTNot(Token):
    TokenIndex = 16
    
    def __init__(self, text, line=0, pos=0):
        super(TTNot, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TTNot(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTTNot(self)
      
class TTEndnfp(Token):
    TokenIndex = 38
    
    def __init__(self, text, line=0, pos=0):
        super(TTEndnfp, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TTEndnfp(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTTEndnfp(self)
      
class TTNfp(Token):
    TokenIndex = 49
    
    def __init__(self, text, line=0, pos=0):
        super(TTNfp, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TTNfp(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTTNfp(self)
      
class TVariable(Token):
    TokenIndex = 72
    
    def __init__(self, text, line=0, pos=0):
        super(TVariable, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TVariable(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTVariable(self)
      
class TNbAnonymous(Token):
    TokenIndex = 74
    
    def __init__(self, text, line=0, pos=0):
        super(TNbAnonymous, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TNbAnonymous(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTNbAnonymous(self)
      
class TPosInteger(Token):
    TokenIndex = 75
    
    def __init__(self, text, line=0, pos=0):
        super(TPosInteger, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TPosInteger(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTPosInteger(self)
      
class TPosDecimal(Token):
    TokenIndex = 76
    
    def __init__(self, text, line=0, pos=0):
        super(TPosDecimal, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TPosDecimal(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTPosDecimal(self)
      
class TString(Token):
    TokenIndex = 77
    
    def __init__(self, text, line=0, pos=0):
        super(TString, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TString(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTString(self)
      
class TFullIri(Token):
    TokenIndex = 78
    
    def __init__(self, text, line=0, pos=0):
        super(TFullIri, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TFullIri(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTFullIri(self)
      
class TName(Token):
    TokenIndex = 79
    
    def __init__(self, text, line=0, pos=0):
        super(TName, self).__init__()    
        self.setText(text)
        self.setLine(line)
        self.setPos(pos)
        
    def clone(self):
      return TName(self.getText(), self.getLine(), self.getPos())

    def apply(self, analysis):
       analysis.caseTName(self)
      

class EOF(Token):
    TokenIndex = 80

    def __init__(self, line=0, pos=0):
        super(EOF, self).__init__()    
        self.setText("")
        self.setLine(line)
        self.setPos(pos)

    def clone(self):
        return EOF(self.getLine(), self.getPos())

    def apply(self, analysis):
        analysis.caseEOF(self)


class AWsml(Node):
    def __init__ (self, _wsmlvariant_=None,_namespace_=None,_definition_=None):
        super(AWsml, self).__init__()
        self._wsmlvariant_ = None
        self._namespace_ = None
        self._definition_ = list()
        if (_wsmlvariant_ != None):
            self.setWsmlvariant(_wsmlvariant_)
        if (_namespace_ != None):
            self.setNamespace(_namespace_)
        if (_definition_ != None):
            self._definition_.extend(_definition_)

    def clone(self):
        return AWsml(self.cloneNode(self._wsmlvariant_),self.cloneNode(self._namespace_),self.cloneList(self._definition_))

    def apply(self, analysis):
        analysis.caseAWsml(self)

    def getWsmlvariant (self):
        return self._wsmlvariant_

    def setWsmlvariant(self, node):
        if(self._wsmlvariant_ != None):
            self._wsmlvariant_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._wsmlvariant_ = node
    def getNamespace (self):
        return self._namespace_

    def setNamespace(self, node):
        if(self._namespace_ != None):
            self._namespace_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._namespace_ = node
    def getDefinition(self):
        return self._definition_

    def setDefinition(self, lst):
        del self._definition_[0:len(self._definition_)]
        self._definition_.extend(lst)
        

    def __str__(self):
        return '' + self.toString(self._wsmlvariant_)+ self.toString(self._namespace_)+ self.toString(self._definition_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._wsmlvariant_ == child):
            self._wsmlvariant_ = None
            return
        if (self._namespace_ == child):
            self._namespace_ = None
            return
        if child in self._definition_:
            self._definition_.remove(child)
            return

    def replaceChild(self, oldChild, newChild):
        if (self._wsmlvariant_ == oldChild):
            self.setWsmlvariant(newChild)
            return
        if (self._namespace_ == oldChild):
            self.setNamespace(newChild)
            return
        for i in range(self._definition_):
            if (self._definition_[i] == oldChild):
                if (newChild != None):
                    self._definition_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._definition_[i]
                oldChild.setparent(None)
                return

class AWsmlvariant(Node):
    def __init__ (self, _t_wsmlvariant_=None,_full_iri_=None):
        super(AWsmlvariant, self).__init__()
        self._t_wsmlvariant_ = None
        self._full_iri_ = None
        if (_t_wsmlvariant_ != None):
            self.setTWsmlvariant(_t_wsmlvariant_)
        if (_full_iri_ != None):
            self.setFullIri(_full_iri_)

    def clone(self):
        return AWsmlvariant(self.cloneNode(self._t_wsmlvariant_),self.cloneNode(self._full_iri_))

    def apply(self, analysis):
        analysis.caseAWsmlvariant(self)

    def getTWsmlvariant (self):
        return self._t_wsmlvariant_

    def setTWsmlvariant(self, node):
        if(self._t_wsmlvariant_ != None):
            self._t_wsmlvariant_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_wsmlvariant_ = node
    def getFullIri (self):
        return self._full_iri_

    def setFullIri(self, node):
        if(self._full_iri_ != None):
            self._full_iri_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._full_iri_ = node

    def __str__(self):
        return '' + self.toString(self._t_wsmlvariant_)+ self.toString(self._full_iri_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_wsmlvariant_ == child):
            self._t_wsmlvariant_ = None
            return
        if (self._full_iri_ == child):
            self._full_iri_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_wsmlvariant_ == oldChild):
            self.setTWsmlvariant(newChild)
            return
        if (self._full_iri_ == oldChild):
            self.setFullIri(newChild)
            return

class ANamespace(Node):
    def __init__ (self, _t_namespace_=None,_prefixdefinitionlist_=None):
        super(ANamespace, self).__init__()
        self._t_namespace_ = None
        self._prefixdefinitionlist_ = None
        if (_t_namespace_ != None):
            self.setTNamespace(_t_namespace_)
        if (_prefixdefinitionlist_ != None):
            self.setPrefixdefinitionlist(_prefixdefinitionlist_)

    def clone(self):
        return ANamespace(self.cloneNode(self._t_namespace_),self.cloneNode(self._prefixdefinitionlist_))

    def apply(self, analysis):
        analysis.caseANamespace(self)

    def getTNamespace (self):
        return self._t_namespace_

    def setTNamespace(self, node):
        if(self._t_namespace_ != None):
            self._t_namespace_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_namespace_ = node
    def getPrefixdefinitionlist (self):
        return self._prefixdefinitionlist_

    def setPrefixdefinitionlist(self, node):
        if(self._prefixdefinitionlist_ != None):
            self._prefixdefinitionlist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._prefixdefinitionlist_ = node

    def __str__(self):
        return '' + self.toString(self._t_namespace_)+ self.toString(self._prefixdefinitionlist_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_namespace_ == child):
            self._t_namespace_ = None
            return
        if (self._prefixdefinitionlist_ == child):
            self._prefixdefinitionlist_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_namespace_ == oldChild):
            self.setTNamespace(newChild)
            return
        if (self._prefixdefinitionlist_ == oldChild):
            self.setPrefixdefinitionlist(newChild)
            return

class ASharedvardef(Node):
    def __init__ (self, _t_sharedvariable_=None,_variablelist_=None):
        super(ASharedvardef, self).__init__()
        self._t_sharedvariable_ = None
        self._variablelist_ = None
        if (_t_sharedvariable_ != None):
            self.setTSharedvariable(_t_sharedvariable_)
        if (_variablelist_ != None):
            self.setVariablelist(_variablelist_)

    def clone(self):
        return ASharedvardef(self.cloneNode(self._t_sharedvariable_),self.cloneNode(self._variablelist_))

    def apply(self, analysis):
        analysis.caseASharedvardef(self)

    def getTSharedvariable (self):
        return self._t_sharedvariable_

    def setTSharedvariable(self, node):
        if(self._t_sharedvariable_ != None):
            self._t_sharedvariable_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_sharedvariable_ = node
    def getVariablelist (self):
        return self._variablelist_

    def setVariablelist(self, node):
        if(self._variablelist_ != None):
            self._variablelist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._variablelist_ = node

    def __str__(self):
        return '' + self.toString(self._t_sharedvariable_)+ self.toString(self._variablelist_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_sharedvariable_ == child):
            self._t_sharedvariable_ = None
            return
        if (self._variablelist_ == child):
            self._variablelist_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_sharedvariable_ == oldChild):
            self.setTSharedvariable(newChild)
            return
        if (self._variablelist_ == oldChild):
            self.setVariablelist(newChild)
            return

class ACapability(Node):
    def __init__ (self, _t_capability_=None,_id_=None,_header_=None,_sharedvardef_=None,_pre_post_ass_or_eff_=None):
        super(ACapability, self).__init__()
        self._t_capability_ = None
        self._id_ = None
        self._header_ = list()
        self._sharedvardef_ = None
        self._pre_post_ass_or_eff_ = list()
        if (_t_capability_ != None):
            self.setTCapability(_t_capability_)
        if (_id_ != None):
            self.setId(_id_)
        if (_header_ != None):
            self._header_.extend(_header_)
        if (_sharedvardef_ != None):
            self.setSharedvardef(_sharedvardef_)
        if (_pre_post_ass_or_eff_ != None):
            self._pre_post_ass_or_eff_.extend(_pre_post_ass_or_eff_)

    def clone(self):
        return ACapability(self.cloneNode(self._t_capability_),self.cloneNode(self._id_),self.cloneList(self._header_),self.cloneNode(self._sharedvardef_),self.cloneList(self._pre_post_ass_or_eff_))

    def apply(self, analysis):
        analysis.caseACapability(self)

    def getTCapability (self):
        return self._t_capability_

    def setTCapability(self, node):
        if(self._t_capability_ != None):
            self._t_capability_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_capability_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getHeader(self):
        return self._header_

    def setHeader(self, lst):
        del self._header_[0:len(self._header_)]
        self._header_.extend(lst)
        
    def getSharedvardef (self):
        return self._sharedvardef_

    def setSharedvardef(self, node):
        if(self._sharedvardef_ != None):
            self._sharedvardef_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._sharedvardef_ = node
    def getPrePostAssOrEff(self):
        return self._pre_post_ass_or_eff_

    def setPrePostAssOrEff(self, lst):
        del self._pre_post_ass_or_eff_[0:len(self._pre_post_ass_or_eff_)]
        self._pre_post_ass_or_eff_.extend(lst)
        

    def __str__(self):
        return '' + self.toString(self._t_capability_)+ self.toString(self._id_)+ self.toString(self._header_)+ self.toString(self._sharedvardef_)+ self.toString(self._pre_post_ass_or_eff_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_capability_ == child):
            self._t_capability_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return
        if child in self._header_:
            self._header_.remove(child)
            return
        if (self._sharedvardef_ == child):
            self._sharedvardef_ = None
            return
        if child in self._pre_post_ass_or_eff_:
            self._pre_post_ass_or_eff_.remove(child)
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_capability_ == oldChild):
            self.setTCapability(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        for i in range(self._header_):
            if (self._header_[i] == oldChild):
                if (newChild != None):
                    self._header_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._header_[i]
                oldChild.setparent(None)
                return
        if (self._sharedvardef_ == oldChild):
            self.setSharedvardef(newChild)
            return
        for i in range(self._pre_post_ass_or_eff_):
            if (self._pre_post_ass_or_eff_[i] == oldChild):
                if (newChild != None):
                    self._pre_post_ass_or_eff_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._pre_post_ass_or_eff_[i]
                oldChild.setparent(None)
                return

class AGoal(Node):
    def __init__ (self, _t_goal_=None,_id_=None,_header_=None,_capability_=None,_interfaces_=None):
        super(AGoal, self).__init__()
        self._t_goal_ = None
        self._id_ = None
        self._header_ = list()
        self._capability_ = None
        self._interfaces_ = list()
        if (_t_goal_ != None):
            self.setTGoal(_t_goal_)
        if (_id_ != None):
            self.setId(_id_)
        if (_header_ != None):
            self._header_.extend(_header_)
        if (_capability_ != None):
            self.setCapability(_capability_)
        if (_interfaces_ != None):
            self._interfaces_.extend(_interfaces_)

    def clone(self):
        return AGoal(self.cloneNode(self._t_goal_),self.cloneNode(self._id_),self.cloneList(self._header_),self.cloneNode(self._capability_),self.cloneList(self._interfaces_))

    def apply(self, analysis):
        analysis.caseAGoal(self)

    def getTGoal (self):
        return self._t_goal_

    def setTGoal(self, node):
        if(self._t_goal_ != None):
            self._t_goal_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_goal_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getHeader(self):
        return self._header_

    def setHeader(self, lst):
        del self._header_[0:len(self._header_)]
        self._header_.extend(lst)
        
    def getCapability (self):
        return self._capability_

    def setCapability(self, node):
        if(self._capability_ != None):
            self._capability_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._capability_ = node
    def getInterfaces(self):
        return self._interfaces_

    def setInterfaces(self, lst):
        del self._interfaces_[0:len(self._interfaces_)]
        self._interfaces_.extend(lst)
        

    def __str__(self):
        return '' + self.toString(self._t_goal_)+ self.toString(self._id_)+ self.toString(self._header_)+ self.toString(self._capability_)+ self.toString(self._interfaces_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_goal_ == child):
            self._t_goal_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return
        if child in self._header_:
            self._header_.remove(child)
            return
        if (self._capability_ == child):
            self._capability_ = None
            return
        if child in self._interfaces_:
            self._interfaces_.remove(child)
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_goal_ == oldChild):
            self.setTGoal(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        for i in range(self._header_):
            if (self._header_[i] == oldChild):
                if (newChild != None):
                    self._header_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._header_[i]
                oldChild.setparent(None)
                return
        if (self._capability_ == oldChild):
            self.setCapability(newChild)
            return
        for i in range(self._interfaces_):
            if (self._interfaces_[i] == oldChild):
                if (newChild != None):
                    self._interfaces_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._interfaces_[i]
                oldChild.setparent(None)
                return

class AWebservice(Node):
    def __init__ (self, _t_webservice_=None,_id_=None,_header_=None,_capability_=None,_interfaces_=None):
        super(AWebservice, self).__init__()
        self._t_webservice_ = None
        self._id_ = None
        self._header_ = list()
        self._capability_ = None
        self._interfaces_ = list()
        if (_t_webservice_ != None):
            self.setTWebservice(_t_webservice_)
        if (_id_ != None):
            self.setId(_id_)
        if (_header_ != None):
            self._header_.extend(_header_)
        if (_capability_ != None):
            self.setCapability(_capability_)
        if (_interfaces_ != None):
            self._interfaces_.extend(_interfaces_)

    def clone(self):
        return AWebservice(self.cloneNode(self._t_webservice_),self.cloneNode(self._id_),self.cloneList(self._header_),self.cloneNode(self._capability_),self.cloneList(self._interfaces_))

    def apply(self, analysis):
        analysis.caseAWebservice(self)

    def getTWebservice (self):
        return self._t_webservice_

    def setTWebservice(self, node):
        if(self._t_webservice_ != None):
            self._t_webservice_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_webservice_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getHeader(self):
        return self._header_

    def setHeader(self, lst):
        del self._header_[0:len(self._header_)]
        self._header_.extend(lst)
        
    def getCapability (self):
        return self._capability_

    def setCapability(self, node):
        if(self._capability_ != None):
            self._capability_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._capability_ = node
    def getInterfaces(self):
        return self._interfaces_

    def setInterfaces(self, lst):
        del self._interfaces_[0:len(self._interfaces_)]
        self._interfaces_.extend(lst)
        

    def __str__(self):
        return '' + self.toString(self._t_webservice_)+ self.toString(self._id_)+ self.toString(self._header_)+ self.toString(self._capability_)+ self.toString(self._interfaces_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_webservice_ == child):
            self._t_webservice_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return
        if child in self._header_:
            self._header_.remove(child)
            return
        if (self._capability_ == child):
            self._capability_ = None
            return
        if child in self._interfaces_:
            self._interfaces_.remove(child)
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_webservice_ == oldChild):
            self.setTWebservice(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        for i in range(self._header_):
            if (self._header_[i] == oldChild):
                if (newChild != None):
                    self._header_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._header_[i]
                oldChild.setparent(None)
                return
        if (self._capability_ == oldChild):
            self.setCapability(newChild)
            return
        for i in range(self._interfaces_):
            if (self._interfaces_[i] == oldChild):
                if (newChild != None):
                    self._interfaces_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._interfaces_[i]
                oldChild.setparent(None)
                return

class AGoalDefinition(Node):
    def __init__ (self, _goal_=None):
        super(AGoalDefinition, self).__init__()
        self._goal_ = None
        if (_goal_ != None):
            self.setGoal(_goal_)

    def clone(self):
        return AGoalDefinition(self.cloneNode(self._goal_))

    def apply(self, analysis):
        analysis.caseAGoalDefinition(self)

    def getGoal (self):
        return self._goal_

    def setGoal(self, node):
        if(self._goal_ != None):
            self._goal_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._goal_ = node

    def __str__(self):
        return '' + self.toString(self._goal_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._goal_ == child):
            self._goal_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._goal_ == oldChild):
            self.setGoal(newChild)
            return

class AOntologyDefinition(Node):
    def __init__ (self, _ontology_=None):
        super(AOntologyDefinition, self).__init__()
        self._ontology_ = None
        if (_ontology_ != None):
            self.setOntology(_ontology_)

    def clone(self):
        return AOntologyDefinition(self.cloneNode(self._ontology_))

    def apply(self, analysis):
        analysis.caseAOntologyDefinition(self)

    def getOntology (self):
        return self._ontology_

    def setOntology(self, node):
        if(self._ontology_ != None):
            self._ontology_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._ontology_ = node

    def __str__(self):
        return '' + self.toString(self._ontology_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._ontology_ == child):
            self._ontology_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._ontology_ == oldChild):
            self.setOntology(newChild)
            return

class AWebserviceDefinition(Node):
    def __init__ (self, _webservice_=None):
        super(AWebserviceDefinition, self).__init__()
        self._webservice_ = None
        if (_webservice_ != None):
            self.setWebservice(_webservice_)

    def clone(self):
        return AWebserviceDefinition(self.cloneNode(self._webservice_))

    def apply(self, analysis):
        analysis.caseAWebserviceDefinition(self)

    def getWebservice (self):
        return self._webservice_

    def setWebservice(self, node):
        if(self._webservice_ != None):
            self._webservice_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._webservice_ = node

    def __str__(self):
        return '' + self.toString(self._webservice_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._webservice_ == child):
            self._webservice_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._webservice_ == oldChild):
            self.setWebservice(newChild)
            return

class AMediatorDefinition(Node):
    def __init__ (self, _mediator_=None):
        super(AMediatorDefinition, self).__init__()
        self._mediator_ = None
        if (_mediator_ != None):
            self.setMediator(_mediator_)

    def clone(self):
        return AMediatorDefinition(self.cloneNode(self._mediator_))

    def apply(self, analysis):
        analysis.caseAMediatorDefinition(self)

    def getMediator (self):
        return self._mediator_

    def setMediator(self, node):
        if(self._mediator_ != None):
            self._mediator_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._mediator_ = node

    def __str__(self):
        return '' + self.toString(self._mediator_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._mediator_ == child):
            self._mediator_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._mediator_ == oldChild):
            self.setMediator(newChild)
            return

class ADefaultnsPrefixdefinitionlist(Node):
    def __init__ (self, _full_iri_=None):
        super(ADefaultnsPrefixdefinitionlist, self).__init__()
        self._full_iri_ = None
        if (_full_iri_ != None):
            self.setFullIri(_full_iri_)

    def clone(self):
        return ADefaultnsPrefixdefinitionlist(self.cloneNode(self._full_iri_))

    def apply(self, analysis):
        analysis.caseADefaultnsPrefixdefinitionlist(self)

    def getFullIri (self):
        return self._full_iri_

    def setFullIri(self, node):
        if(self._full_iri_ != None):
            self._full_iri_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._full_iri_ = node

    def __str__(self):
        return '' + self.toString(self._full_iri_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._full_iri_ == child):
            self._full_iri_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._full_iri_ == oldChild):
            self.setFullIri(newChild)
            return

class APrefixdefinitionlistPrefixdefinitionlist(Node):
    def __init__ (self, _lbrace_=None,_prefixdefinition_=None,_moreprefixdefinitions_=None,_rbrace_=None):
        super(APrefixdefinitionlistPrefixdefinitionlist, self).__init__()
        self._lbrace_ = None
        self._prefixdefinition_ = None
        self._moreprefixdefinitions_ = list()
        self._rbrace_ = None
        if (_lbrace_ != None):
            self.setLbrace(_lbrace_)
        if (_prefixdefinition_ != None):
            self.setPrefixdefinition(_prefixdefinition_)
        if (_moreprefixdefinitions_ != None):
            self._moreprefixdefinitions_.extend(_moreprefixdefinitions_)
        if (_rbrace_ != None):
            self.setRbrace(_rbrace_)

    def clone(self):
        return APrefixdefinitionlistPrefixdefinitionlist(self.cloneNode(self._lbrace_),self.cloneNode(self._prefixdefinition_),self.cloneList(self._moreprefixdefinitions_),self.cloneNode(self._rbrace_))

    def apply(self, analysis):
        analysis.caseAPrefixdefinitionlistPrefixdefinitionlist(self)

    def getLbrace (self):
        return self._lbrace_

    def setLbrace(self, node):
        if(self._lbrace_ != None):
            self._lbrace_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lbrace_ = node
    def getPrefixdefinition (self):
        return self._prefixdefinition_

    def setPrefixdefinition(self, node):
        if(self._prefixdefinition_ != None):
            self._prefixdefinition_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._prefixdefinition_ = node
    def getMoreprefixdefinitions(self):
        return self._moreprefixdefinitions_

    def setMoreprefixdefinitions(self, lst):
        del self._moreprefixdefinitions_[0:len(self._moreprefixdefinitions_)]
        self._moreprefixdefinitions_.extend(lst)
        
    def getRbrace (self):
        return self._rbrace_

    def setRbrace(self, node):
        if(self._rbrace_ != None):
            self._rbrace_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._rbrace_ = node

    def __str__(self):
        return '' + self.toString(self._lbrace_)+ self.toString(self._prefixdefinition_)+ self.toString(self._moreprefixdefinitions_)+ self.toString(self._rbrace_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._lbrace_ == child):
            self._lbrace_ = None
            return
        if (self._prefixdefinition_ == child):
            self._prefixdefinition_ = None
            return
        if child in self._moreprefixdefinitions_:
            self._moreprefixdefinitions_.remove(child)
            return
        if (self._rbrace_ == child):
            self._rbrace_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._lbrace_ == oldChild):
            self.setLbrace(newChild)
            return
        if (self._prefixdefinition_ == oldChild):
            self.setPrefixdefinition(newChild)
            return
        for i in range(self._moreprefixdefinitions_):
            if (self._moreprefixdefinitions_[i] == oldChild):
                if (newChild != None):
                    self._moreprefixdefinitions_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._moreprefixdefinitions_[i]
                oldChild.setparent(None)
                return
        if (self._rbrace_ == oldChild):
            self.setRbrace(newChild)
            return

class ANamespacedefPrefixdefinition(Node):
    def __init__ (self, _name_=None,_full_iri_=None):
        super(ANamespacedefPrefixdefinition, self).__init__()
        self._name_ = None
        self._full_iri_ = None
        if (_name_ != None):
            self.setName(_name_)
        if (_full_iri_ != None):
            self.setFullIri(_full_iri_)

    def clone(self):
        return ANamespacedefPrefixdefinition(self.cloneNode(self._name_),self.cloneNode(self._full_iri_))

    def apply(self, analysis):
        analysis.caseANamespacedefPrefixdefinition(self)

    def getName (self):
        return self._name_

    def setName(self, node):
        if(self._name_ != None):
            self._name_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._name_ = node
    def getFullIri (self):
        return self._full_iri_

    def setFullIri(self, node):
        if(self._full_iri_ != None):
            self._full_iri_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._full_iri_ = node

    def __str__(self):
        return '' + self.toString(self._name_)+ self.toString(self._full_iri_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._name_ == child):
            self._name_ = None
            return
        if (self._full_iri_ == child):
            self._full_iri_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._name_ == oldChild):
            self.setName(newChild)
            return
        if (self._full_iri_ == oldChild):
            self.setFullIri(newChild)
            return

class ADefaultPrefixdefinition(Node):
    def __init__ (self, _full_iri_=None):
        super(ADefaultPrefixdefinition, self).__init__()
        self._full_iri_ = None
        if (_full_iri_ != None):
            self.setFullIri(_full_iri_)

    def clone(self):
        return ADefaultPrefixdefinition(self.cloneNode(self._full_iri_))

    def apply(self, analysis):
        analysis.caseADefaultPrefixdefinition(self)

    def getFullIri (self):
        return self._full_iri_

    def setFullIri(self, node):
        if(self._full_iri_ != None):
            self._full_iri_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._full_iri_ = node

    def __str__(self):
        return '' + self.toString(self._full_iri_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._full_iri_ == child):
            self._full_iri_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._full_iri_ == oldChild):
            self.setFullIri(newChild)
            return

class AMoreprefixdefinitions(Node):
    def __init__ (self, _comma_=None,_prefixdefinition_=None):
        super(AMoreprefixdefinitions, self).__init__()
        self._comma_ = None
        self._prefixdefinition_ = None
        if (_comma_ != None):
            self.setComma(_comma_)
        if (_prefixdefinition_ != None):
            self.setPrefixdefinition(_prefixdefinition_)

    def clone(self):
        return AMoreprefixdefinitions(self.cloneNode(self._comma_),self.cloneNode(self._prefixdefinition_))

    def apply(self, analysis):
        analysis.caseAMoreprefixdefinitions(self)

    def getComma (self):
        return self._comma_

    def setComma(self, node):
        if(self._comma_ != None):
            self._comma_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._comma_ = node
    def getPrefixdefinition (self):
        return self._prefixdefinition_

    def setPrefixdefinition(self, node):
        if(self._prefixdefinition_ != None):
            self._prefixdefinition_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._prefixdefinition_ = node

    def __str__(self):
        return '' + self.toString(self._comma_)+ self.toString(self._prefixdefinition_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._comma_ == child):
            self._comma_ = None
            return
        if (self._prefixdefinition_ == child):
            self._prefixdefinition_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._comma_ == oldChild):
            self.setComma(newChild)
            return
        if (self._prefixdefinition_ == oldChild):
            self.setPrefixdefinition(newChild)
            return

class ANfpHeader(Node):
    def __init__ (self, _nfp_=None):
        super(ANfpHeader, self).__init__()
        self._nfp_ = None
        if (_nfp_ != None):
            self.setNfp(_nfp_)

    def clone(self):
        return ANfpHeader(self.cloneNode(self._nfp_))

    def apply(self, analysis):
        return analysis.caseANfpHeader(self)

    def getNfp (self):
        return self._nfp_

    def setNfp(self, node):
        if(self._nfp_ != None):
            self._nfp_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._nfp_ = node

    def __str__(self):
        return '' + self.toString(self._nfp_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._nfp_ == child):
            self._nfp_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._nfp_ == oldChild):
            self.setNfp(newChild)
            return

class AUsesmediatorHeader(Node):
    def __init__ (self, _usesmediator_=None):
        super(AUsesmediatorHeader, self).__init__()
        self._usesmediator_ = None
        if (_usesmediator_ != None):
            self.setUsesmediator(_usesmediator_)

    def clone(self):
        return AUsesmediatorHeader(self.cloneNode(self._usesmediator_))

    def apply(self, analysis):
        analysis.caseAUsesmediatorHeader(self)

    def getUsesmediator (self):
        return self._usesmediator_

    def setUsesmediator(self, node):
        if(self._usesmediator_ != None):
            self._usesmediator_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._usesmediator_ = node

    def __str__(self):
        return '' + self.toString(self._usesmediator_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._usesmediator_ == child):
            self._usesmediator_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._usesmediator_ == oldChild):
            self.setUsesmediator(newChild)
            return

class AImportsontologyHeader(Node):
    def __init__ (self, _importsontology_=None):
        super(AImportsontologyHeader, self).__init__()
        self._importsontology_ = None
        if (_importsontology_ != None):
            self.setImportsontology(_importsontology_)

    def clone(self):
        return AImportsontologyHeader(self.cloneNode(self._importsontology_))

    def apply(self, analysis):
        return analysis.caseAImportsontologyHeader(self)

    def getImportsontology (self):
        return self._importsontology_

    def setImportsontology(self, node):
        if(self._importsontology_ != None):
            self._importsontology_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._importsontology_ = node

    def __str__(self):
        return '' + self.toString(self._importsontology_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._importsontology_ == child):
            self._importsontology_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._importsontology_ == oldChild):
            self.setImportsontology(newChild)
            return

class AUsesmediator(Node):
    def __init__ (self, _t_usemediator_=None,_idlist_=None):
        super(AUsesmediator, self).__init__()
        self._t_usemediator_ = None
        self._idlist_ = None
        if (_t_usemediator_ != None):
            self.setTUsemediator(_t_usemediator_)
        if (_idlist_ != None):
            self.setIdlist(_idlist_)

    def clone(self):
        return AUsesmediator(self.cloneNode(self._t_usemediator_),self.cloneNode(self._idlist_))

    def apply(self, analysis):
        analysis.caseAUsesmediator(self)

    def getTUsemediator (self):
        return self._t_usemediator_

    def setTUsemediator(self, node):
        if(self._t_usemediator_ != None):
            self._t_usemediator_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_usemediator_ = node
    def getIdlist (self):
        return self._idlist_

    def setIdlist(self, node):
        if(self._idlist_ != None):
            self._idlist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._idlist_ = node

    def __str__(self):
        return '' + self.toString(self._t_usemediator_)+ self.toString(self._idlist_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_usemediator_ == child):
            self._t_usemediator_ = None
            return
        if (self._idlist_ == child):
            self._idlist_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_usemediator_ == oldChild):
            self.setTUsemediator(newChild)
            return
        if (self._idlist_ == oldChild):
            self.setIdlist(newChild)
            return

class AImportsontology(Node):
    def __init__ (self, _t_importontology_=None,_idlist_=None):
        super(AImportsontology, self).__init__()
        self._t_importontology_ = None
        self._idlist_ = None
        if (_t_importontology_ != None):
            self.setTImportontology(_t_importontology_)
        if (_idlist_ != None):
            self.setIdlist(_idlist_)

    def clone(self):
        return AImportsontology(self.cloneNode(self._t_importontology_),self.cloneNode(self._idlist_))

    def apply(self, analysis):
        return analysis.caseAImportsontology(self)

    def getTImportontology (self):
        return self._t_importontology_

    def setTImportontology(self, node):
        if(self._t_importontology_ != None):
            self._t_importontology_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_importontology_ = node
    def getIdlist (self):
        return self._idlist_

    def setIdlist(self, node):
        if(self._idlist_ != None):
            self._idlist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._idlist_ = node

    def __str__(self):
        return '' + self.toString(self._t_importontology_)+ self.toString(self._idlist_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_importontology_ == child):
            self._t_importontology_ = None
            return
        if (self._idlist_ == child):
            self._idlist_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_importontology_ == oldChild):
            self.setTImportontology(newChild)
            return
        if (self._idlist_ == oldChild):
            self.setIdlist(newChild)
            return

class ANfp(Node):
    def __init__ (self, _t_nfp_=None,_attributevalue_=None,_t_endnfp_=None):
        super(ANfp, self).__init__()
        self._t_nfp_ = None
        self._attributevalue_ = list()
        self._t_endnfp_ = None
        if (_t_nfp_ != None):
            self.setTNfp(_t_nfp_)
        if (_attributevalue_ != None):
            self._attributevalue_.extend(_attributevalue_)
        if (_t_endnfp_ != None):
            self.setTEndnfp(_t_endnfp_)

    def clone(self):
        return ANfp(self.cloneNode(self._t_nfp_),self.cloneList(self._attributevalue_),self.cloneNode(self._t_endnfp_))

    def apply(self, analysis):
        return analysis.caseANfp(self)

    def getTNfp (self):
        return self._t_nfp_

    def setTNfp(self, node):
        if(self._t_nfp_ != None):
            self._t_nfp_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_nfp_ = node
    def getAttributevalue(self):
        return self._attributevalue_

    def setAttributevalue(self, lst):
        del self._attributevalue_[0:len(self._attributevalue_)]
        self._attributevalue_.extend(lst)
        
    def getTEndnfp (self):
        return self._t_endnfp_

    def setTEndnfp(self, node):
        if(self._t_endnfp_ != None):
            self._t_endnfp_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_endnfp_ = node

    def __str__(self):
        return '' + self.toString(self._t_nfp_)+ self.toString(self._attributevalue_)+ self.toString(self._t_endnfp_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_nfp_ == child):
            self._t_nfp_ = None
            return
        if child in self._attributevalue_:
            self._attributevalue_.remove(child)
            return
        if (self._t_endnfp_ == child):
            self._t_endnfp_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_nfp_ == oldChild):
            self.setTNfp(newChild)
            return
        for i in range(self._attributevalue_):
            if (self._attributevalue_[i] == oldChild):
                if (newChild != None):
                    self._attributevalue_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._attributevalue_[i]
                oldChild.setparent(None)
                return
        if (self._t_endnfp_ == oldChild):
            self.setTEndnfp(newChild)
            return

class AOomediatorMediator(Node):
    def __init__ (self, _oomediator_=None):
        super(AOomediatorMediator, self).__init__()
        self._oomediator_ = None
        if (_oomediator_ != None):
            self.setOomediator(_oomediator_)

    def clone(self):
        return AOomediatorMediator(self.cloneNode(self._oomediator_))

    def apply(self, analysis):
        analysis.caseAOomediatorMediator(self)

    def getOomediator (self):
        return self._oomediator_

    def setOomediator(self, node):
        if(self._oomediator_ != None):
            self._oomediator_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._oomediator_ = node

    def __str__(self):
        return '' + self.toString(self._oomediator_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._oomediator_ == child):
            self._oomediator_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._oomediator_ == oldChild):
            self.setOomediator(newChild)
            return

class AGgmediatorMediator(Node):
    def __init__ (self, _ggmediator_=None):
        super(AGgmediatorMediator, self).__init__()
        self._ggmediator_ = None
        if (_ggmediator_ != None):
            self.setGgmediator(_ggmediator_)

    def clone(self):
        return AGgmediatorMediator(self.cloneNode(self._ggmediator_))

    def apply(self, analysis):
        analysis.caseAGgmediatorMediator(self)

    def getGgmediator (self):
        return self._ggmediator_

    def setGgmediator(self, node):
        if(self._ggmediator_ != None):
            self._ggmediator_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._ggmediator_ = node

    def __str__(self):
        return '' + self.toString(self._ggmediator_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._ggmediator_ == child):
            self._ggmediator_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._ggmediator_ == oldChild):
            self.setGgmediator(newChild)
            return

class AWgmediatorMediator(Node):
    def __init__ (self, _wgmediator_=None):
        super(AWgmediatorMediator, self).__init__()
        self._wgmediator_ = None
        if (_wgmediator_ != None):
            self.setWgmediator(_wgmediator_)

    def clone(self):
        return AWgmediatorMediator(self.cloneNode(self._wgmediator_))

    def apply(self, analysis):
        analysis.caseAWgmediatorMediator(self)

    def getWgmediator (self):
        return self._wgmediator_

    def setWgmediator(self, node):
        if(self._wgmediator_ != None):
            self._wgmediator_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._wgmediator_ = node

    def __str__(self):
        return '' + self.toString(self._wgmediator_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._wgmediator_ == child):
            self._wgmediator_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._wgmediator_ == oldChild):
            self.setWgmediator(newChild)
            return

class AWwmediatorMediator(Node):
    def __init__ (self, _wwmediator_=None):
        super(AWwmediatorMediator, self).__init__()
        self._wwmediator_ = None
        if (_wwmediator_ != None):
            self.setWwmediator(_wwmediator_)

    def clone(self):
        return AWwmediatorMediator(self.cloneNode(self._wwmediator_))

    def apply(self, analysis):
        analysis.caseAWwmediatorMediator(self)

    def getWwmediator (self):
        return self._wwmediator_

    def setWwmediator(self, node):
        if(self._wwmediator_ != None):
            self._wwmediator_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._wwmediator_ = node

    def __str__(self):
        return '' + self.toString(self._wwmediator_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._wwmediator_ == child):
            self._wwmediator_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._wwmediator_ == oldChild):
            self.setWwmediator(newChild)
            return

class AOomediator(Node):
    def __init__ (self, _t_oomediator_=None,_id_=None,_nfp_=None,_importsontology_=None,_sources_=None,_target_=None,_use_service_=None):
        super(AOomediator, self).__init__()
        self._t_oomediator_ = None
        self._id_ = None
        self._nfp_ = None
        self._importsontology_ = None
        self._sources_ = None
        self._target_ = None
        self._use_service_ = None
        if (_t_oomediator_ != None):
            self.setTOomediator(_t_oomediator_)
        if (_id_ != None):
            self.setId(_id_)
        if (_nfp_ != None):
            self.setNfp(_nfp_)
        if (_importsontology_ != None):
            self.setImportsontology(_importsontology_)
        if (_sources_ != None):
            self.setSources(_sources_)
        if (_target_ != None):
            self.setTarget(_target_)
        if (_use_service_ != None):
            self.setUseService(_use_service_)

    def clone(self):
        return AOomediator(self.cloneNode(self._t_oomediator_),self.cloneNode(self._id_),self.cloneNode(self._nfp_),self.cloneNode(self._importsontology_),self.cloneNode(self._sources_),self.cloneNode(self._target_),self.cloneNode(self._use_service_))

    def apply(self, analysis):
        analysis.caseAOomediator(self)

    def getTOomediator (self):
        return self._t_oomediator_

    def setTOomediator(self, node):
        if(self._t_oomediator_ != None):
            self._t_oomediator_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_oomediator_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getNfp (self):
        return self._nfp_

    def setNfp(self, node):
        if(self._nfp_ != None):
            self._nfp_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._nfp_ = node
    def getImportsontology (self):
        return self._importsontology_

    def setImportsontology(self, node):
        if(self._importsontology_ != None):
            self._importsontology_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._importsontology_ = node
    def getSources (self):
        return self._sources_

    def setSources(self, node):
        if(self._sources_ != None):
            self._sources_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._sources_ = node
    def getTarget (self):
        return self._target_

    def setTarget(self, node):
        if(self._target_ != None):
            self._target_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._target_ = node
    def getUseService (self):
        return self._use_service_

    def setUseService(self, node):
        if(self._use_service_ != None):
            self._use_service_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._use_service_ = node

    def __str__(self):
        return '' + self.toString(self._t_oomediator_)+ self.toString(self._id_)+ self.toString(self._nfp_)+ self.toString(self._importsontology_)+ self.toString(self._sources_)+ self.toString(self._target_)+ self.toString(self._use_service_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_oomediator_ == child):
            self._t_oomediator_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return
        if (self._nfp_ == child):
            self._nfp_ = None
            return
        if (self._importsontology_ == child):
            self._importsontology_ = None
            return
        if (self._sources_ == child):
            self._sources_ = None
            return
        if (self._target_ == child):
            self._target_ = None
            return
        if (self._use_service_ == child):
            self._use_service_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_oomediator_ == oldChild):
            self.setTOomediator(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        if (self._nfp_ == oldChild):
            self.setNfp(newChild)
            return
        if (self._importsontology_ == oldChild):
            self.setImportsontology(newChild)
            return
        if (self._sources_ == oldChild):
            self.setSources(newChild)
            return
        if (self._target_ == oldChild):
            self.setTarget(newChild)
            return
        if (self._use_service_ == oldChild):
            self.setUseService(newChild)
            return

class AGgmediator(Node):
    def __init__ (self, _t_ggmediator_=None,_id_=None,_header_=None,_sources_=None,_target_=None,_use_service_=None):
        super(AGgmediator, self).__init__()
        self._t_ggmediator_ = None
        self._id_ = None
        self._header_ = list()
        self._sources_ = None
        self._target_ = None
        self._use_service_ = None
        if (_t_ggmediator_ != None):
            self.setTGgmediator(_t_ggmediator_)
        if (_id_ != None):
            self.setId(_id_)
        if (_header_ != None):
            self._header_.extend(_header_)
        if (_sources_ != None):
            self.setSources(_sources_)
        if (_target_ != None):
            self.setTarget(_target_)
        if (_use_service_ != None):
            self.setUseService(_use_service_)

    def clone(self):
        return AGgmediator(self.cloneNode(self._t_ggmediator_),self.cloneNode(self._id_),self.cloneList(self._header_),self.cloneNode(self._sources_),self.cloneNode(self._target_),self.cloneNode(self._use_service_))

    def apply(self, analysis):
        analysis.caseAGgmediator(self)

    def getTGgmediator (self):
        return self._t_ggmediator_

    def setTGgmediator(self, node):
        if(self._t_ggmediator_ != None):
            self._t_ggmediator_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_ggmediator_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getHeader(self):
        return self._header_

    def setHeader(self, lst):
        del self._header_[0:len(self._header_)]
        self._header_.extend(lst)
        
    def getSources (self):
        return self._sources_

    def setSources(self, node):
        if(self._sources_ != None):
            self._sources_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._sources_ = node
    def getTarget (self):
        return self._target_

    def setTarget(self, node):
        if(self._target_ != None):
            self._target_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._target_ = node
    def getUseService (self):
        return self._use_service_

    def setUseService(self, node):
        if(self._use_service_ != None):
            self._use_service_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._use_service_ = node

    def __str__(self):
        return '' + self.toString(self._t_ggmediator_)+ self.toString(self._id_)+ self.toString(self._header_)+ self.toString(self._sources_)+ self.toString(self._target_)+ self.toString(self._use_service_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_ggmediator_ == child):
            self._t_ggmediator_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return
        if child in self._header_:
            self._header_.remove(child)
            return
        if (self._sources_ == child):
            self._sources_ = None
            return
        if (self._target_ == child):
            self._target_ = None
            return
        if (self._use_service_ == child):
            self._use_service_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_ggmediator_ == oldChild):
            self.setTGgmediator(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        for i in range(self._header_):
            if (self._header_[i] == oldChild):
                if (newChild != None):
                    self._header_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._header_[i]
                oldChild.setparent(None)
                return
        if (self._sources_ == oldChild):
            self.setSources(newChild)
            return
        if (self._target_ == oldChild):
            self.setTarget(newChild)
            return
        if (self._use_service_ == oldChild):
            self.setUseService(newChild)
            return

class AWgmediator(Node):
    def __init__ (self, _t_wgmediator_=None,_id_=None,_header_=None,_source_=None,_target_=None,_use_service_=None):
        super(AWgmediator, self).__init__()
        self._t_wgmediator_ = None
        self._id_ = None
        self._header_ = list()
        self._source_ = None
        self._target_ = None
        self._use_service_ = None
        if (_t_wgmediator_ != None):
            self.setTWgmediator(_t_wgmediator_)
        if (_id_ != None):
            self.setId(_id_)
        if (_header_ != None):
            self._header_.extend(_header_)
        if (_source_ != None):
            self.setSource(_source_)
        if (_target_ != None):
            self.setTarget(_target_)
        if (_use_service_ != None):
            self.setUseService(_use_service_)

    def clone(self):
        return AWgmediator(self.cloneNode(self._t_wgmediator_),self.cloneNode(self._id_),self.cloneList(self._header_),self.cloneNode(self._source_),self.cloneNode(self._target_),self.cloneNode(self._use_service_))

    def apply(self, analysis):
        analysis.caseAWgmediator(self)

    def getTWgmediator (self):
        return self._t_wgmediator_

    def setTWgmediator(self, node):
        if(self._t_wgmediator_ != None):
            self._t_wgmediator_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_wgmediator_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getHeader(self):
        return self._header_

    def setHeader(self, lst):
        del self._header_[0:len(self._header_)]
        self._header_.extend(lst)
        
    def getSource (self):
        return self._source_

    def setSource(self, node):
        if(self._source_ != None):
            self._source_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._source_ = node
    def getTarget (self):
        return self._target_

    def setTarget(self, node):
        if(self._target_ != None):
            self._target_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._target_ = node
    def getUseService (self):
        return self._use_service_

    def setUseService(self, node):
        if(self._use_service_ != None):
            self._use_service_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._use_service_ = node

    def __str__(self):
        return '' + self.toString(self._t_wgmediator_)+ self.toString(self._id_)+ self.toString(self._header_)+ self.toString(self._source_)+ self.toString(self._target_)+ self.toString(self._use_service_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_wgmediator_ == child):
            self._t_wgmediator_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return
        if child in self._header_:
            self._header_.remove(child)
            return
        if (self._source_ == child):
            self._source_ = None
            return
        if (self._target_ == child):
            self._target_ = None
            return
        if (self._use_service_ == child):
            self._use_service_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_wgmediator_ == oldChild):
            self.setTWgmediator(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        for i in range(self._header_):
            if (self._header_[i] == oldChild):
                if (newChild != None):
                    self._header_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._header_[i]
                oldChild.setparent(None)
                return
        if (self._source_ == oldChild):
            self.setSource(newChild)
            return
        if (self._target_ == oldChild):
            self.setTarget(newChild)
            return
        if (self._use_service_ == oldChild):
            self.setUseService(newChild)
            return

class AWwmediator(Node):
    def __init__ (self, _t_wwmediator_=None,_id_=None,_header_=None,_source_=None,_target_=None,_use_service_=None):
        super(AWwmediator, self).__init__()
        self._t_wwmediator_ = None
        self._id_ = None
        self._header_ = list()
        self._source_ = None
        self._target_ = None
        self._use_service_ = None
        if (_t_wwmediator_ != None):
            self.setTWwmediator(_t_wwmediator_)
        if (_id_ != None):
            self.setId(_id_)
        if (_header_ != None):
            self._header_.extend(_header_)
        if (_source_ != None):
            self.setSource(_source_)
        if (_target_ != None):
            self.setTarget(_target_)
        if (_use_service_ != None):
            self.setUseService(_use_service_)

    def clone(self):
        return AWwmediator(self.cloneNode(self._t_wwmediator_),self.cloneNode(self._id_),self.cloneList(self._header_),self.cloneNode(self._source_),self.cloneNode(self._target_),self.cloneNode(self._use_service_))

    def apply(self, analysis):
        analysis.caseAWwmediator(self)

    def getTWwmediator (self):
        return self._t_wwmediator_

    def setTWwmediator(self, node):
        if(self._t_wwmediator_ != None):
            self._t_wwmediator_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_wwmediator_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getHeader(self):
        return self._header_

    def setHeader(self, lst):
        del self._header_[0:len(self._header_)]
        self._header_.extend(lst)
        
    def getSource (self):
        return self._source_

    def setSource(self, node):
        if(self._source_ != None):
            self._source_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._source_ = node
    def getTarget (self):
        return self._target_

    def setTarget(self, node):
        if(self._target_ != None):
            self._target_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._target_ = node
    def getUseService (self):
        return self._use_service_

    def setUseService(self, node):
        if(self._use_service_ != None):
            self._use_service_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._use_service_ = node

    def __str__(self):
        return '' + self.toString(self._t_wwmediator_)+ self.toString(self._id_)+ self.toString(self._header_)+ self.toString(self._source_)+ self.toString(self._target_)+ self.toString(self._use_service_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_wwmediator_ == child):
            self._t_wwmediator_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return
        if child in self._header_:
            self._header_.remove(child)
            return
        if (self._source_ == child):
            self._source_ = None
            return
        if (self._target_ == child):
            self._target_ = None
            return
        if (self._use_service_ == child):
            self._use_service_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_wwmediator_ == oldChild):
            self.setTWwmediator(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        for i in range(self._header_):
            if (self._header_[i] == oldChild):
                if (newChild != None):
                    self._header_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._header_[i]
                oldChild.setparent(None)
                return
        if (self._source_ == oldChild):
            self.setSource(newChild)
            return
        if (self._target_ == oldChild):
            self.setTarget(newChild)
            return
        if (self._use_service_ == oldChild):
            self.setUseService(newChild)
            return

class AUseService(Node):
    def __init__ (self, _t_useservice_=None,_id_=None):
        super(AUseService, self).__init__()
        self._t_useservice_ = None
        self._id_ = None
        if (_t_useservice_ != None):
            self.setTUseservice(_t_useservice_)
        if (_id_ != None):
            self.setId(_id_)

    def clone(self):
        return AUseService(self.cloneNode(self._t_useservice_),self.cloneNode(self._id_))

    def apply(self, analysis):
        analysis.caseAUseService(self)

    def getTUseservice (self):
        return self._t_useservice_

    def setTUseservice(self, node):
        if(self._t_useservice_ != None):
            self._t_useservice_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_useservice_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node

    def __str__(self):
        return '' + self.toString(self._t_useservice_)+ self.toString(self._id_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_useservice_ == child):
            self._t_useservice_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_useservice_ == oldChild):
            self.setTUseservice(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return

class ASource(Node):
    def __init__ (self, _t_source_=None,_id_=None):
        super(ASource, self).__init__()
        self._t_source_ = None
        self._id_ = None
        if (_t_source_ != None):
            self.setTSource(_t_source_)
        if (_id_ != None):
            self.setId(_id_)

    def clone(self):
        return ASource(self.cloneNode(self._t_source_),self.cloneNode(self._id_))

    def apply(self, analysis):
        analysis.caseASource(self)

    def getTSource (self):
        return self._t_source_

    def setTSource(self, node):
        if(self._t_source_ != None):
            self._t_source_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_source_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node

    def __str__(self):
        return '' + self.toString(self._t_source_)+ self.toString(self._id_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_source_ == child):
            self._t_source_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_source_ == oldChild):
            self.setTSource(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return

class AMsources(Node):
    def __init__ (self, _t_source_=None,_lbrace_=None,_id_=None,_moreids_=None,_rbrace_=None):
        super(AMsources, self).__init__()
        self._t_source_ = None
        self._lbrace_ = None
        self._id_ = None
        self._moreids_ = list()
        self._rbrace_ = None
        if (_t_source_ != None):
            self.setTSource(_t_source_)
        if (_lbrace_ != None):
            self.setLbrace(_lbrace_)
        if (_id_ != None):
            self.setId(_id_)
        if (_moreids_ != None):
            self._moreids_.extend(_moreids_)
        if (_rbrace_ != None):
            self.setRbrace(_rbrace_)

    def clone(self):
        return AMsources(self.cloneNode(self._t_source_),self.cloneNode(self._lbrace_),self.cloneNode(self._id_),self.cloneList(self._moreids_),self.cloneNode(self._rbrace_))

    def apply(self, analysis):
        analysis.caseAMsources(self)

    def getTSource (self):
        return self._t_source_

    def setTSource(self, node):
        if(self._t_source_ != None):
            self._t_source_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_source_ = node
    def getLbrace (self):
        return self._lbrace_

    def setLbrace(self, node):
        if(self._lbrace_ != None):
            self._lbrace_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lbrace_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getMoreids(self):
        return self._moreids_

    def setMoreids(self, lst):
        del self._moreids_[0:len(self._moreids_)]
        self._moreids_.extend(lst)
        
    def getRbrace (self):
        return self._rbrace_

    def setRbrace(self, node):
        if(self._rbrace_ != None):
            self._rbrace_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._rbrace_ = node

    def __str__(self):
        return '' + self.toString(self._t_source_)+ self.toString(self._lbrace_)+ self.toString(self._id_)+ self.toString(self._moreids_)+ self.toString(self._rbrace_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_source_ == child):
            self._t_source_ = None
            return
        if (self._lbrace_ == child):
            self._lbrace_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return
        if child in self._moreids_:
            self._moreids_.remove(child)
            return
        if (self._rbrace_ == child):
            self._rbrace_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_source_ == oldChild):
            self.setTSource(newChild)
            return
        if (self._lbrace_ == oldChild):
            self.setLbrace(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        for i in range(self._moreids_):
            if (self._moreids_[i] == oldChild):
                if (newChild != None):
                    self._moreids_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._moreids_[i]
                oldChild.setparent(None)
                return
        if (self._rbrace_ == oldChild):
            self.setRbrace(newChild)
            return

class ASingleSources(Node):
    def __init__ (self, _source_=None):
        super(ASingleSources, self).__init__()
        self._source_ = None
        if (_source_ != None):
            self.setSource(_source_)

    def clone(self):
        return ASingleSources(self.cloneNode(self._source_))

    def apply(self, analysis):
        analysis.caseASingleSources(self)

    def getSource (self):
        return self._source_

    def setSource(self, node):
        if(self._source_ != None):
            self._source_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._source_ = node

    def __str__(self):
        return '' + self.toString(self._source_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._source_ == child):
            self._source_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._source_ == oldChild):
            self.setSource(newChild)
            return

class AMultipleSources(Node):
    def __init__ (self, _msources_=None):
        super(AMultipleSources, self).__init__()
        self._msources_ = None
        if (_msources_ != None):
            self.setMsources(_msources_)

    def clone(self):
        return AMultipleSources(self.cloneNode(self._msources_))

    def apply(self, analysis):
        analysis.caseAMultipleSources(self)

    def getMsources (self):
        return self._msources_

    def setMsources(self, node):
        if(self._msources_ != None):
            self._msources_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._msources_ = node

    def __str__(self):
        return '' + self.toString(self._msources_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._msources_ == child):
            self._msources_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._msources_ == oldChild):
            self.setMsources(newChild)
            return

class ATarget(Node):
    def __init__ (self, _t_target_=None,_id_=None):
        super(ATarget, self).__init__()
        self._t_target_ = None
        self._id_ = None
        if (_t_target_ != None):
            self.setTTarget(_t_target_)
        if (_id_ != None):
            self.setId(_id_)

    def clone(self):
        return ATarget(self.cloneNode(self._t_target_),self.cloneNode(self._id_))

    def apply(self, analysis):
        analysis.caseATarget(self)

    def getTTarget (self):
        return self._t_target_

    def setTTarget(self, node):
        if(self._t_target_ != None):
            self._t_target_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_target_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node

    def __str__(self):
        return '' + self.toString(self._t_target_)+ self.toString(self._id_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_target_ == child):
            self._t_target_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_target_ == oldChild):
            self.setTTarget(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return

class APreconditionPrePostAssOrEff(Node):
    def __init__ (self, _t_precondition_=None,_axiomdefinition_=None):
        super(APreconditionPrePostAssOrEff, self).__init__()
        self._t_precondition_ = None
        self._axiomdefinition_ = None
        if (_t_precondition_ != None):
            self.setTPrecondition(_t_precondition_)
        if (_axiomdefinition_ != None):
            self.setAxiomdefinition(_axiomdefinition_)

    def clone(self):
        return APreconditionPrePostAssOrEff(self.cloneNode(self._t_precondition_),self.cloneNode(self._axiomdefinition_))

    def apply(self, analysis):
        analysis.caseAPreconditionPrePostAssOrEff(self)

    def getTPrecondition (self):
        return self._t_precondition_

    def setTPrecondition(self, node):
        if(self._t_precondition_ != None):
            self._t_precondition_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_precondition_ = node
    def getAxiomdefinition (self):
        return self._axiomdefinition_

    def setAxiomdefinition(self, node):
        if(self._axiomdefinition_ != None):
            self._axiomdefinition_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._axiomdefinition_ = node

    def __str__(self):
        return '' + self.toString(self._t_precondition_)+ self.toString(self._axiomdefinition_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_precondition_ == child):
            self._t_precondition_ = None
            return
        if (self._axiomdefinition_ == child):
            self._axiomdefinition_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_precondition_ == oldChild):
            self.setTPrecondition(newChild)
            return
        if (self._axiomdefinition_ == oldChild):
            self.setAxiomdefinition(newChild)
            return

class APostconditionPrePostAssOrEff(Node):
    def __init__ (self, _t_postcondition_=None,_axiomdefinition_=None):
        super(APostconditionPrePostAssOrEff, self).__init__()
        self._t_postcondition_ = None
        self._axiomdefinition_ = None
        if (_t_postcondition_ != None):
            self.setTPostcondition(_t_postcondition_)
        if (_axiomdefinition_ != None):
            self.setAxiomdefinition(_axiomdefinition_)

    def clone(self):
        return APostconditionPrePostAssOrEff(self.cloneNode(self._t_postcondition_),self.cloneNode(self._axiomdefinition_))

    def apply(self, analysis):
        analysis.caseAPostconditionPrePostAssOrEff(self)

    def getTPostcondition (self):
        return self._t_postcondition_

    def setTPostcondition(self, node):
        if(self._t_postcondition_ != None):
            self._t_postcondition_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_postcondition_ = node
    def getAxiomdefinition (self):
        return self._axiomdefinition_

    def setAxiomdefinition(self, node):
        if(self._axiomdefinition_ != None):
            self._axiomdefinition_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._axiomdefinition_ = node

    def __str__(self):
        return '' + self.toString(self._t_postcondition_)+ self.toString(self._axiomdefinition_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_postcondition_ == child):
            self._t_postcondition_ = None
            return
        if (self._axiomdefinition_ == child):
            self._axiomdefinition_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_postcondition_ == oldChild):
            self.setTPostcondition(newChild)
            return
        if (self._axiomdefinition_ == oldChild):
            self.setAxiomdefinition(newChild)
            return

class AAssumptionPrePostAssOrEff(Node):
    def __init__ (self, _t_assumption_=None,_axiomdefinition_=None):
        super(AAssumptionPrePostAssOrEff, self).__init__()
        self._t_assumption_ = None
        self._axiomdefinition_ = None
        if (_t_assumption_ != None):
            self.setTAssumption(_t_assumption_)
        if (_axiomdefinition_ != None):
            self.setAxiomdefinition(_axiomdefinition_)

    def clone(self):
        return AAssumptionPrePostAssOrEff(self.cloneNode(self._t_assumption_),self.cloneNode(self._axiomdefinition_))

    def apply(self, analysis):
        analysis.caseAAssumptionPrePostAssOrEff(self)

    def getTAssumption (self):
        return self._t_assumption_

    def setTAssumption(self, node):
        if(self._t_assumption_ != None):
            self._t_assumption_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_assumption_ = node
    def getAxiomdefinition (self):
        return self._axiomdefinition_

    def setAxiomdefinition(self, node):
        if(self._axiomdefinition_ != None):
            self._axiomdefinition_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._axiomdefinition_ = node

    def __str__(self):
        return '' + self.toString(self._t_assumption_)+ self.toString(self._axiomdefinition_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_assumption_ == child):
            self._t_assumption_ = None
            return
        if (self._axiomdefinition_ == child):
            self._axiomdefinition_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_assumption_ == oldChild):
            self.setTAssumption(newChild)
            return
        if (self._axiomdefinition_ == oldChild):
            self.setAxiomdefinition(newChild)
            return

class AEffectPrePostAssOrEff(Node):
    def __init__ (self, _t_effect_=None,_axiomdefinition_=None):
        super(AEffectPrePostAssOrEff, self).__init__()
        self._t_effect_ = None
        self._axiomdefinition_ = None
        if (_t_effect_ != None):
            self.setTEffect(_t_effect_)
        if (_axiomdefinition_ != None):
            self.setAxiomdefinition(_axiomdefinition_)

    def clone(self):
        return AEffectPrePostAssOrEff(self.cloneNode(self._t_effect_),self.cloneNode(self._axiomdefinition_))

    def apply(self, analysis):
        analysis.caseAEffectPrePostAssOrEff(self)

    def getTEffect (self):
        return self._t_effect_

    def setTEffect(self, node):
        if(self._t_effect_ != None):
            self._t_effect_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_effect_ = node
    def getAxiomdefinition (self):
        return self._axiomdefinition_

    def setAxiomdefinition(self, node):
        if(self._axiomdefinition_ != None):
            self._axiomdefinition_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._axiomdefinition_ = node

    def __str__(self):
        return '' + self.toString(self._t_effect_)+ self.toString(self._axiomdefinition_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_effect_ == child):
            self._t_effect_ = None
            return
        if (self._axiomdefinition_ == child):
            self._axiomdefinition_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_effect_ == oldChild):
            self.setTEffect(newChild)
            return
        if (self._axiomdefinition_ == oldChild):
            self.setAxiomdefinition(newChild)
            return

class AMinterfaces(Node):
    def __init__ (self, _t_interface_=None,_lbrace_=None,_id_=None,_moreids_=None,_rbrace_=None):
        super(AMinterfaces, self).__init__()
        self._t_interface_ = None
        self._lbrace_ = None
        self._id_ = None
        self._moreids_ = list()
        self._rbrace_ = None
        if (_t_interface_ != None):
            self.setTInterface(_t_interface_)
        if (_lbrace_ != None):
            self.setLbrace(_lbrace_)
        if (_id_ != None):
            self.setId(_id_)
        if (_moreids_ != None):
            self._moreids_.extend(_moreids_)
        if (_rbrace_ != None):
            self.setRbrace(_rbrace_)

    def clone(self):
        return AMinterfaces(self.cloneNode(self._t_interface_),self.cloneNode(self._lbrace_),self.cloneNode(self._id_),self.cloneList(self._moreids_),self.cloneNode(self._rbrace_))

    def apply(self, analysis):
        analysis.caseAMinterfaces(self)

    def getTInterface (self):
        return self._t_interface_

    def setTInterface(self, node):
        if(self._t_interface_ != None):
            self._t_interface_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_interface_ = node
    def getLbrace (self):
        return self._lbrace_

    def setLbrace(self, node):
        if(self._lbrace_ != None):
            self._lbrace_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lbrace_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getMoreids(self):
        return self._moreids_

    def setMoreids(self, lst):
        del self._moreids_[0:len(self._moreids_)]
        self._moreids_.extend(lst)
        
    def getRbrace (self):
        return self._rbrace_

    def setRbrace(self, node):
        if(self._rbrace_ != None):
            self._rbrace_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._rbrace_ = node

    def __str__(self):
        return '' + self.toString(self._t_interface_)+ self.toString(self._lbrace_)+ self.toString(self._id_)+ self.toString(self._moreids_)+ self.toString(self._rbrace_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_interface_ == child):
            self._t_interface_ = None
            return
        if (self._lbrace_ == child):
            self._lbrace_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return
        if child in self._moreids_:
            self._moreids_.remove(child)
            return
        if (self._rbrace_ == child):
            self._rbrace_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_interface_ == oldChild):
            self.setTInterface(newChild)
            return
        if (self._lbrace_ == oldChild):
            self.setLbrace(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        for i in range(self._moreids_):
            if (self._moreids_[i] == oldChild):
                if (newChild != None):
                    self._moreids_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._moreids_[i]
                oldChild.setparent(None)
                return
        if (self._rbrace_ == oldChild):
            self.setRbrace(newChild)
            return

class AInterface(Node):
    def __init__ (self, _t_interface_=None,_id_=None,_header_=None,_choreography_=None,_orchestration_=None):
        super(AInterface, self).__init__()
        self._t_interface_ = None
        self._id_ = None
        self._header_ = list()
        self._choreography_ = None
        self._orchestration_ = None
        if (_t_interface_ != None):
            self.setTInterface(_t_interface_)
        if (_id_ != None):
            self.setId(_id_)
        if (_header_ != None):
            self._header_.extend(_header_)
        if (_choreography_ != None):
            self.setChoreography(_choreography_)
        if (_orchestration_ != None):
            self.setOrchestration(_orchestration_)

    def clone(self):
        return AInterface(self.cloneNode(self._t_interface_),self.cloneNode(self._id_),self.cloneList(self._header_),self.cloneNode(self._choreography_),self.cloneNode(self._orchestration_))

    def apply(self, analysis):
        analysis.caseAInterface(self)

    def getTInterface (self):
        return self._t_interface_

    def setTInterface(self, node):
        if(self._t_interface_ != None):
            self._t_interface_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_interface_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getHeader(self):
        return self._header_

    def setHeader(self, lst):
        del self._header_[0:len(self._header_)]
        self._header_.extend(lst)
        
    def getChoreography (self):
        return self._choreography_

    def setChoreography(self, node):
        if(self._choreography_ != None):
            self._choreography_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._choreography_ = node
    def getOrchestration (self):
        return self._orchestration_

    def setOrchestration(self, node):
        if(self._orchestration_ != None):
            self._orchestration_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._orchestration_ = node

    def __str__(self):
        return '' + self.toString(self._t_interface_)+ self.toString(self._id_)+ self.toString(self._header_)+ self.toString(self._choreography_)+ self.toString(self._orchestration_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_interface_ == child):
            self._t_interface_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return
        if child in self._header_:
            self._header_.remove(child)
            return
        if (self._choreography_ == child):
            self._choreography_ = None
            return
        if (self._orchestration_ == child):
            self._orchestration_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_interface_ == oldChild):
            self.setTInterface(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        for i in range(self._header_):
            if (self._header_[i] == oldChild):
                if (newChild != None):
                    self._header_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._header_[i]
                oldChild.setparent(None)
                return
        if (self._choreography_ == oldChild):
            self.setChoreography(newChild)
            return
        if (self._orchestration_ == oldChild):
            self.setOrchestration(newChild)
            return

class ASingleInterfaces(Node):
    def __init__ (self, _interface_=None):
        super(ASingleInterfaces, self).__init__()
        self._interface_ = None
        if (_interface_ != None):
            self.setInterface(_interface_)

    def clone(self):
        return ASingleInterfaces(self.cloneNode(self._interface_))

    def apply(self, analysis):
        analysis.caseASingleInterfaces(self)

    def getInterface (self):
        return self._interface_

    def setInterface(self, node):
        if(self._interface_ != None):
            self._interface_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._interface_ = node

    def __str__(self):
        return '' + self.toString(self._interface_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._interface_ == child):
            self._interface_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._interface_ == oldChild):
            self.setInterface(newChild)
            return

class AMultipleInterfaces(Node):
    def __init__ (self, _minterfaces_=None):
        super(AMultipleInterfaces, self).__init__()
        self._minterfaces_ = None
        if (_minterfaces_ != None):
            self.setMinterfaces(_minterfaces_)

    def clone(self):
        return AMultipleInterfaces(self.cloneNode(self._minterfaces_))

    def apply(self, analysis):
        analysis.caseAMultipleInterfaces(self)

    def getMinterfaces (self):
        return self._minterfaces_

    def setMinterfaces(self, node):
        if(self._minterfaces_ != None):
            self._minterfaces_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._minterfaces_ = node

    def __str__(self):
        return '' + self.toString(self._minterfaces_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._minterfaces_ == child):
            self._minterfaces_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._minterfaces_ == oldChild):
            self.setMinterfaces(newChild)
            return

class AChoreography(Node):
    def __init__ (self, _t_choreography_=None,_id_=None):
        super(AChoreography, self).__init__()
        self._t_choreography_ = None
        self._id_ = None
        if (_t_choreography_ != None):
            self.setTChoreography(_t_choreography_)
        if (_id_ != None):
            self.setId(_id_)

    def clone(self):
        return AChoreography(self.cloneNode(self._t_choreography_),self.cloneNode(self._id_))

    def apply(self, analysis):
        analysis.caseAChoreography(self)

    def getTChoreography (self):
        return self._t_choreography_

    def setTChoreography(self, node):
        if(self._t_choreography_ != None):
            self._t_choreography_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_choreography_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node

    def __str__(self):
        return '' + self.toString(self._t_choreography_)+ self.toString(self._id_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_choreography_ == child):
            self._t_choreography_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_choreography_ == oldChild):
            self.setTChoreography(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return

class AOrchestration(Node):
    def __init__ (self, _t_orchestration_=None,_id_=None):
        super(AOrchestration, self).__init__()
        self._t_orchestration_ = None
        self._id_ = None
        if (_t_orchestration_ != None):
            self.setTOrchestration(_t_orchestration_)
        if (_id_ != None):
            self.setId(_id_)

    def clone(self):
        return AOrchestration(self.cloneNode(self._t_orchestration_),self.cloneNode(self._id_))

    def apply(self, analysis):
        analysis.caseAOrchestration(self)

    def getTOrchestration (self):
        return self._t_orchestration_

    def setTOrchestration(self, node):
        if(self._t_orchestration_ != None):
            self._t_orchestration_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_orchestration_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node

    def __str__(self):
        return '' + self.toString(self._t_orchestration_)+ self.toString(self._id_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_orchestration_ == child):
            self._t_orchestration_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_orchestration_ == oldChild):
            self.setTOrchestration(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return

class AOntology(Node):
    def __init__ (self, _t_ontology_=None,_id_=None,_header_=None,_ontology_element_=None):
        super(AOntology, self).__init__()
        self._t_ontology_ = None
        self._id_ = None
        self._header_ = list()
        self._ontology_element_ = list()
        if (_t_ontology_ != None):
            self.setTOntology(_t_ontology_)
        if (_id_ != None):
            self.setId(_id_)
        if (_header_ != None):
            self._header_.extend(_header_)
        if (_ontology_element_ != None):
            self._ontology_element_.extend(_ontology_element_)

    def clone(self):
        return AOntology(self.cloneNode(self._t_ontology_),self.cloneNode(self._id_),self.cloneList(self._header_),self.cloneList(self._ontology_element_))

    def apply(self, analysis):
        analysis.caseAOntology(self)

    def getTOntology (self):
        return self._t_ontology_

    def setTOntology(self, node):
        if(self._t_ontology_ != None):
            self._t_ontology_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_ontology_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getHeader(self):
        return self._header_

    def setHeader(self, lst):
        del self._header_[0:len(self._header_)]
        self._header_.extend(lst)
        
    def getOntologyElement(self):
        return self._ontology_element_

    def setOntologyElement(self, lst):
        del self._ontology_element_[0:len(self._ontology_element_)]
        self._ontology_element_.extend(lst)
        

    def __str__(self):
        return '' + self.toString(self._t_ontology_)+ self.toString(self._id_)+ self.toString(self._header_)+ self.toString(self._ontology_element_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_ontology_ == child):
            self._t_ontology_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return
        if child in self._header_:
            self._header_.remove(child)
            return
        if child in self._ontology_element_:
            self._ontology_element_.remove(child)
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_ontology_ == oldChild):
            self.setTOntology(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        for i in range(self._header_):
            if (self._header_[i] == oldChild):
                if (newChild != None):
                    self._header_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._header_[i]
                oldChild.setparent(None)
                return
        for i in range(self._ontology_element_):
            if (self._ontology_element_[i] == oldChild):
                if (newChild != None):
                    self._ontology_element_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._ontology_element_[i]
                oldChild.setparent(None)
                return

class AConceptOntologyElement(Node):
    def __init__ (self, _concept_=None):
        super(AConceptOntologyElement, self).__init__()
        self._concept_ = None
        if (_concept_ != None):
            self.setConcept(_concept_)

    def clone(self):
        return AConceptOntologyElement(self.cloneNode(self._concept_))

    def apply(self, analysis):
        analysis.caseAConceptOntologyElement(self)

    def getConcept (self):
        return self._concept_

    def setConcept(self, node):
        if(self._concept_ != None):
            self._concept_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._concept_ = node

    def __str__(self):
        return '' + self.toString(self._concept_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._concept_ == child):
            self._concept_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._concept_ == oldChild):
            self.setConcept(newChild)
            return

class AInstanceOntologyElement(Node):
    def __init__ (self, _instance_=None):
        super(AInstanceOntologyElement, self).__init__()
        self._instance_ = None
        if (_instance_ != None):
            self.setInstance(_instance_)

    def clone(self):
        return AInstanceOntologyElement(self.cloneNode(self._instance_))

    def apply(self, analysis):
        analysis.caseAInstanceOntologyElement(self)

    def getInstance (self):
        return self._instance_

    def setInstance(self, node):
        if(self._instance_ != None):
            self._instance_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._instance_ = node

    def __str__(self):
        return '' + self.toString(self._instance_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._instance_ == child):
            self._instance_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._instance_ == oldChild):
            self.setInstance(newChild)
            return

class ARelationOntologyElement(Node):
    def __init__ (self, _relation_=None):
        super(ARelationOntologyElement, self).__init__()
        self._relation_ = None
        if (_relation_ != None):
            self.setRelation(_relation_)

    def clone(self):
        return ARelationOntologyElement(self.cloneNode(self._relation_))

    def apply(self, analysis):
        return analysis.caseARelationOntologyElement(self)

    def getRelation (self):
        return self._relation_

    def setRelation(self, node):
        if(self._relation_ != None):
            self._relation_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._relation_ = node

    def __str__(self):
        return '' + self.toString(self._relation_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._relation_ == child):
            self._relation_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._relation_ == oldChild):
            self.setRelation(newChild)
            return

class ARelationinstanceOntologyElement(Node):
    def __init__ (self, _relationinstance_=None):
        super(ARelationinstanceOntologyElement, self).__init__()
        self._relationinstance_ = None
        if (_relationinstance_ != None):
            self.setRelationinstance(_relationinstance_)

    def clone(self):
        return ARelationinstanceOntologyElement(self.cloneNode(self._relationinstance_))

    def apply(self, analysis):
        analysis.caseARelationinstanceOntologyElement(self)

    def getRelationinstance (self):
        return self._relationinstance_

    def setRelationinstance(self, node):
        if(self._relationinstance_ != None):
            self._relationinstance_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._relationinstance_ = node

    def __str__(self):
        return '' + self.toString(self._relationinstance_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._relationinstance_ == child):
            self._relationinstance_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._relationinstance_ == oldChild):
            self.setRelationinstance(newChild)
            return

class AAxiomOntologyElement(Node):
    def __init__ (self, _axiom_=None):
        super(AAxiomOntologyElement, self).__init__()
        self._axiom_ = None
        if (_axiom_ != None):
            self.setAxiom(_axiom_)

    def clone(self):
        return AAxiomOntologyElement(self.cloneNode(self._axiom_))

    def apply(self, analysis):
        analysis.caseAAxiomOntologyElement(self)

    def getAxiom (self):
        return self._axiom_

    def setAxiom(self, node):
        if(self._axiom_ != None):
            self._axiom_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._axiom_ = node

    def __str__(self):
        return '' + self.toString(self._axiom_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._axiom_ == child):
            self._axiom_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._axiom_ == oldChild):
            self.setAxiom(newChild)
            return

class AConcept(Node):
    def __init__ (self, _t_concept_=None,_id_=None,_superconcept_=None,_nfp_=None,_attribute_=None):
        super(AConcept, self).__init__()
        self._t_concept_ = None
        self._id_ = None
        self._superconcept_ = None
        self._nfp_ = None
        self._attribute_ = list()
        if (_t_concept_ != None):
            self.setTConcept(_t_concept_)
        if (_id_ != None):
            self.setId(_id_)
        if (_superconcept_ != None):
            self.setSuperconcept(_superconcept_)
        if (_nfp_ != None):
            self.setNfp(_nfp_)
        if (_attribute_ != None):
            self._attribute_.extend(_attribute_)

    def clone(self):
        return AConcept(self.cloneNode(self._t_concept_),self.cloneNode(self._id_),self.cloneNode(self._superconcept_),self.cloneNode(self._nfp_),self.cloneList(self._attribute_))

    def apply(self, analysis):
        analysis.caseAConcept(self)

    def getTConcept (self):
        return self._t_concept_

    def setTConcept(self, node):
        if(self._t_concept_ != None):
            self._t_concept_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_concept_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getSuperconcept (self):
        return self._superconcept_

    def setSuperconcept(self, node):
        if(self._superconcept_ != None):
            self._superconcept_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._superconcept_ = node
    def getNfp (self):
        return self._nfp_

    def setNfp(self, node):
        if(self._nfp_ != None):
            self._nfp_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._nfp_ = node
    def getAttribute(self):
        return self._attribute_

    def setAttribute(self, lst):
        del self._attribute_[0:len(self._attribute_)]
        self._attribute_.extend(lst)
        

    def __str__(self):
        return '' + self.toString(self._t_concept_)+ self.toString(self._id_)+ self.toString(self._superconcept_)+ self.toString(self._nfp_)+ self.toString(self._attribute_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_concept_ == child):
            self._t_concept_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return
        if (self._superconcept_ == child):
            self._superconcept_ = None
            return
        if (self._nfp_ == child):
            self._nfp_ = None
            return
        if child in self._attribute_:
            self._attribute_.remove(child)
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_concept_ == oldChild):
            self.setTConcept(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        if (self._superconcept_ == oldChild):
            self.setSuperconcept(newChild)
            return
        if (self._nfp_ == oldChild):
            self.setNfp(newChild)
            return
        for i in range(self._attribute_):
            if (self._attribute_[i] == oldChild):
                if (newChild != None):
                    self._attribute_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._attribute_[i]
                oldChild.setparent(None)
                return

class ASuperconcept(Node):
    def __init__ (self, _t_subconcept_=None,_idlist_=None):
        super(ASuperconcept, self).__init__()
        self._t_subconcept_ = None
        self._idlist_ = None
        if (_t_subconcept_ != None):
            self.setTSubconcept(_t_subconcept_)
        if (_idlist_ != None):
            self.setIdlist(_idlist_)

    def clone(self):
        return ASuperconcept(self.cloneNode(self._t_subconcept_),self.cloneNode(self._idlist_))

    def apply(self, analysis):
        analysis.caseASuperconcept(self)

    def getTSubconcept (self):
        return self._t_subconcept_

    def setTSubconcept(self, node):
        if(self._t_subconcept_ != None):
            self._t_subconcept_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_subconcept_ = node
    def getIdlist (self):
        return self._idlist_

    def setIdlist(self, node):
        if(self._idlist_ != None):
            self._idlist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._idlist_ = node

    def __str__(self):
        return '' + self.toString(self._t_subconcept_)+ self.toString(self._idlist_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_subconcept_ == child):
            self._t_subconcept_ = None
            return
        if (self._idlist_ == child):
            self._idlist_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_subconcept_ == oldChild):
            self.setTSubconcept(newChild)
            return
        if (self._idlist_ == oldChild):
            self.setIdlist(newChild)
            return

class AOpenWorldAttType(Node):
    def __init__ (self, _t_oftype_=None):
        super(AOpenWorldAttType, self).__init__()
        self._t_oftype_ = None
        if (_t_oftype_ != None):
            self.setTOftype(_t_oftype_)

    def clone(self):
        return AOpenWorldAttType(self.cloneNode(self._t_oftype_))

    def apply(self, analysis):
        analysis.caseAOpenWorldAttType(self)

    def getTOftype (self):
        return self._t_oftype_

    def setTOftype(self, node):
        if(self._t_oftype_ != None):
            self._t_oftype_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_oftype_ = node

    def __str__(self):
        return '' + self.toString(self._t_oftype_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_oftype_ == child):
            self._t_oftype_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_oftype_ == oldChild):
            self.setTOftype(newChild)
            return

class AClosedWorldAttType(Node):
    def __init__ (self, _t_impliestype_=None):
        super(AClosedWorldAttType, self).__init__()
        self._t_impliestype_ = None
        if (_t_impliestype_ != None):
            self.setTImpliestype(_t_impliestype_)

    def clone(self):
        return AClosedWorldAttType(self.cloneNode(self._t_impliestype_))

    def apply(self, analysis):
        analysis.caseAClosedWorldAttType(self)

    def getTImpliestype (self):
        return self._t_impliestype_

    def setTImpliestype(self, node):
        if(self._t_impliestype_ != None):
            self._t_impliestype_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_impliestype_ = node

    def __str__(self):
        return '' + self.toString(self._t_impliestype_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_impliestype_ == child):
            self._t_impliestype_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_impliestype_ == oldChild):
            self.setTImpliestype(newChild)
            return

class AAttribute(Node):
    def __init__ (self, _id_=None,_attributefeature_=None,_att_type_=None,_cardinality_=None,_idlist_=None,_nfp_=None):
        super(AAttribute, self).__init__()
        self._id_ = None
        self._attributefeature_ = list()
        self._att_type_ = None
        self._cardinality_ = None
        self._idlist_ = None
        self._nfp_ = None
        if (_id_ != None):
            self.setId(_id_)
        if (_attributefeature_ != None):
            self._attributefeature_.extend(_attributefeature_)
        if (_att_type_ != None):
            self.setAttType(_att_type_)
        if (_cardinality_ != None):
            self.setCardinality(_cardinality_)
        if (_idlist_ != None):
            self.setIdlist(_idlist_)
        if (_nfp_ != None):
            self.setNfp(_nfp_)

    def clone(self):
        return AAttribute(self.cloneNode(self._id_),self.cloneList(self._attributefeature_),self.cloneNode(self._att_type_),self.cloneNode(self._cardinality_),self.cloneNode(self._idlist_),self.cloneNode(self._nfp_))

    def apply(self, analysis):
        return analysis.caseAAttribute(self)

    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getAttributefeature(self):
        return self._attributefeature_

    def setAttributefeature(self, lst):
        del self._attributefeature_[0:len(self._attributefeature_)]
        self._attributefeature_.extend(lst)
        
    def getAttType (self):
        return self._att_type_

    def setAttType(self, node):
        if(self._att_type_ != None):
            self._att_type_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._att_type_ = node
    def getCardinality (self):
        return self._cardinality_

    def setCardinality(self, node):
        if(self._cardinality_ != None):
            self._cardinality_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._cardinality_ = node
    def getIdlist (self):
        return self._idlist_

    def setIdlist(self, node):
        if(self._idlist_ != None):
            self._idlist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._idlist_ = node
    def getNfp (self):
        return self._nfp_

    def setNfp(self, node):
        if(self._nfp_ != None):
            self._nfp_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._nfp_ = node

    def __str__(self):
        return '' + self.toString(self._id_)+ self.toString(self._attributefeature_)+ self.toString(self._att_type_)+ self.toString(self._cardinality_)+ self.toString(self._idlist_)+ self.toString(self._nfp_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._id_ == child):
            self._id_ = None
            return
        if child in self._attributefeature_:
            self._attributefeature_.remove(child)
            return
        if (self._att_type_ == child):
            self._att_type_ = None
            return
        if (self._cardinality_ == child):
            self._cardinality_ = None
            return
        if (self._idlist_ == child):
            self._idlist_ = None
            return
        if (self._nfp_ == child):
            self._nfp_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        for i in range(self._attributefeature_):
            if (self._attributefeature_[i] == oldChild):
                if (newChild != None):
                    self._attributefeature_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._attributefeature_[i]
                oldChild.setparent(None)
                return
        if (self._att_type_ == oldChild):
            self.setAttType(newChild)
            return
        if (self._cardinality_ == oldChild):
            self.setCardinality(newChild)
            return
        if (self._idlist_ == oldChild):
            self.setIdlist(newChild)
            return
        if (self._nfp_ == oldChild):
            self.setNfp(newChild)
            return

class ACardinality(Node):
    def __init__ (self, _lpar_=None,_pos_integer_=None,_cardinality_number_=None,_rpar_=None):
        super(ACardinality, self).__init__()
        self._lpar_ = None
        self._pos_integer_ = None
        self._cardinality_number_ = None
        self._rpar_ = None
        if (_lpar_ != None):
            self.setLpar(_lpar_)
        if (_pos_integer_ != None):
            self.setPosInteger(_pos_integer_)
        if (_cardinality_number_ != None):
            self.setCardinalityNumber(_cardinality_number_)
        if (_rpar_ != None):
            self.setRpar(_rpar_)

    def clone(self):
        return ACardinality(self.cloneNode(self._lpar_),self.cloneNode(self._pos_integer_),self.cloneNode(self._cardinality_number_),self.cloneNode(self._rpar_))

    def apply(self, analysis):
        analysis.caseACardinality(self)

    def getLpar (self):
        return self._lpar_

    def setLpar(self, node):
        if(self._lpar_ != None):
            self._lpar_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lpar_ = node
    def getPosInteger (self):
        return self._pos_integer_

    def setPosInteger(self, node):
        if(self._pos_integer_ != None):
            self._pos_integer_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._pos_integer_ = node
    def getCardinalityNumber (self):
        return self._cardinality_number_

    def setCardinalityNumber(self, node):
        if(self._cardinality_number_ != None):
            self._cardinality_number_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._cardinality_number_ = node
    def getRpar (self):
        return self._rpar_

    def setRpar(self, node):
        if(self._rpar_ != None):
            self._rpar_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._rpar_ = node

    def __str__(self):
        return '' + self.toString(self._lpar_)+ self.toString(self._pos_integer_)+ self.toString(self._cardinality_number_)+ self.toString(self._rpar_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._lpar_ == child):
            self._lpar_ = None
            return
        if (self._pos_integer_ == child):
            self._pos_integer_ = None
            return
        if (self._cardinality_number_ == child):
            self._cardinality_number_ = None
            return
        if (self._rpar_ == child):
            self._rpar_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._lpar_ == oldChild):
            self.setLpar(newChild)
            return
        if (self._pos_integer_ == oldChild):
            self.setPosInteger(newChild)
            return
        if (self._cardinality_number_ == oldChild):
            self.setCardinalityNumber(newChild)
            return
        if (self._rpar_ == oldChild):
            self.setRpar(newChild)
            return

class AFiniteCardinalityCardinalityNumber(Node):
    def __init__ (self, _pos_integer_=None):
        super(AFiniteCardinalityCardinalityNumber, self).__init__()
        self._pos_integer_ = None
        if (_pos_integer_ != None):
            self.setPosInteger(_pos_integer_)

    def clone(self):
        return AFiniteCardinalityCardinalityNumber(self.cloneNode(self._pos_integer_))

    def apply(self, analysis):
        analysis.caseAFiniteCardinalityCardinalityNumber(self)

    def getPosInteger (self):
        return self._pos_integer_

    def setPosInteger(self, node):
        if(self._pos_integer_ != None):
            self._pos_integer_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._pos_integer_ = node

    def __str__(self):
        return '' + self.toString(self._pos_integer_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._pos_integer_ == child):
            self._pos_integer_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._pos_integer_ == oldChild):
            self.setPosInteger(newChild)
            return

class AInfiniteCardinalityCardinalityNumber(Node):
    def __init__ (self, _star_=None):
        super(AInfiniteCardinalityCardinalityNumber, self).__init__()
        self._star_ = None
        if (_star_ != None):
            self.setStar(_star_)

    def clone(self):
        return AInfiniteCardinalityCardinalityNumber(self.cloneNode(self._star_))

    def apply(self, analysis):
        analysis.caseAInfiniteCardinalityCardinalityNumber(self)

    def getStar (self):
        return self._star_

    def setStar(self, node):
        if(self._star_ != None):
            self._star_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._star_ = node

    def __str__(self):
        return '' + self.toString(self._star_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._star_ == child):
            self._star_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._star_ == oldChild):
            self.setStar(newChild)
            return

class ATransitiveAttributefeature(Node):
    def __init__ (self, _t_transitive_=None):
        super(ATransitiveAttributefeature, self).__init__()
        self._t_transitive_ = None
        if (_t_transitive_ != None):
            self.setTTransitive(_t_transitive_)

    def clone(self):
        return ATransitiveAttributefeature(self.cloneNode(self._t_transitive_))

    def apply(self, analysis):
        analysis.caseATransitiveAttributefeature(self)

    def getTTransitive (self):
        return self._t_transitive_

    def setTTransitive(self, node):
        if(self._t_transitive_ != None):
            self._t_transitive_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_transitive_ = node

    def __str__(self):
        return '' + self.toString(self._t_transitive_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_transitive_ == child):
            self._t_transitive_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_transitive_ == oldChild):
            self.setTTransitive(newChild)
            return

class ASymmetricAttributefeature(Node):
    def __init__ (self, _t_symmetric_=None):
        super(ASymmetricAttributefeature, self).__init__()
        self._t_symmetric_ = None
        if (_t_symmetric_ != None):
            self.setTSymmetric(_t_symmetric_)

    def clone(self):
        return ASymmetricAttributefeature(self.cloneNode(self._t_symmetric_))

    def apply(self, analysis):
        analysis.caseASymmetricAttributefeature(self)

    def getTSymmetric (self):
        return self._t_symmetric_

    def setTSymmetric(self, node):
        if(self._t_symmetric_ != None):
            self._t_symmetric_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_symmetric_ = node

    def __str__(self):
        return '' + self.toString(self._t_symmetric_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_symmetric_ == child):
            self._t_symmetric_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_symmetric_ == oldChild):
            self.setTSymmetric(newChild)
            return

class AInverseAttributefeature(Node):
    def __init__ (self, _t_inverseof_=None,_lpar_=None,_id_=None,_rpar_=None):
        super(AInverseAttributefeature, self).__init__()
        self._t_inverseof_ = None
        self._lpar_ = None
        self._id_ = None
        self._rpar_ = None
        if (_t_inverseof_ != None):
            self.setTInverseof(_t_inverseof_)
        if (_lpar_ != None):
            self.setLpar(_lpar_)
        if (_id_ != None):
            self.setId(_id_)
        if (_rpar_ != None):
            self.setRpar(_rpar_)

    def clone(self):
        return AInverseAttributefeature(self.cloneNode(self._t_inverseof_),self.cloneNode(self._lpar_),self.cloneNode(self._id_),self.cloneNode(self._rpar_))

    def apply(self, analysis):
        analysis.caseAInverseAttributefeature(self)

    def getTInverseof (self):
        return self._t_inverseof_

    def setTInverseof(self, node):
        if(self._t_inverseof_ != None):
            self._t_inverseof_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_inverseof_ = node
    def getLpar (self):
        return self._lpar_

    def setLpar(self, node):
        if(self._lpar_ != None):
            self._lpar_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lpar_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getRpar (self):
        return self._rpar_

    def setRpar(self, node):
        if(self._rpar_ != None):
            self._rpar_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._rpar_ = node

    def __str__(self):
        return '' + self.toString(self._t_inverseof_)+ self.toString(self._lpar_)+ self.toString(self._id_)+ self.toString(self._rpar_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_inverseof_ == child):
            self._t_inverseof_ = None
            return
        if (self._lpar_ == child):
            self._lpar_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return
        if (self._rpar_ == child):
            self._rpar_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_inverseof_ == oldChild):
            self.setTInverseof(newChild)
            return
        if (self._lpar_ == oldChild):
            self.setLpar(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        if (self._rpar_ == oldChild):
            self.setRpar(newChild)
            return

class AReflexiveAttributefeature(Node):
    def __init__ (self, _t_reflexive_=None):
        super(AReflexiveAttributefeature, self).__init__()
        self._t_reflexive_ = None
        if (_t_reflexive_ != None):
            self.setTReflexive(_t_reflexive_)

    def clone(self):
        return AReflexiveAttributefeature(self.cloneNode(self._t_reflexive_))

    def apply(self, analysis):
        analysis.caseAReflexiveAttributefeature(self)

    def getTReflexive (self):
        return self._t_reflexive_

    def setTReflexive(self, node):
        if(self._t_reflexive_ != None):
            self._t_reflexive_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_reflexive_ = node

    def __str__(self):
        return '' + self.toString(self._t_reflexive_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_reflexive_ == child):
            self._t_reflexive_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_reflexive_ == oldChild):
            self.setTReflexive(newChild)
            return

class AInstance(Node):
    def __init__ (self, _t_instance_=None,_id_=None,_memberof_=None,_nfp_=None,_attributevalue_=None):
        super(AInstance, self).__init__()
        self._t_instance_ = None
        self._id_ = None
        self._memberof_ = None
        self._nfp_ = None
        self._attributevalue_ = list()
        if (_t_instance_ != None):
            self.setTInstance(_t_instance_)
        if (_id_ != None):
            self.setId(_id_)
        if (_memberof_ != None):
            self.setMemberof(_memberof_)
        if (_nfp_ != None):
            self.setNfp(_nfp_)
        if (_attributevalue_ != None):
            self._attributevalue_.extend(_attributevalue_)

    def clone(self):
        return AInstance(self.cloneNode(self._t_instance_),self.cloneNode(self._id_),self.cloneNode(self._memberof_),self.cloneNode(self._nfp_),self.cloneList(self._attributevalue_))

    def apply(self, analysis):
        analysis.caseAInstance(self)

    def getTInstance (self):
        return self._t_instance_

    def setTInstance(self, node):
        if(self._t_instance_ != None):
            self._t_instance_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_instance_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getMemberof (self):
        return self._memberof_

    def setMemberof(self, node):
        if(self._memberof_ != None):
            self._memberof_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._memberof_ = node
    def getNfp (self):
        return self._nfp_

    def setNfp(self, node):
        if(self._nfp_ != None):
            self._nfp_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._nfp_ = node
    def getAttributevalue(self):
        return self._attributevalue_

    def setAttributevalue(self, lst):
        del self._attributevalue_[0:len(self._attributevalue_)]
        self._attributevalue_.extend(lst)
        

    def __str__(self):
        return '' + self.toString(self._t_instance_)+ self.toString(self._id_)+ self.toString(self._memberof_)+ self.toString(self._nfp_)+ self.toString(self._attributevalue_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_instance_ == child):
            self._t_instance_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return
        if (self._memberof_ == child):
            self._memberof_ = None
            return
        if (self._nfp_ == child):
            self._nfp_ = None
            return
        if child in self._attributevalue_:
            self._attributevalue_.remove(child)
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_instance_ == oldChild):
            self.setTInstance(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        if (self._memberof_ == oldChild):
            self.setMemberof(newChild)
            return
        if (self._nfp_ == oldChild):
            self.setNfp(newChild)
            return
        for i in range(self._attributevalue_):
            if (self._attributevalue_[i] == oldChild):
                if (newChild != None):
                    self._attributevalue_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._attributevalue_[i]
                oldChild.setparent(None)
                return

class AMemberof(Node):
    def __init__ (self, _t_memberof_=None,_idlist_=None):
        super(AMemberof, self).__init__()
        self._t_memberof_ = None
        self._idlist_ = None
        if (_t_memberof_ != None):
            self.setTMemberof(_t_memberof_)
        if (_idlist_ != None):
            self.setIdlist(_idlist_)

    def clone(self):
        return AMemberof(self.cloneNode(self._t_memberof_),self.cloneNode(self._idlist_))

    def apply(self, analysis):
        return analysis.caseAMemberof(self)

    def getTMemberof (self):
        return self._t_memberof_

    def setTMemberof(self, node):
        if(self._t_memberof_ != None):
            self._t_memberof_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_memberof_ = node
    def getIdlist (self):
        return self._idlist_

    def setIdlist(self, node):
        if(self._idlist_ != None):
            self._idlist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._idlist_ = node

    def __str__(self):
        return '' + self.toString(self._t_memberof_)+ self.toString(self._idlist_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_memberof_ == child):
            self._t_memberof_ = None
            return
        if (self._idlist_ == child):
            self._idlist_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_memberof_ == oldChild):
            self.setTMemberof(newChild)
            return
        if (self._idlist_ == oldChild):
            self.setIdlist(newChild)
            return

class AAttributevalue(Node):
    def __init__ (self, _id_=None,_t_hasvalue_=None,_valuelist_=None):
        super(AAttributevalue, self).__init__()
        self._id_ = None
        self._t_hasvalue_ = None
        self._valuelist_ = None
        if (_id_ != None):
            self.setId(_id_)
        if (_t_hasvalue_ != None):
            self.setTHasvalue(_t_hasvalue_)
        if (_valuelist_ != None):
            self.setValuelist(_valuelist_)

    def clone(self):
        return AAttributevalue(self.cloneNode(self._id_),self.cloneNode(self._t_hasvalue_),self.cloneNode(self._valuelist_))

    def apply(self, analysis):
        return analysis.caseAAttributevalue(self)

    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getTHasvalue (self):
        return self._t_hasvalue_

    def setTHasvalue(self, node):
        if(self._t_hasvalue_ != None):
            self._t_hasvalue_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_hasvalue_ = node
    def getValuelist (self):
        return self._valuelist_

    def setValuelist(self, node):
        if(self._valuelist_ != None):
            self._valuelist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._valuelist_ = node

    def __str__(self):
        return '' + self.toString(self._id_)+ self.toString(self._t_hasvalue_)+ self.toString(self._valuelist_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._id_ == child):
            self._id_ = None
            return
        if (self._t_hasvalue_ == child):
            self._t_hasvalue_ = None
            return
        if (self._valuelist_ == child):
            self._valuelist_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        if (self._t_hasvalue_ == oldChild):
            self.setTHasvalue(newChild)
            return
        if (self._valuelist_ == oldChild):
            self.setValuelist(newChild)
            return

class ARelation(Node):
    def __init__ (self, _t_relation_=None,_id_=None,_arity_=None,_paramtyping_=None,_superrelation_=None,_nfp_=None):
        super(ARelation, self).__init__()
        self._t_relation_ = None
        self._id_ = None
        self._arity_ = None
        self._paramtyping_ = None
        self._superrelation_ = None
        self._nfp_ = None
        if (_t_relation_ != None):
            self.setTRelation(_t_relation_)
        if (_id_ != None):
            self.setId(_id_)
        if (_arity_ != None):
            self.setArity(_arity_)
        if (_paramtyping_ != None):
            self.setParamtyping(_paramtyping_)
        if (_superrelation_ != None):
            self.setSuperrelation(_superrelation_)
        if (_nfp_ != None):
            self.setNfp(_nfp_)

    def clone(self):
        return ARelation(self.cloneNode(self._t_relation_),self.cloneNode(self._id_),self.cloneNode(self._arity_),self.cloneNode(self._paramtyping_),self.cloneNode(self._superrelation_),self.cloneNode(self._nfp_))

    def apply(self, analysis):
        return analysis.caseARelation(self)

    def getTRelation (self):
        return self._t_relation_

    def setTRelation(self, node):
        if(self._t_relation_ != None):
            self._t_relation_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_relation_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getArity (self):
        return self._arity_

    def setArity(self, node):
        if(self._arity_ != None):
            self._arity_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._arity_ = node
    def getParamtyping (self):
        return self._paramtyping_

    def setParamtyping(self, node):
        if(self._paramtyping_ != None):
            self._paramtyping_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._paramtyping_ = node
    def getSuperrelation (self):
        return self._superrelation_

    def setSuperrelation(self, node):
        if(self._superrelation_ != None):
            self._superrelation_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._superrelation_ = node
    def getNfp (self):
        return self._nfp_

    def setNfp(self, node):
        if(self._nfp_ != None):
            self._nfp_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._nfp_ = node

    def __str__(self):
        return '' + self.toString(self._t_relation_)+ self.toString(self._id_)+ self.toString(self._arity_)+ self.toString(self._paramtyping_)+ self.toString(self._superrelation_)+ self.toString(self._nfp_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_relation_ == child):
            self._t_relation_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return
        if (self._arity_ == child):
            self._arity_ = None
            return
        if (self._paramtyping_ == child):
            self._paramtyping_ = None
            return
        if (self._superrelation_ == child):
            self._superrelation_ = None
            return
        if (self._nfp_ == child):
            self._nfp_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_relation_ == oldChild):
            self.setTRelation(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        if (self._arity_ == oldChild):
            self.setArity(newChild)
            return
        if (self._paramtyping_ == oldChild):
            self.setParamtyping(newChild)
            return
        if (self._superrelation_ == oldChild):
            self.setSuperrelation(newChild)
            return
        if (self._nfp_ == oldChild):
            self.setNfp(newChild)
            return

class AParamtype(Node):
    def __init__ (self, _att_type_=None,_idlist_=None):
        super(AParamtype, self).__init__()
        self._att_type_ = None
        self._idlist_ = None
        if (_att_type_ != None):
            self.setAttType(_att_type_)
        if (_idlist_ != None):
            self.setIdlist(_idlist_)

    def clone(self):
        return AParamtype(self.cloneNode(self._att_type_),self.cloneNode(self._idlist_))

    def apply(self, analysis):
        return analysis.caseAParamtype(self)

    def getAttType (self):
        return self._att_type_

    def setAttType(self, node):
        if(self._att_type_ != None):
            self._att_type_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._att_type_ = node
    def getIdlist (self):
        return self._idlist_

    def setIdlist(self, node):
        if(self._idlist_ != None):
            self._idlist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._idlist_ = node

    def __str__(self):
        return '' + self.toString(self._att_type_)+ self.toString(self._idlist_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._att_type_ == child):
            self._att_type_ = None
            return
        if (self._idlist_ == child):
            self._idlist_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._att_type_ == oldChild):
            self.setAttType(newChild)
            return
        if (self._idlist_ == oldChild):
            self.setIdlist(newChild)
            return

class AParamtyping(Node):
    def __init__ (self, _lpar_=None,_paramtype_=None,_moreparamtype_=None,_rpar_=None):
        super(AParamtyping, self).__init__()
        self._lpar_ = None
        self._paramtype_ = None
        self._moreparamtype_ = list()
        self._rpar_ = None
        if (_lpar_ != None):
            self.setLpar(_lpar_)
        if (_paramtype_ != None):
            self.setParamtype(_paramtype_)
        if (_moreparamtype_ != None):
            self._moreparamtype_.extend(_moreparamtype_)
        if (_rpar_ != None):
            self.setRpar(_rpar_)

    def clone(self):
        return AParamtyping(self.cloneNode(self._lpar_),self.cloneNode(self._paramtype_),self.cloneList(self._moreparamtype_),self.cloneNode(self._rpar_))

    def apply(self, analysis):
        return analysis.caseAParamtyping(self)

    def getLpar (self):
        return self._lpar_

    def setLpar(self, node):
        if(self._lpar_ != None):
            self._lpar_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lpar_ = node
    def getParamtype (self):
        return self._paramtype_

    def setParamtype(self, node):
        if(self._paramtype_ != None):
            self._paramtype_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._paramtype_ = node
    def getMoreparamtype(self):
        return self._moreparamtype_

    def setMoreparamtype(self, lst):
        del self._moreparamtype_[0:len(self._moreparamtype_)]
        self._moreparamtype_.extend(lst)
        
    def getRpar (self):
        return self._rpar_

    def setRpar(self, node):
        if(self._rpar_ != None):
            self._rpar_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._rpar_ = node

    def __str__(self):
        return '' + self.toString(self._lpar_)+ self.toString(self._paramtype_)+ self.toString(self._moreparamtype_)+ self.toString(self._rpar_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._lpar_ == child):
            self._lpar_ = None
            return
        if (self._paramtype_ == child):
            self._paramtype_ = None
            return
        if child in self._moreparamtype_:
            self._moreparamtype_.remove(child)
            return
        if (self._rpar_ == child):
            self._rpar_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._lpar_ == oldChild):
            self.setLpar(newChild)
            return
        if (self._paramtype_ == oldChild):
            self.setParamtype(newChild)
            return
        for i in range(self._moreparamtype_):
            if (self._moreparamtype_[i] == oldChild):
                if (newChild != None):
                    self._moreparamtype_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._moreparamtype_[i]
                oldChild.setparent(None)
                return
        if (self._rpar_ == oldChild):
            self.setRpar(newChild)
            return

class AMoreparamtype(Node):
    def __init__ (self, _comma_=None,_paramtype_=None):
        super(AMoreparamtype, self).__init__()
        self._comma_ = None
        self._paramtype_ = None
        if (_comma_ != None):
            self.setComma(_comma_)
        if (_paramtype_ != None):
            self.setParamtype(_paramtype_)

    def clone(self):
        return AMoreparamtype(self.cloneNode(self._comma_),self.cloneNode(self._paramtype_))

    def apply(self, analysis):
        return analysis.caseAMoreparamtype(self)

    def getComma (self):
        return self._comma_

    def setComma(self, node):
        if(self._comma_ != None):
            self._comma_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._comma_ = node
    def getParamtype (self):
        return self._paramtype_

    def setParamtype(self, node):
        if(self._paramtype_ != None):
            self._paramtype_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._paramtype_ = node

    def __str__(self):
        return '' + self.toString(self._comma_)+ self.toString(self._paramtype_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._comma_ == child):
            self._comma_ = None
            return
        if (self._paramtype_ == child):
            self._paramtype_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._comma_ == oldChild):
            self.setComma(newChild)
            return
        if (self._paramtype_ == oldChild):
            self.setParamtype(newChild)
            return

class ASuperrelation(Node):
    def __init__ (self, _t_subrelation_=None,_idlist_=None):
        super(ASuperrelation, self).__init__()
        self._t_subrelation_ = None
        self._idlist_ = None
        if (_t_subrelation_ != None):
            self.setTSubrelation(_t_subrelation_)
        if (_idlist_ != None):
            self.setIdlist(_idlist_)

    def clone(self):
        return ASuperrelation(self.cloneNode(self._t_subrelation_),self.cloneNode(self._idlist_))

    def apply(self, analysis):
        analysis.caseASuperrelation(self)

    def getTSubrelation (self):
        return self._t_subrelation_

    def setTSubrelation(self, node):
        if(self._t_subrelation_ != None):
            self._t_subrelation_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_subrelation_ = node
    def getIdlist (self):
        return self._idlist_

    def setIdlist(self, node):
        if(self._idlist_ != None):
            self._idlist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._idlist_ = node

    def __str__(self):
        return '' + self.toString(self._t_subrelation_)+ self.toString(self._idlist_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_subrelation_ == child):
            self._t_subrelation_ = None
            return
        if (self._idlist_ == child):
            self._idlist_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_subrelation_ == oldChild):
            self.setTSubrelation(newChild)
            return
        if (self._idlist_ == oldChild):
            self.setIdlist(newChild)
            return

class AArity(Node):
    def __init__ (self, _div_op_=None,_pos_integer_=None):
        super(AArity, self).__init__()
        self._div_op_ = None
        self._pos_integer_ = None
        if (_div_op_ != None):
            self.setDivOp(_div_op_)
        if (_pos_integer_ != None):
            self.setPosInteger(_pos_integer_)

    def clone(self):
        return AArity(self.cloneNode(self._div_op_),self.cloneNode(self._pos_integer_))

    def apply(self, analysis):
        analysis.caseAArity(self)

    def getDivOp (self):
        return self._div_op_

    def setDivOp(self, node):
        if(self._div_op_ != None):
            self._div_op_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._div_op_ = node
    def getPosInteger (self):
        return self._pos_integer_

    def setPosInteger(self, node):
        if(self._pos_integer_ != None):
            self._pos_integer_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._pos_integer_ = node

    def __str__(self):
        return '' + self.toString(self._div_op_)+ self.toString(self._pos_integer_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._div_op_ == child):
            self._div_op_ = None
            return
        if (self._pos_integer_ == child):
            self._pos_integer_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._div_op_ == oldChild):
            self.setDivOp(newChild)
            return
        if (self._pos_integer_ == oldChild):
            self.setPosInteger(newChild)
            return

class ARelationinstance(Node):
    def __init__ (self, _t_relation_instance_=None,_name_=None,_relation_=None,_lpar_=None,_value_=None,_morevalues_=None,_rpar_=None,_nfp_=None):
        super(ARelationinstance, self).__init__()
        self._t_relation_instance_ = None
        self._name_ = None
        self._relation_ = None
        self._lpar_ = None
        self._value_ = None
        self._morevalues_ = list()
        self._rpar_ = None
        self._nfp_ = None
        if (_t_relation_instance_ != None):
            self.setTRelationInstance(_t_relation_instance_)
        if (_name_ != None):
            self.setName(_name_)
        if (_relation_ != None):
            self.setRelation(_relation_)
        if (_lpar_ != None):
            self.setLpar(_lpar_)
        if (_value_ != None):
            self.setValue(_value_)
        if (_morevalues_ != None):
            self._morevalues_.extend(_morevalues_)
        if (_rpar_ != None):
            self.setRpar(_rpar_)
        if (_nfp_ != None):
            self.setNfp(_nfp_)

    def clone(self):
        return ARelationinstance(self.cloneNode(self._t_relation_instance_),self.cloneNode(self._name_),self.cloneNode(self._relation_),self.cloneNode(self._lpar_),self.cloneNode(self._value_),self.cloneList(self._morevalues_),self.cloneNode(self._rpar_),self.cloneNode(self._nfp_))

    def apply(self, analysis):
        analysis.caseARelationinstance(self)

    def getTRelationInstance (self):
        return self._t_relation_instance_

    def setTRelationInstance(self, node):
        if(self._t_relation_instance_ != None):
            self._t_relation_instance_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_relation_instance_ = node
    def getName (self):
        return self._name_

    def setName(self, node):
        if(self._name_ != None):
            self._name_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._name_ = node
    def getRelation (self):
        return self._relation_

    def setRelation(self, node):
        if(self._relation_ != None):
            self._relation_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._relation_ = node
    def getLpar (self):
        return self._lpar_

    def setLpar(self, node):
        if(self._lpar_ != None):
            self._lpar_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lpar_ = node
    def getValue (self):
        return self._value_

    def setValue(self, node):
        if(self._value_ != None):
            self._value_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._value_ = node
    def getMorevalues(self):
        return self._morevalues_

    def setMorevalues(self, lst):
        del self._morevalues_[0:len(self._morevalues_)]
        self._morevalues_.extend(lst)
        
    def getRpar (self):
        return self._rpar_

    def setRpar(self, node):
        if(self._rpar_ != None):
            self._rpar_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._rpar_ = node
    def getNfp (self):
        return self._nfp_

    def setNfp(self, node):
        if(self._nfp_ != None):
            self._nfp_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._nfp_ = node

    def __str__(self):
        return '' + self.toString(self._t_relation_instance_)+ self.toString(self._name_)+ self.toString(self._relation_)+ self.toString(self._lpar_)+ self.toString(self._value_)+ self.toString(self._morevalues_)+ self.toString(self._rpar_)+ self.toString(self._nfp_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_relation_instance_ == child):
            self._t_relation_instance_ = None
            return
        if (self._name_ == child):
            self._name_ = None
            return
        if (self._relation_ == child):
            self._relation_ = None
            return
        if (self._lpar_ == child):
            self._lpar_ = None
            return
        if (self._value_ == child):
            self._value_ = None
            return
        if child in self._morevalues_:
            self._morevalues_.remove(child)
            return
        if (self._rpar_ == child):
            self._rpar_ = None
            return
        if (self._nfp_ == child):
            self._nfp_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_relation_instance_ == oldChild):
            self.setTRelationInstance(newChild)
            return
        if (self._name_ == oldChild):
            self.setName(newChild)
            return
        if (self._relation_ == oldChild):
            self.setRelation(newChild)
            return
        if (self._lpar_ == oldChild):
            self.setLpar(newChild)
            return
        if (self._value_ == oldChild):
            self.setValue(newChild)
            return
        for i in range(self._morevalues_):
            if (self._morevalues_[i] == oldChild):
                if (newChild != None):
                    self._morevalues_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._morevalues_[i]
                oldChild.setparent(None)
                return
        if (self._rpar_ == oldChild):
            self.setRpar(newChild)
            return
        if (self._nfp_ == oldChild):
            self.setNfp(newChild)
            return

class AAxiom(Node):
    def __init__ (self, _t_axiom_=None,_axiomdefinition_=None):
        super(AAxiom, self).__init__()
        self._t_axiom_ = None
        self._axiomdefinition_ = None
        if (_t_axiom_ != None):
            self.setTAxiom(_t_axiom_)
        if (_axiomdefinition_ != None):
            self.setAxiomdefinition(_axiomdefinition_)

    def clone(self):
        return AAxiom(self.cloneNode(self._t_axiom_),self.cloneNode(self._axiomdefinition_))

    def apply(self, analysis):
        return analysis.caseAAxiom(self)

    def getTAxiom (self):
        return self._t_axiom_

    def setTAxiom(self, node):
        if(self._t_axiom_ != None):
            self._t_axiom_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_axiom_ = node
    def getAxiomdefinition (self):
        return self._axiomdefinition_

    def setAxiomdefinition(self, node):
        if(self._axiomdefinition_ != None):
            self._axiomdefinition_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._axiomdefinition_ = node

    def __str__(self):
        return '' + self.toString(self._t_axiom_)+ self.toString(self._axiomdefinition_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_axiom_ == child):
            self._t_axiom_ = None
            return
        if (self._axiomdefinition_ == child):
            self._axiomdefinition_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_axiom_ == oldChild):
            self.setTAxiom(newChild)
            return
        if (self._axiomdefinition_ == oldChild):
            self.setAxiomdefinition(newChild)
            return

class AUseAxiomAxiomdefinition(Node):
    def __init__ (self, _id_=None):
        super(AUseAxiomAxiomdefinition, self).__init__()
        self._id_ = None
        if (_id_ != None):
            self.setId(_id_)

    def clone(self):
        return AUseAxiomAxiomdefinition(self.cloneNode(self._id_))

    def apply(self, analysis):
        analysis.caseAUseAxiomAxiomdefinition(self)

    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node

    def __str__(self):
        return '' + self.toString(self._id_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._id_ == child):
            self._id_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._id_ == oldChild):
            self.setId(newChild)
            return

class ANfpAxiomAxiomdefinition(Node):
    def __init__ (self, _id_=None,_nfp_=None):
        super(ANfpAxiomAxiomdefinition, self).__init__()
        self._id_ = None
        self._nfp_ = None
        if (_id_ != None):
            self.setId(_id_)
        if (_nfp_ != None):
            self.setNfp(_nfp_)

    def clone(self):
        return ANfpAxiomAxiomdefinition(self.cloneNode(self._id_),self.cloneNode(self._nfp_))

    def apply(self, analysis):
        analysis.caseANfpAxiomAxiomdefinition(self)

    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getNfp (self):
        return self._nfp_

    def setNfp(self, node):
        if(self._nfp_ != None):
            self._nfp_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._nfp_ = node

    def __str__(self):
        return '' + self.toString(self._id_)+ self.toString(self._nfp_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._id_ == child):
            self._id_ = None
            return
        if (self._nfp_ == child):
            self._nfp_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        if (self._nfp_ == oldChild):
            self.setNfp(newChild)
            return

class ADefinedAxiomAxiomdefinition(Node):
    def __init__ (self, _id_=None,_nfp_=None,_log_definition_=None):
        super(ADefinedAxiomAxiomdefinition, self).__init__()
        self._id_ = None
        self._nfp_ = None
        self._log_definition_ = None
        if (_id_ != None):
            self.setId(_id_)
        if (_nfp_ != None):
            self.setNfp(_nfp_)
        if (_log_definition_ != None):
            self.setLogDefinition(_log_definition_)

    def clone(self):
        return ADefinedAxiomAxiomdefinition(self.cloneNode(self._id_),self.cloneNode(self._nfp_),self.cloneNode(self._log_definition_))

    def apply(self, analysis):
        return analysis.caseADefinedAxiomAxiomdefinition(self)

    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getNfp (self):
        return self._nfp_

    def setNfp(self, node):
        if(self._nfp_ != None):
            self._nfp_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._nfp_ = node
    def getLogDefinition (self):
        return self._log_definition_

    def setLogDefinition(self, node):
        if(self._log_definition_ != None):
            self._log_definition_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._log_definition_ = node

    def __str__(self):
        return '' + self.toString(self._id_)+ self.toString(self._nfp_)+ self.toString(self._log_definition_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._id_ == child):
            self._id_ = None
            return
        if (self._nfp_ == child):
            self._nfp_ = None
            return
        if (self._log_definition_ == child):
            self._log_definition_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        if (self._nfp_ == oldChild):
            self.setNfp(newChild)
            return
        if (self._log_definition_ == oldChild):
            self.setLogDefinition(newChild)
            return

class ALogDefinition(Node):
    def __init__ (self, _t_definedby_=None,_log_expr_=None):
        super(ALogDefinition, self).__init__()
        self._t_definedby_ = None
        self._log_expr_ = list()
        if (_t_definedby_ != None):
            self.setTDefinedby(_t_definedby_)
        if (_log_expr_ != None):
            self._log_expr_.extend(_log_expr_)

    def clone(self):
        return ALogDefinition(self.cloneNode(self._t_definedby_),self.cloneList(self._log_expr_))

    def apply(self, analysis):
        return analysis.caseALogDefinition(self)

    def getTDefinedby (self):
        return self._t_definedby_

    def setTDefinedby(self, node):
        if(self._t_definedby_ != None):
            self._t_definedby_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_definedby_ = node
    def getLogExpr(self):
        return self._log_expr_

    def setLogExpr(self, lst):
        del self._log_expr_[0:len(self._log_expr_)]
        self._log_expr_.extend(lst)
        

    def __str__(self):
        return '' + self.toString(self._t_definedby_)+ self.toString(self._log_expr_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_definedby_ == child):
            self._t_definedby_ = None
            return
        if child in self._log_expr_:
            self._log_expr_.remove(child)
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_definedby_ == oldChild):
            self.setTDefinedby(newChild)
            return
        for i in range(self._log_expr_):
            if (self._log_expr_[i] == oldChild):
                if (newChild != None):
                    self._log_expr_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._log_expr_[i]
                oldChild.setparent(None)
                return

class ALpRuleLogExpr(Node):
    def __init__ (self, _head_=None,_t_implied_by_lp_=None,_body_=None,_endpoint_=None):
        super(ALpRuleLogExpr, self).__init__()
        self._head_ = None
        self._t_implied_by_lp_ = None
        self._body_ = None
        self._endpoint_ = None
        if (_head_ != None):
            self.setHead(_head_)
        if (_t_implied_by_lp_ != None):
            self.setTImpliedByLp(_t_implied_by_lp_)
        if (_body_ != None):
            self.setBody(_body_)
        if (_endpoint_ != None):
            self.setEndpoint(_endpoint_)

    def clone(self):
        return ALpRuleLogExpr(self.cloneNode(self._head_),self.cloneNode(self._t_implied_by_lp_),self.cloneNode(self._body_),self.cloneNode(self._endpoint_))

    def apply(self, analysis):
        return analysis.caseALpRuleLogExpr(self)

    def getHead (self):
        return self._head_

    def setHead(self, node):
        if(self._head_ != None):
            self._head_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._head_ = node
    def getTImpliedByLp (self):
        return self._t_implied_by_lp_

    def setTImpliedByLp(self, node):
        if(self._t_implied_by_lp_ != None):
            self._t_implied_by_lp_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_implied_by_lp_ = node
    def getBody (self):
        return self._body_

    def setBody(self, node):
        if(self._body_ != None):
            self._body_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._body_ = node
    def getEndpoint (self):
        return self._endpoint_

    def setEndpoint(self, node):
        if(self._endpoint_ != None):
            self._endpoint_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._endpoint_ = node

    def __str__(self):
        return '' + self.toString(self._head_)+ self.toString(self._t_implied_by_lp_)+ self.toString(self._body_)+ self.toString(self._endpoint_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._head_ == child):
            self._head_ = None
            return
        if (self._t_implied_by_lp_ == child):
            self._t_implied_by_lp_ = None
            return
        if (self._body_ == child):
            self._body_ = None
            return
        if (self._endpoint_ == child):
            self._endpoint_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._head_ == oldChild):
            self.setHead(newChild)
            return
        if (self._t_implied_by_lp_ == oldChild):
            self.setTImpliedByLp(newChild)
            return
        if (self._body_ == oldChild):
            self.setBody(newChild)
            return
        if (self._endpoint_ == oldChild):
            self.setEndpoint(newChild)
            return

class AConstraintLogExpr(Node):
    def __init__ (self, _t_constraint_=None,_expr_=None,_endpoint_=None):
        super(AConstraintLogExpr, self).__init__()
        self._t_constraint_ = None
        self._expr_ = None
        self._endpoint_ = None
        if (_t_constraint_ != None):
            self.setTConstraint(_t_constraint_)
        if (_expr_ != None):
            self.setExpr(_expr_)
        if (_endpoint_ != None):
            self.setEndpoint(_endpoint_)

    def clone(self):
        return AConstraintLogExpr(self.cloneNode(self._t_constraint_),self.cloneNode(self._expr_),self.cloneNode(self._endpoint_))

    def apply(self, analysis):
        analysis.caseAConstraintLogExpr(self)

    def getTConstraint (self):
        return self._t_constraint_

    def setTConstraint(self, node):
        if(self._t_constraint_ != None):
            self._t_constraint_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_constraint_ = node
    def getExpr (self):
        return self._expr_

    def setExpr(self, node):
        if(self._expr_ != None):
            self._expr_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._expr_ = node
    def getEndpoint (self):
        return self._endpoint_

    def setEndpoint(self, node):
        if(self._endpoint_ != None):
            self._endpoint_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._endpoint_ = node

    def __str__(self):
        return '' + self.toString(self._t_constraint_)+ self.toString(self._expr_)+ self.toString(self._endpoint_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_constraint_ == child):
            self._t_constraint_ = None
            return
        if (self._expr_ == child):
            self._expr_ = None
            return
        if (self._endpoint_ == child):
            self._endpoint_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_constraint_ == oldChild):
            self.setTConstraint(newChild)
            return
        if (self._expr_ == oldChild):
            self.setExpr(newChild)
            return
        if (self._endpoint_ == oldChild):
            self.setEndpoint(newChild)
            return

class AOtherExpressionLogExpr(Node):
    def __init__ (self, _expr_=None,_endpoint_=None):
        super(AOtherExpressionLogExpr, self).__init__()
        self._expr_ = None
        self._endpoint_ = None
        if (_expr_ != None):
            self.setExpr(_expr_)
        if (_endpoint_ != None):
            self.setEndpoint(_endpoint_)

    def clone(self):
        return AOtherExpressionLogExpr(self.cloneNode(self._expr_),self.cloneNode(self._endpoint_))

    def apply(self, analysis):
        return analysis.caseAOtherExpressionLogExpr(self)

    def getExpr (self):
        return self._expr_

    def setExpr(self, node):
        if(self._expr_ != None):
            self._expr_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._expr_ = node
    def getEndpoint (self):
        return self._endpoint_

    def setEndpoint(self, node):
        if(self._endpoint_ != None):
            self._endpoint_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._endpoint_ = node

    def __str__(self):
        return '' + self.toString(self._expr_)+ self.toString(self._endpoint_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._expr_ == child):
            self._expr_ = None
            return
        if (self._endpoint_ == child):
            self._endpoint_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._expr_ == oldChild):
            self.setExpr(newChild)
            return
        if (self._endpoint_ == oldChild):
            self.setEndpoint(newChild)
            return

class AImplicationExpr(Node):
    def __init__ (self, _expr_=None,_imply_op_=None,_disjunction_=None):
        super(AImplicationExpr, self).__init__()
        self._expr_ = None
        self._imply_op_ = None
        self._disjunction_ = None
        if (_expr_ != None):
            self.setExpr(_expr_)
        if (_imply_op_ != None):
            self.setImplyOp(_imply_op_)
        if (_disjunction_ != None):
            self.setDisjunction(_disjunction_)

    def clone(self):
        return AImplicationExpr(self.cloneNode(self._expr_),self.cloneNode(self._imply_op_),self.cloneNode(self._disjunction_))

    def apply(self, analysis):
        return analysis.caseAImplicationExpr(self)

    def getExpr (self):
        return self._expr_

    def setExpr(self, node):
        if(self._expr_ != None):
            self._expr_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._expr_ = node
    def getImplyOp (self):
        return self._imply_op_

    def setImplyOp(self, node):
        if(self._imply_op_ != None):
            self._imply_op_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._imply_op_ = node
    def getDisjunction (self):
        return self._disjunction_

    def setDisjunction(self, node):
        if(self._disjunction_ != None):
            self._disjunction_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._disjunction_ = node

    def __str__(self):
        return '' + self.toString(self._expr_)+ self.toString(self._imply_op_)+ self.toString(self._disjunction_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._expr_ == child):
            self._expr_ = None
            return
        if (self._imply_op_ == child):
            self._imply_op_ = None
            return
        if (self._disjunction_ == child):
            self._disjunction_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._expr_ == oldChild):
            self.setExpr(newChild)
            return
        if (self._imply_op_ == oldChild):
            self.setImplyOp(newChild)
            return
        if (self._disjunction_ == oldChild):
            self.setDisjunction(newChild)
            return

class ADisjunctionExpr(Node):
    def __init__ (self, _disjunction_=None):
        super(ADisjunctionExpr, self).__init__()
        self._disjunction_ = None
        if (_disjunction_ != None):
            self.setDisjunction(_disjunction_)

    def clone(self):
        return ADisjunctionExpr(self.cloneNode(self._disjunction_))

    def apply(self, analysis):
        return analysis.caseADisjunctionExpr(self)

    def getDisjunction (self):
        return self._disjunction_

    def setDisjunction(self, node):
        if(self._disjunction_ != None):
            self._disjunction_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._disjunction_ = node

    def __str__(self):
        return '' + self.toString(self._disjunction_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._disjunction_ == child):
            self._disjunction_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._disjunction_ == oldChild):
            self.setDisjunction(newChild)
            return

class AConjunctionDisjunction(Node):
    def __init__ (self, _conjunction_=None):
        super(AConjunctionDisjunction, self).__init__()
        self._conjunction_ = None
        if (_conjunction_ != None):
            self.setConjunction(_conjunction_)

    def clone(self):
        return AConjunctionDisjunction(self.cloneNode(self._conjunction_))

    def apply(self, analysis):
        return analysis.caseAConjunctionDisjunction(self)

    def getConjunction (self):
        return self._conjunction_

    def setConjunction(self, node):
        if(self._conjunction_ != None):
            self._conjunction_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._conjunction_ = node

    def __str__(self):
        return '' + self.toString(self._conjunction_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._conjunction_ == child):
            self._conjunction_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._conjunction_ == oldChild):
            self.setConjunction(newChild)
            return

class ADisjunction(Node):
    def __init__ (self, _disjunction_=None,_t_or_=None,_conjunction_=None):
        super(ADisjunction, self).__init__()
        self._disjunction_ = None
        self._t_or_ = None
        self._conjunction_ = None
        if (_disjunction_ != None):
            self.setDisjunction(_disjunction_)
        if (_t_or_ != None):
            self.setTOr(_t_or_)
        if (_conjunction_ != None):
            self.setConjunction(_conjunction_)

    def clone(self):
        return ADisjunction(self.cloneNode(self._disjunction_),self.cloneNode(self._t_or_),self.cloneNode(self._conjunction_))

    def apply(self, analysis):
        return analysis.caseADisjunction(self)

    def getDisjunction (self):
        return self._disjunction_

    def setDisjunction(self, node):
        if(self._disjunction_ != None):
            self._disjunction_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._disjunction_ = node
    def getTOr (self):
        return self._t_or_

    def setTOr(self, node):
        if(self._t_or_ != None):
            self._t_or_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_or_ = node
    def getConjunction (self):
        return self._conjunction_

    def setConjunction(self, node):
        if(self._conjunction_ != None):
            self._conjunction_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._conjunction_ = node

    def __str__(self):
        return '' + self.toString(self._disjunction_)+ self.toString(self._t_or_)+ self.toString(self._conjunction_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._disjunction_ == child):
            self._disjunction_ = None
            return
        if (self._t_or_ == child):
            self._t_or_ = None
            return
        if (self._conjunction_ == child):
            self._conjunction_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._disjunction_ == oldChild):
            self.setDisjunction(newChild)
            return
        if (self._t_or_ == oldChild):
            self.setTOr(newChild)
            return
        if (self._conjunction_ == oldChild):
            self.setConjunction(newChild)
            return

class ASubexprConjunction(Node):
    def __init__ (self, _subexpr_=None):
        super(ASubexprConjunction, self).__init__()
        self._subexpr_ = None
        if (_subexpr_ != None):
            self.setSubexpr(_subexpr_)

    def clone(self):
        return ASubexprConjunction(self.cloneNode(self._subexpr_))

    def apply(self, analysis):
        return analysis.caseASubexprConjunction(self)

    def getSubexpr (self):
        return self._subexpr_

    def setSubexpr(self, node):
        if(self._subexpr_ != None):
            self._subexpr_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._subexpr_ = node

    def __str__(self):
        return '' + self.toString(self._subexpr_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._subexpr_ == child):
            self._subexpr_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._subexpr_ == oldChild):
            self.setSubexpr(newChild)
            return

class AConjunction(Node):
    def __init__ (self, _conjunction_=None,_t_and_=None,_subexpr_=None):
        super(AConjunction, self).__init__()
        self._conjunction_ = None
        self._t_and_ = None
        self._subexpr_ = None
        if (_conjunction_ != None):
            self.setConjunction(_conjunction_)
        if (_t_and_ != None):
            self.setTAnd(_t_and_)
        if (_subexpr_ != None):
            self.setSubexpr(_subexpr_)

    def clone(self):
        return AConjunction(self.cloneNode(self._conjunction_),self.cloneNode(self._t_and_),self.cloneNode(self._subexpr_))

    def apply(self, analysis):
        return analysis.caseAConjunction(self)

    def getConjunction (self):
        return self._conjunction_

    def setConjunction(self, node):
        if(self._conjunction_ != None):
            self._conjunction_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._conjunction_ = node
    def getTAnd (self):
        return self._t_and_

    def setTAnd(self, node):
        if(self._t_and_ != None):
            self._t_and_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_and_ = node
    def getSubexpr (self):
        return self._subexpr_

    def setSubexpr(self, node):
        if(self._subexpr_ != None):
            self._subexpr_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._subexpr_ = node

    def __str__(self):
        return '' + self.toString(self._conjunction_)+ self.toString(self._t_and_)+ self.toString(self._subexpr_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._conjunction_ == child):
            self._conjunction_ = None
            return
        if (self._t_and_ == child):
            self._t_and_ = None
            return
        if (self._subexpr_ == child):
            self._subexpr_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._conjunction_ == oldChild):
            self.setConjunction(newChild)
            return
        if (self._t_and_ == oldChild):
            self.setTAnd(newChild)
            return
        if (self._subexpr_ == oldChild):
            self.setSubexpr(newChild)
            return

class ANegatedSubexpr(Node):
    def __init__ (self, _t_not_=None,_subexpr_=None):
        super(ANegatedSubexpr, self).__init__()
        self._t_not_ = None
        self._subexpr_ = None
        if (_t_not_ != None):
            self.setTNot(_t_not_)
        if (_subexpr_ != None):
            self.setSubexpr(_subexpr_)

    def clone(self):
        return ANegatedSubexpr(self.cloneNode(self._t_not_),self.cloneNode(self._subexpr_))

    def apply(self, analysis):
        analysis.caseANegatedSubexpr(self)

    def getTNot (self):
        return self._t_not_

    def setTNot(self, node):
        if(self._t_not_ != None):
            self._t_not_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_not_ = node
    def getSubexpr (self):
        return self._subexpr_

    def setSubexpr(self, node):
        if(self._subexpr_ != None):
            self._subexpr_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._subexpr_ = node

    def __str__(self):
        return '' + self.toString(self._t_not_)+ self.toString(self._subexpr_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_not_ == child):
            self._t_not_ = None
            return
        if (self._subexpr_ == child):
            self._subexpr_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_not_ == oldChild):
            self.setTNot(newChild)
            return
        if (self._subexpr_ == oldChild):
            self.setSubexpr(newChild)
            return

class ASimpleSubexpr(Node):
    def __init__ (self, _simple_=None):
        super(ASimpleSubexpr, self).__init__()
        self._simple_ = None
        if (_simple_ != None):
            self.setSimple(_simple_)

    def clone(self):
        return ASimpleSubexpr(self.cloneNode(self._simple_))

    def apply(self, analysis):
        return analysis.caseASimpleSubexpr(self)

    def getSimple (self):
        return self._simple_

    def setSimple(self, node):
        if(self._simple_ != None):
            self._simple_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._simple_ = node

    def __str__(self):
        return '' + self.toString(self._simple_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._simple_ == child):
            self._simple_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._simple_ == oldChild):
            self.setSimple(newChild)
            return

class AComplexSubexpr(Node):
    def __init__ (self, _lpar_=None,_expr_=None,_rpar_=None):
        super(AComplexSubexpr, self).__init__()
        self._lpar_ = None
        self._expr_ = None
        self._rpar_ = None
        if (_lpar_ != None):
            self.setLpar(_lpar_)
        if (_expr_ != None):
            self.setExpr(_expr_)
        if (_rpar_ != None):
            self.setRpar(_rpar_)

    def clone(self):
        return AComplexSubexpr(self.cloneNode(self._lpar_),self.cloneNode(self._expr_),self.cloneNode(self._rpar_))

    def apply(self, analysis):
        return analysis.caseAComplexSubexpr(self)

    def getLpar (self):
        return self._lpar_

    def setLpar(self, node):
        if(self._lpar_ != None):
            self._lpar_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lpar_ = node
    def getExpr (self):
        return self._expr_

    def setExpr(self, node):
        if(self._expr_ != None):
            self._expr_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._expr_ = node
    def getRpar (self):
        return self._rpar_

    def setRpar(self, node):
        if(self._rpar_ != None):
            self._rpar_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._rpar_ = node

    def __str__(self):
        return '' + self.toString(self._lpar_)+ self.toString(self._expr_)+ self.toString(self._rpar_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._lpar_ == child):
            self._lpar_ = None
            return
        if (self._expr_ == child):
            self._expr_ = None
            return
        if (self._rpar_ == child):
            self._rpar_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._lpar_ == oldChild):
            self.setLpar(newChild)
            return
        if (self._expr_ == oldChild):
            self.setExpr(newChild)
            return
        if (self._rpar_ == oldChild):
            self.setRpar(newChild)
            return

class AQuantifiedSubexpr(Node):
    def __init__ (self, _quantified_=None):
        super(AQuantifiedSubexpr, self).__init__()
        self._quantified_ = None
        if (_quantified_ != None):
            self.setQuantified(_quantified_)

    def clone(self):
        return AQuantifiedSubexpr(self.cloneNode(self._quantified_))

    def apply(self, analysis):
        analysis.caseAQuantifiedSubexpr(self)

    def getQuantified (self):
        return self._quantified_

    def setQuantified(self, node):
        if(self._quantified_ != None):
            self._quantified_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._quantified_ = node

    def __str__(self):
        return '' + self.toString(self._quantified_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._quantified_ == child):
            self._quantified_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._quantified_ == oldChild):
            self.setQuantified(newChild)
            return

class AQuantified(Node):
    def __init__ (self, _quantifier_key_=None,_variablelist_=None,_lpar_=None,_expr_=None,_rpar_=None):
        super(AQuantified, self).__init__()
        self._quantifier_key_ = None
        self._variablelist_ = None
        self._lpar_ = None
        self._expr_ = None
        self._rpar_ = None
        if (_quantifier_key_ != None):
            self.setQuantifierKey(_quantifier_key_)
        if (_variablelist_ != None):
            self.setVariablelist(_variablelist_)
        if (_lpar_ != None):
            self.setLpar(_lpar_)
        if (_expr_ != None):
            self.setExpr(_expr_)
        if (_rpar_ != None):
            self.setRpar(_rpar_)

    def clone(self):
        return AQuantified(self.cloneNode(self._quantifier_key_),self.cloneNode(self._variablelist_),self.cloneNode(self._lpar_),self.cloneNode(self._expr_),self.cloneNode(self._rpar_))

    def apply(self, analysis):
        analysis.caseAQuantified(self)

    def getQuantifierKey (self):
        return self._quantifier_key_

    def setQuantifierKey(self, node):
        if(self._quantifier_key_ != None):
            self._quantifier_key_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._quantifier_key_ = node
    def getVariablelist (self):
        return self._variablelist_

    def setVariablelist(self, node):
        if(self._variablelist_ != None):
            self._variablelist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._variablelist_ = node
    def getLpar (self):
        return self._lpar_

    def setLpar(self, node):
        if(self._lpar_ != None):
            self._lpar_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lpar_ = node
    def getExpr (self):
        return self._expr_

    def setExpr(self, node):
        if(self._expr_ != None):
            self._expr_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._expr_ = node
    def getRpar (self):
        return self._rpar_

    def setRpar(self, node):
        if(self._rpar_ != None):
            self._rpar_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._rpar_ = node

    def __str__(self):
        return '' + self.toString(self._quantifier_key_)+ self.toString(self._variablelist_)+ self.toString(self._lpar_)+ self.toString(self._expr_)+ self.toString(self._rpar_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._quantifier_key_ == child):
            self._quantifier_key_ = None
            return
        if (self._variablelist_ == child):
            self._variablelist_ = None
            return
        if (self._lpar_ == child):
            self._lpar_ = None
            return
        if (self._expr_ == child):
            self._expr_ = None
            return
        if (self._rpar_ == child):
            self._rpar_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._quantifier_key_ == oldChild):
            self.setQuantifierKey(newChild)
            return
        if (self._variablelist_ == oldChild):
            self.setVariablelist(newChild)
            return
        if (self._lpar_ == oldChild):
            self.setLpar(newChild)
            return
        if (self._expr_ == oldChild):
            self.setExpr(newChild)
            return
        if (self._rpar_ == oldChild):
            self.setRpar(newChild)
            return

class AMoleculeSimple(Node):
    def __init__ (self, _molecule_=None):
        super(AMoleculeSimple, self).__init__()
        self._molecule_ = None
        if (_molecule_ != None):
            self.setMolecule(_molecule_)

    def clone(self):
        return AMoleculeSimple(self.cloneNode(self._molecule_))

    def apply(self, analysis):
        return analysis.caseAMoleculeSimple(self)

    def getMolecule (self):
        return self._molecule_

    def setMolecule(self, node):
        if(self._molecule_ != None):
            self._molecule_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._molecule_ = node

    def __str__(self):
        return '' + self.toString(self._molecule_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._molecule_ == child):
            self._molecule_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._molecule_ == oldChild):
            self.setMolecule(newChild)
            return

class AComparisonSimple(Node):
    def __init__ (self, _comparison_=None):
        super(AComparisonSimple, self).__init__()
        self._comparison_ = None
        if (_comparison_ != None):
            self.setComparison(_comparison_)

    def clone(self):
        return AComparisonSimple(self.cloneNode(self._comparison_))

    def apply(self, analysis):
        return analysis.caseAComparisonSimple(self)

    def getComparison (self):
        return self._comparison_

    def setComparison(self, node):
        if(self._comparison_ != None):
            self._comparison_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._comparison_ = node

    def __str__(self):
        return '' + self.toString(self._comparison_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._comparison_ == child):
            self._comparison_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._comparison_ == oldChild):
            self.setComparison(newChild)
            return

class AAtomSimple(Node):
    def __init__ (self, _term_=None):
        super(AAtomSimple, self).__init__()
        self._term_ = None
        if (_term_ != None):
            self.setTerm(_term_)

    def clone(self):
        return AAtomSimple(self.cloneNode(self._term_))

    def apply(self, analysis):
        return analysis.caseAAtomSimple(self)

    def getTerm (self):
        return self._term_

    def setTerm(self, node):
        if(self._term_ != None):
            self._term_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._term_ = node

    def __str__(self):
        return '' + self.toString(self._term_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._term_ == child):
            self._term_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._term_ == oldChild):
            self.setTerm(newChild)
            return

class AConceptMoleculePreferredMolecule(Node):
    def __init__ (self, _term_=None,_attr_specification_=None,_cpt_op_=None,_termlist_=None):
        super(AConceptMoleculePreferredMolecule, self).__init__()
        self._term_ = None
        self._attr_specification_ = None
        self._cpt_op_ = None
        self._termlist_ = None
        if (_term_ != None):
            self.setTerm(_term_)
        if (_attr_specification_ != None):
            self.setAttrSpecification(_attr_specification_)
        if (_cpt_op_ != None):
            self.setCptOp(_cpt_op_)
        if (_termlist_ != None):
            self.setTermlist(_termlist_)

    def clone(self):
        return AConceptMoleculePreferredMolecule(self.cloneNode(self._term_),self.cloneNode(self._attr_specification_),self.cloneNode(self._cpt_op_),self.cloneNode(self._termlist_))

    def apply(self, analysis):
        return analysis.caseAConceptMoleculePreferredMolecule(self)

    def getTerm (self):
        return self._term_

    def setTerm(self, node):
        if(self._term_ != None):
            self._term_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._term_ = node
    def getAttrSpecification (self):
        return self._attr_specification_

    def setAttrSpecification(self, node):
        if(self._attr_specification_ != None):
            self._attr_specification_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._attr_specification_ = node
    def getCptOp (self):
        return self._cpt_op_

    def setCptOp(self, node):
        if(self._cpt_op_ != None):
            self._cpt_op_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._cpt_op_ = node
    def getTermlist (self):
        return self._termlist_

    def setTermlist(self, node):
        if(self._termlist_ != None):
            self._termlist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._termlist_ = node

    def __str__(self):
        return '' + self.toString(self._term_)+ self.toString(self._attr_specification_)+ self.toString(self._cpt_op_)+ self.toString(self._termlist_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._term_ == child):
            self._term_ = None
            return
        if (self._attr_specification_ == child):
            self._attr_specification_ = None
            return
        if (self._cpt_op_ == child):
            self._cpt_op_ = None
            return
        if (self._termlist_ == child):
            self._termlist_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._term_ == oldChild):
            self.setTerm(newChild)
            return
        if (self._attr_specification_ == oldChild):
            self.setAttrSpecification(newChild)
            return
        if (self._cpt_op_ == oldChild):
            self.setCptOp(newChild)
            return
        if (self._termlist_ == oldChild):
            self.setTermlist(newChild)
            return

class AConceptMoleculeNonpreferredMolecule(Node):
    def __init__ (self, _term_=None,_cpt_op_=None,_termlist_=None,_attr_specification_=None):
        super(AConceptMoleculeNonpreferredMolecule, self).__init__()
        self._term_ = None
        self._cpt_op_ = None
        self._termlist_ = None
        self._attr_specification_ = None
        if (_term_ != None):
            self.setTerm(_term_)
        if (_cpt_op_ != None):
            self.setCptOp(_cpt_op_)
        if (_termlist_ != None):
            self.setTermlist(_termlist_)
        if (_attr_specification_ != None):
            self.setAttrSpecification(_attr_specification_)

    def clone(self):
        return AConceptMoleculeNonpreferredMolecule(self.cloneNode(self._term_),self.cloneNode(self._cpt_op_),self.cloneNode(self._termlist_),self.cloneNode(self._attr_specification_))

    def apply(self, analysis):
        analysis.caseAConceptMoleculeNonpreferredMolecule(self)

    def getTerm (self):
        return self._term_

    def setTerm(self, node):
        if(self._term_ != None):
            self._term_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._term_ = node
    def getCptOp (self):
        return self._cpt_op_

    def setCptOp(self, node):
        if(self._cpt_op_ != None):
            self._cpt_op_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._cpt_op_ = node
    def getTermlist (self):
        return self._termlist_

    def setTermlist(self, node):
        if(self._termlist_ != None):
            self._termlist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._termlist_ = node
    def getAttrSpecification (self):
        return self._attr_specification_

    def setAttrSpecification(self, node):
        if(self._attr_specification_ != None):
            self._attr_specification_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._attr_specification_ = node

    def __str__(self):
        return '' + self.toString(self._term_)+ self.toString(self._cpt_op_)+ self.toString(self._termlist_)+ self.toString(self._attr_specification_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._term_ == child):
            self._term_ = None
            return
        if (self._cpt_op_ == child):
            self._cpt_op_ = None
            return
        if (self._termlist_ == child):
            self._termlist_ = None
            return
        if (self._attr_specification_ == child):
            self._attr_specification_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._term_ == oldChild):
            self.setTerm(newChild)
            return
        if (self._cpt_op_ == oldChild):
            self.setCptOp(newChild)
            return
        if (self._termlist_ == oldChild):
            self.setTermlist(newChild)
            return
        if (self._attr_specification_ == oldChild):
            self.setAttrSpecification(newChild)
            return

class AAttributeMoleculeMolecule(Node):
    def __init__ (self, _term_=None,_attr_specification_=None):
        super(AAttributeMoleculeMolecule, self).__init__()
        self._term_ = None
        self._attr_specification_ = None
        if (_term_ != None):
            self.setTerm(_term_)
        if (_attr_specification_ != None):
            self.setAttrSpecification(_attr_specification_)

    def clone(self):
        return AAttributeMoleculeMolecule(self.cloneNode(self._term_),self.cloneNode(self._attr_specification_))

    def apply(self, analysis):
        return analysis.caseAAttributeMoleculeMolecule(self)

    def getTerm (self):
        return self._term_

    def setTerm(self, node):
        if(self._term_ != None):
            self._term_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._term_ = node
    def getAttrSpecification (self):
        return self._attr_specification_

    def setAttrSpecification(self, node):
        if(self._attr_specification_ != None):
            self._attr_specification_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._attr_specification_ = node

    def __str__(self):
        return '' + self.toString(self._term_)+ self.toString(self._attr_specification_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._term_ == child):
            self._term_ = None
            return
        if (self._attr_specification_ == child):
            self._attr_specification_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._term_ == oldChild):
            self.setTerm(newChild)
            return
        if (self._attr_specification_ == oldChild):
            self.setAttrSpecification(newChild)
            return

class AAttrSpecification(Node):
    def __init__ (self, _lbracket_=None,_attr_rel_list_=None,_rbracket_=None):
        super(AAttrSpecification, self).__init__()
        self._lbracket_ = None
        self._attr_rel_list_ = None
        self._rbracket_ = None
        if (_lbracket_ != None):
            self.setLbracket(_lbracket_)
        if (_attr_rel_list_ != None):
            self.setAttrRelList(_attr_rel_list_)
        if (_rbracket_ != None):
            self.setRbracket(_rbracket_)

    def clone(self):
        return AAttrSpecification(self.cloneNode(self._lbracket_),self.cloneNode(self._attr_rel_list_),self.cloneNode(self._rbracket_))

    def apply(self, analysis):
        return analysis.caseAAttrSpecification(self)

    def getLbracket (self):
        return self._lbracket_

    def setLbracket(self, node):
        if(self._lbracket_ != None):
            self._lbracket_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lbracket_ = node
    def getAttrRelList (self):
        return self._attr_rel_list_

    def setAttrRelList(self, node):
        if(self._attr_rel_list_ != None):
            self._attr_rel_list_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._attr_rel_list_ = node
    def getRbracket (self):
        return self._rbracket_

    def setRbracket(self, node):
        if(self._rbracket_ != None):
            self._rbracket_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._rbracket_ = node

    def __str__(self):
        return '' + self.toString(self._lbracket_)+ self.toString(self._attr_rel_list_)+ self.toString(self._rbracket_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._lbracket_ == child):
            self._lbracket_ = None
            return
        if (self._attr_rel_list_ == child):
            self._attr_rel_list_ = None
            return
        if (self._rbracket_ == child):
            self._rbracket_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._lbracket_ == oldChild):
            self.setLbracket(newChild)
            return
        if (self._attr_rel_list_ == oldChild):
            self.setAttrRelList(newChild)
            return
        if (self._rbracket_ == oldChild):
            self.setRbracket(newChild)
            return

class AAttrRelationAttrRelList(Node):
    def __init__ (self, _attr_relation_=None):
        super(AAttrRelationAttrRelList, self).__init__()
        self._attr_relation_ = None
        if (_attr_relation_ != None):
            self.setAttrRelation(_attr_relation_)

    def clone(self):
        return AAttrRelationAttrRelList(self.cloneNode(self._attr_relation_))

    def apply(self, analysis):
        return analysis.caseAAttrRelationAttrRelList(self)

    def getAttrRelation (self):
        return self._attr_relation_

    def setAttrRelation(self, node):
        if(self._attr_relation_ != None):
            self._attr_relation_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._attr_relation_ = node

    def __str__(self):
        return '' + self.toString(self._attr_relation_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._attr_relation_ == child):
            self._attr_relation_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._attr_relation_ == oldChild):
            self.setAttrRelation(newChild)
            return

class AAttrRelList(Node):
    def __init__ (self, _attr_rel_list_=None,_comma_=None,_attr_relation_=None):
        super(AAttrRelList, self).__init__()
        self._attr_rel_list_ = None
        self._comma_ = None
        self._attr_relation_ = None
        if (_attr_rel_list_ != None):
            self.setAttrRelList(_attr_rel_list_)
        if (_comma_ != None):
            self.setComma(_comma_)
        if (_attr_relation_ != None):
            self.setAttrRelation(_attr_relation_)

    def clone(self):
        return AAttrRelList(self.cloneNode(self._attr_rel_list_),self.cloneNode(self._comma_),self.cloneNode(self._attr_relation_))

    def apply(self, analysis):
        return analysis.caseAAttrRelList(self)

    def getAttrRelList (self):
        return self._attr_rel_list_

    def setAttrRelList(self, node):
        if(self._attr_rel_list_ != None):
            self._attr_rel_list_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._attr_rel_list_ = node
    def getComma (self):
        return self._comma_

    def setComma(self, node):
        if(self._comma_ != None):
            self._comma_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._comma_ = node
    def getAttrRelation (self):
        return self._attr_relation_

    def setAttrRelation(self, node):
        if(self._attr_relation_ != None):
            self._attr_relation_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._attr_relation_ = node

    def __str__(self):
        return '' + self.toString(self._attr_rel_list_)+ self.toString(self._comma_)+ self.toString(self._attr_relation_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._attr_rel_list_ == child):
            self._attr_rel_list_ = None
            return
        if (self._comma_ == child):
            self._comma_ = None
            return
        if (self._attr_relation_ == child):
            self._attr_relation_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._attr_rel_list_ == oldChild):
            self.setAttrRelList(newChild)
            return
        if (self._comma_ == oldChild):
            self.setComma(newChild)
            return
        if (self._attr_relation_ == oldChild):
            self.setAttrRelation(newChild)
            return

class AAttrDefAttrRelation(Node):
    def __init__ (self, _term_=None,_attr_def_op_=None,_termlist_=None):
        super(AAttrDefAttrRelation, self).__init__()
        self._term_ = None
        self._attr_def_op_ = None
        self._termlist_ = None
        if (_term_ != None):
            self.setTerm(_term_)
        if (_attr_def_op_ != None):
            self.setAttrDefOp(_attr_def_op_)
        if (_termlist_ != None):
            self.setTermlist(_termlist_)

    def clone(self):
        return AAttrDefAttrRelation(self.cloneNode(self._term_),self.cloneNode(self._attr_def_op_),self.cloneNode(self._termlist_))

    def apply(self, analysis):
        analysis.caseAAttrDefAttrRelation(self)

    def getTerm (self):
        return self._term_

    def setTerm(self, node):
        if(self._term_ != None):
            self._term_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._term_ = node
    def getAttrDefOp (self):
        return self._attr_def_op_

    def setAttrDefOp(self, node):
        if(self._attr_def_op_ != None):
            self._attr_def_op_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._attr_def_op_ = node
    def getTermlist (self):
        return self._termlist_

    def setTermlist(self, node):
        if(self._termlist_ != None):
            self._termlist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._termlist_ = node

    def __str__(self):
        return '' + self.toString(self._term_)+ self.toString(self._attr_def_op_)+ self.toString(self._termlist_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._term_ == child):
            self._term_ = None
            return
        if (self._attr_def_op_ == child):
            self._attr_def_op_ = None
            return
        if (self._termlist_ == child):
            self._termlist_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._term_ == oldChild):
            self.setTerm(newChild)
            return
        if (self._attr_def_op_ == oldChild):
            self.setAttrDefOp(newChild)
            return
        if (self._termlist_ == oldChild):
            self.setTermlist(newChild)
            return

class AAttrValAttrRelation(Node):
    def __init__ (self, _term_=None,_t_hasvalue_=None,_termlist_=None):
        super(AAttrValAttrRelation, self).__init__()
        self._term_ = None
        self._t_hasvalue_ = None
        self._termlist_ = None
        if (_term_ != None):
            self.setTerm(_term_)
        if (_t_hasvalue_ != None):
            self.setTHasvalue(_t_hasvalue_)
        if (_termlist_ != None):
            self.setTermlist(_termlist_)

    def clone(self):
        return AAttrValAttrRelation(self.cloneNode(self._term_),self.cloneNode(self._t_hasvalue_),self.cloneNode(self._termlist_))

    def apply(self, analysis):
        return analysis.caseAAttrValAttrRelation(self)

    def getTerm (self):
        return self._term_

    def setTerm(self, node):
        if(self._term_ != None):
            self._term_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._term_ = node
    def getTHasvalue (self):
        return self._t_hasvalue_

    def setTHasvalue(self, node):
        if(self._t_hasvalue_ != None):
            self._t_hasvalue_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_hasvalue_ = node
    def getTermlist (self):
        return self._termlist_

    def setTermlist(self, node):
        if(self._termlist_ != None):
            self._termlist_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._termlist_ = node

    def __str__(self):
        return '' + self.toString(self._term_)+ self.toString(self._t_hasvalue_)+ self.toString(self._termlist_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._term_ == child):
            self._term_ = None
            return
        if (self._t_hasvalue_ == child):
            self._t_hasvalue_ = None
            return
        if (self._termlist_ == child):
            self._termlist_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._term_ == oldChild):
            self.setTerm(newChild)
            return
        if (self._t_hasvalue_ == oldChild):
            self.setTHasvalue(newChild)
            return
        if (self._termlist_ == oldChild):
            self.setTermlist(newChild)
            return

class AComparison(Node):
    def __init__ (self, _left_=None,_comp_op_=None,_right_=None):
        super(AComparison, self).__init__()
        self._left_ = None
        self._comp_op_ = None
        self._right_ = None
        if (_left_ != None):
            self.setLeft(_left_)
        if (_comp_op_ != None):
            self.setCompOp(_comp_op_)
        if (_right_ != None):
            self.setRight(_right_)

    def clone(self):
        return AComparison(self.cloneNode(self._left_),self.cloneNode(self._comp_op_),self.cloneNode(self._right_))

    def apply(self, analysis):
        return analysis.caseAComparison(self)

    def getLeft (self):
        return self._left_

    def setLeft(self, node):
        if(self._left_ != None):
            self._left_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._left_ = node
    def getCompOp (self):
        return self._comp_op_

    def setCompOp(self, node):
        if(self._comp_op_ != None):
            self._comp_op_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._comp_op_ = node
    def getRight (self):
        return self._right_

    def setRight(self, node):
        if(self._right_ != None):
            self._right_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._right_ = node

    def __str__(self):
        return '' + self.toString(self._left_)+ self.toString(self._comp_op_)+ self.toString(self._right_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._left_ == child):
            self._left_ = None
            return
        if (self._comp_op_ == child):
            self._comp_op_ = None
            return
        if (self._right_ == child):
            self._right_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._left_ == oldChild):
            self.setLeft(newChild)
            return
        if (self._comp_op_ == oldChild):
            self.setCompOp(newChild)
            return
        if (self._right_ == oldChild):
            self.setRight(newChild)
            return

class AParametrizedFunctionsymbol(Node):
    def __init__ (self, _id_=None,_lpar_=None,_terms_=None,_rpar_=None):
        super(AParametrizedFunctionsymbol, self).__init__()
        self._id_ = None
        self._lpar_ = None
        self._terms_ = None
        self._rpar_ = None
        if (_id_ != None):
            self.setId(_id_)
        if (_lpar_ != None):
            self.setLpar(_lpar_)
        if (_terms_ != None):
            self.setTerms(_terms_)
        if (_rpar_ != None):
            self.setRpar(_rpar_)

    def clone(self):
        return AParametrizedFunctionsymbol(self.cloneNode(self._id_),self.cloneNode(self._lpar_),self.cloneNode(self._terms_),self.cloneNode(self._rpar_))

    def apply(self, analysis):
        return analysis.caseAParametrizedFunctionsymbol(self)

    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getLpar (self):
        return self._lpar_

    def setLpar(self, node):
        if(self._lpar_ != None):
            self._lpar_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lpar_ = node
    def getTerms (self):
        return self._terms_

    def setTerms(self, node):
        if(self._terms_ != None):
            self._terms_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._terms_ = node
    def getRpar (self):
        return self._rpar_

    def setRpar(self, node):
        if(self._rpar_ != None):
            self._rpar_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._rpar_ = node

    def __str__(self):
        return '' + self.toString(self._id_)+ self.toString(self._lpar_)+ self.toString(self._terms_)+ self.toString(self._rpar_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._id_ == child):
            self._id_ = None
            return
        if (self._lpar_ == child):
            self._lpar_ = None
            return
        if (self._terms_ == child):
            self._terms_ = None
            return
        if (self._rpar_ == child):
            self._rpar_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        if (self._lpar_ == oldChild):
            self.setLpar(newChild)
            return
        if (self._terms_ == oldChild):
            self.setTerms(newChild)
            return
        if (self._rpar_ == oldChild):
            self.setRpar(newChild)
            return

class AMathFunctionsymbol(Node):
    def __init__ (self, _lpar_=None,_mathexpr_=None,_math_op_=None,_term_=None,_rpar_=None):
        super(AMathFunctionsymbol, self).__init__()
        self._lpar_ = None
        self._mathexpr_ = None
        self._math_op_ = None
        self._term_ = None
        self._rpar_ = None
        if (_lpar_ != None):
            self.setLpar(_lpar_)
        if (_mathexpr_ != None):
            self.setMathexpr(_mathexpr_)
        if (_math_op_ != None):
            self.setMathOp(_math_op_)
        if (_term_ != None):
            self.setTerm(_term_)
        if (_rpar_ != None):
            self.setRpar(_rpar_)

    def clone(self):
        return AMathFunctionsymbol(self.cloneNode(self._lpar_),self.cloneNode(self._mathexpr_),self.cloneNode(self._math_op_),self.cloneNode(self._term_),self.cloneNode(self._rpar_))

    def apply(self, analysis):
        return analysis.caseAMathFunctionsymbol(self)

    def getLpar (self):
        return self._lpar_

    def setLpar(self, node):
        if(self._lpar_ != None):
            self._lpar_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lpar_ = node
    def getMathexpr (self):
        return self._mathexpr_

    def setMathexpr(self, node):
        if(self._mathexpr_ != None):
            self._mathexpr_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._mathexpr_ = node
    def getMathOp (self):
        return self._math_op_

    def setMathOp(self, node):
        if(self._math_op_ != None):
            self._math_op_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._math_op_ = node
    def getTerm (self):
        return self._term_

    def setTerm(self, node):
        if(self._term_ != None):
            self._term_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._term_ = node
    def getRpar (self):
        return self._rpar_

    def setRpar(self, node):
        if(self._rpar_ != None):
            self._rpar_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._rpar_ = node

    def __str__(self):
        return '' + self.toString(self._lpar_)+ self.toString(self._mathexpr_)+ self.toString(self._math_op_)+ self.toString(self._term_)+ self.toString(self._rpar_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._lpar_ == child):
            self._lpar_ = None
            return
        if (self._mathexpr_ == child):
            self._mathexpr_ = None
            return
        if (self._math_op_ == child):
            self._math_op_ = None
            return
        if (self._term_ == child):
            self._term_ = None
            return
        if (self._rpar_ == child):
            self._rpar_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._lpar_ == oldChild):
            self.setLpar(newChild)
            return
        if (self._mathexpr_ == oldChild):
            self.setMathexpr(newChild)
            return
        if (self._math_op_ == oldChild):
            self.setMathOp(newChild)
            return
        if (self._term_ == oldChild):
            self.setTerm(newChild)
            return
        if (self._rpar_ == oldChild):
            self.setRpar(newChild)
            return

class ASubMathexpr(Node):
    def __init__ (self, _mathexpr_=None,_math_op_=None,_term_=None):
        super(ASubMathexpr, self).__init__()
        self._mathexpr_ = None
        self._math_op_ = None
        self._term_ = None
        if (_mathexpr_ != None):
            self.setMathexpr(_mathexpr_)
        if (_math_op_ != None):
            self.setMathOp(_math_op_)
        if (_term_ != None):
            self.setTerm(_term_)

    def clone(self):
        return ASubMathexpr(self.cloneNode(self._mathexpr_),self.cloneNode(self._math_op_),self.cloneNode(self._term_))

    def apply(self, analysis):
        analysis.caseASubMathexpr(self)

    def getMathexpr (self):
        return self._mathexpr_

    def setMathexpr(self, node):
        if(self._mathexpr_ != None):
            self._mathexpr_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._mathexpr_ = node
    def getMathOp (self):
        return self._math_op_

    def setMathOp(self, node):
        if(self._math_op_ != None):
            self._math_op_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._math_op_ = node
    def getTerm (self):
        return self._term_

    def setTerm(self, node):
        if(self._term_ != None):
            self._term_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._term_ = node

    def __str__(self):
        return '' + self.toString(self._mathexpr_)+ self.toString(self._math_op_)+ self.toString(self._term_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._mathexpr_ == child):
            self._mathexpr_ = None
            return
        if (self._math_op_ == child):
            self._math_op_ = None
            return
        if (self._term_ == child):
            self._term_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._mathexpr_ == oldChild):
            self.setMathexpr(newChild)
            return
        if (self._math_op_ == oldChild):
            self.setMathOp(newChild)
            return
        if (self._term_ == oldChild):
            self.setTerm(newChild)
            return

class AMathexpr(Node):
    def __init__ (self, _term_=None):
        super(AMathexpr, self).__init__()
        self._term_ = None
        if (_term_ != None):
            self.setTerm(_term_)

    def clone(self):
        return AMathexpr(self.cloneNode(self._term_))

    def apply(self, analysis):
        return analysis.caseAMathexpr(self)

    def getTerm (self):
        return self._term_

    def setTerm(self, node):
        if(self._term_ != None):
            self._term_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._term_ = node

    def __str__(self):
        return '' + self.toString(self._term_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._term_ == child):
            self._term_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._term_ == oldChild):
            self.setTerm(newChild)
            return

class AGtCompOp(Node):
    def __init__ (self, _gt_=None):
        super(AGtCompOp, self).__init__()
        self._gt_ = None
        if (_gt_ != None):
            self.setGt(_gt_)

    def clone(self):
        return AGtCompOp(self.cloneNode(self._gt_))

    def apply(self, analysis):
        analysis.caseAGtCompOp(self)

    def getGt (self):
        return self._gt_

    def setGt(self, node):
        if(self._gt_ != None):
            self._gt_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._gt_ = node

    def __str__(self):
        return '' + self.toString(self._gt_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._gt_ == child):
            self._gt_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._gt_ == oldChild):
            self.setGt(newChild)
            return

class ALtCompOp(Node):
    def __init__ (self, _lt_=None):
        super(ALtCompOp, self).__init__()
        self._lt_ = None
        if (_lt_ != None):
            self.setLt(_lt_)

    def clone(self):
        return ALtCompOp(self.cloneNode(self._lt_))

    def apply(self, analysis):
        analysis.caseALtCompOp(self)

    def getLt (self):
        return self._lt_

    def setLt(self, node):
        if(self._lt_ != None):
            self._lt_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lt_ = node

    def __str__(self):
        return '' + self.toString(self._lt_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._lt_ == child):
            self._lt_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._lt_ == oldChild):
            self.setLt(newChild)
            return

class AGteCompOp(Node):
    def __init__ (self, _gte_=None):
        super(AGteCompOp, self).__init__()
        self._gte_ = None
        if (_gte_ != None):
            self.setGte(_gte_)

    def clone(self):
        return AGteCompOp(self.cloneNode(self._gte_))

    def apply(self, analysis):
        analysis.caseAGteCompOp(self)

    def getGte (self):
        return self._gte_

    def setGte(self, node):
        if(self._gte_ != None):
            self._gte_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._gte_ = node

    def __str__(self):
        return '' + self.toString(self._gte_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._gte_ == child):
            self._gte_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._gte_ == oldChild):
            self.setGte(newChild)
            return

class ALteCompOp(Node):
    def __init__ (self, _lte_=None):
        super(ALteCompOp, self).__init__()
        self._lte_ = None
        if (_lte_ != None):
            self.setLte(_lte_)

    def clone(self):
        return ALteCompOp(self.cloneNode(self._lte_))

    def apply(self, analysis):
        analysis.caseALteCompOp(self)

    def getLte (self):
        return self._lte_

    def setLte(self, node):
        if(self._lte_ != None):
            self._lte_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lte_ = node

    def __str__(self):
        return '' + self.toString(self._lte_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._lte_ == child):
            self._lte_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._lte_ == oldChild):
            self.setLte(newChild)
            return

class AEqualCompOp(Node):
    def __init__ (self, _equal_=None):
        super(AEqualCompOp, self).__init__()
        self._equal_ = None
        if (_equal_ != None):
            self.setEqual(_equal_)

    def clone(self):
        return AEqualCompOp(self.cloneNode(self._equal_))

    def apply(self, analysis):
        return analysis.caseAEqualCompOp(self)

    def getEqual (self):
        return self._equal_

    def setEqual(self, node):
        if(self._equal_ != None):
            self._equal_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._equal_ = node

    def __str__(self):
        return '' + self.toString(self._equal_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._equal_ == child):
            self._equal_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._equal_ == oldChild):
            self.setEqual(newChild)
            return

class AUnequalCompOp(Node):
    def __init__ (self, _unequal_=None):
        super(AUnequalCompOp, self).__init__()
        self._unequal_ = None
        if (_unequal_ != None):
            self.setUnequal(_unequal_)

    def clone(self):
        return AUnequalCompOp(self.cloneNode(self._unequal_))

    def apply(self, analysis):
        analysis.caseAUnequalCompOp(self)

    def getUnequal (self):
        return self._unequal_

    def setUnequal(self, node):
        if(self._unequal_ != None):
            self._unequal_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._unequal_ = node

    def __str__(self):
        return '' + self.toString(self._unequal_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._unequal_ == child):
            self._unequal_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._unequal_ == oldChild):
            self.setUnequal(newChild)
            return

class AMemberofCptOp(Node):
    def __init__ (self, _t_memberof_=None):
        super(AMemberofCptOp, self).__init__()
        self._t_memberof_ = None
        if (_t_memberof_ != None):
            self.setTMemberof(_t_memberof_)

    def clone(self):
        return AMemberofCptOp(self.cloneNode(self._t_memberof_))

    def apply(self, analysis):
        analysis.caseAMemberofCptOp(self)

    def getTMemberof (self):
        return self._t_memberof_

    def setTMemberof(self, node):
        if(self._t_memberof_ != None):
            self._t_memberof_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_memberof_ = node

    def __str__(self):
        return '' + self.toString(self._t_memberof_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_memberof_ == child):
            self._t_memberof_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_memberof_ == oldChild):
            self.setTMemberof(newChild)
            return

class ASubconceptofCptOp(Node):
    def __init__ (self, _t_subconcept_=None):
        super(ASubconceptofCptOp, self).__init__()
        self._t_subconcept_ = None
        if (_t_subconcept_ != None):
            self.setTSubconcept(_t_subconcept_)

    def clone(self):
        return ASubconceptofCptOp(self.cloneNode(self._t_subconcept_))

    def apply(self, analysis):
        analysis.caseASubconceptofCptOp(self)

    def getTSubconcept (self):
        return self._t_subconcept_

    def setTSubconcept(self, node):
        if(self._t_subconcept_ != None):
            self._t_subconcept_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_subconcept_ = node

    def __str__(self):
        return '' + self.toString(self._t_subconcept_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_subconcept_ == child):
            self._t_subconcept_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_subconcept_ == oldChild):
            self.setTSubconcept(newChild)
            return

class AForallQuantifierKey(Node):
    def __init__ (self, _t_forall_=None):
        super(AForallQuantifierKey, self).__init__()
        self._t_forall_ = None
        if (_t_forall_ != None):
            self.setTForall(_t_forall_)

    def clone(self):
        return AForallQuantifierKey(self.cloneNode(self._t_forall_))

    def apply(self, analysis):
        analysis.caseAForallQuantifierKey(self)

    def getTForall (self):
        return self._t_forall_

    def setTForall(self, node):
        if(self._t_forall_ != None):
            self._t_forall_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_forall_ = node

    def __str__(self):
        return '' + self.toString(self._t_forall_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_forall_ == child):
            self._t_forall_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_forall_ == oldChild):
            self.setTForall(newChild)
            return

class AExistsQuantifierKey(Node):
    def __init__ (self, _t_exists_=None):
        super(AExistsQuantifierKey, self).__init__()
        self._t_exists_ = None
        if (_t_exists_ != None):
            self.setTExists(_t_exists_)

    def clone(self):
        return AExistsQuantifierKey(self.cloneNode(self._t_exists_))

    def apply(self, analysis):
        analysis.caseAExistsQuantifierKey(self)

    def getTExists (self):
        return self._t_exists_

    def setTExists(self, node):
        if(self._t_exists_ != None):
            self._t_exists_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_exists_ = node

    def __str__(self):
        return '' + self.toString(self._t_exists_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_exists_ == child):
            self._t_exists_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_exists_ == oldChild):
            self.setTExists(newChild)
            return

class AOftypeAttrDefOp(Node):
    def __init__ (self, _t_oftype_=None):
        super(AOftypeAttrDefOp, self).__init__()
        self._t_oftype_ = None
        if (_t_oftype_ != None):
            self.setTOftype(_t_oftype_)

    def clone(self):
        return AOftypeAttrDefOp(self.cloneNode(self._t_oftype_))

    def apply(self, analysis):
        analysis.caseAOftypeAttrDefOp(self)

    def getTOftype (self):
        return self._t_oftype_

    def setTOftype(self, node):
        if(self._t_oftype_ != None):
            self._t_oftype_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_oftype_ = node

    def __str__(self):
        return '' + self.toString(self._t_oftype_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_oftype_ == child):
            self._t_oftype_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_oftype_ == oldChild):
            self.setTOftype(newChild)
            return

class AImpliestypeAttrDefOp(Node):
    def __init__ (self, _t_impliestype_=None):
        super(AImpliestypeAttrDefOp, self).__init__()
        self._t_impliestype_ = None
        if (_t_impliestype_ != None):
            self.setTImpliestype(_t_impliestype_)

    def clone(self):
        return AImpliestypeAttrDefOp(self.cloneNode(self._t_impliestype_))

    def apply(self, analysis):
        analysis.caseAImpliestypeAttrDefOp(self)

    def getTImpliestype (self):
        return self._t_impliestype_

    def setTImpliestype(self, node):
        if(self._t_impliestype_ != None):
            self._t_impliestype_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_impliestype_ = node

    def __str__(self):
        return '' + self.toString(self._t_impliestype_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_impliestype_ == child):
            self._t_impliestype_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_impliestype_ == oldChild):
            self.setTImpliestype(newChild)
            return

class AImpliesImplyOp(Node):
    def __init__ (self, _t_implies_=None):
        super(AImpliesImplyOp, self).__init__()
        self._t_implies_ = None
        if (_t_implies_ != None):
            self.setTImplies(_t_implies_)

    def clone(self):
        return AImpliesImplyOp(self.cloneNode(self._t_implies_))

    def apply(self, analysis):
        analysis.caseAImpliesImplyOp(self)

    def getTImplies (self):
        return self._t_implies_

    def setTImplies(self, node):
        if(self._t_implies_ != None):
            self._t_implies_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_implies_ = node

    def __str__(self):
        return '' + self.toString(self._t_implies_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_implies_ == child):
            self._t_implies_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_implies_ == oldChild):
            self.setTImplies(newChild)
            return

class AImpliedbyImplyOp(Node):
    def __init__ (self, _t_implied_by_=None):
        super(AImpliedbyImplyOp, self).__init__()
        self._t_implied_by_ = None
        if (_t_implied_by_ != None):
            self.setTImpliedBy(_t_implied_by_)

    def clone(self):
        return AImpliedbyImplyOp(self.cloneNode(self._t_implied_by_))

    def apply(self, analysis):
        analysis.caseAImpliedbyImplyOp(self)

    def getTImpliedBy (self):
        return self._t_implied_by_

    def setTImpliedBy(self, node):
        if(self._t_implied_by_ != None):
            self._t_implied_by_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_implied_by_ = node

    def __str__(self):
        return '' + self.toString(self._t_implied_by_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_implied_by_ == child):
            self._t_implied_by_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_implied_by_ == oldChild):
            self.setTImpliedBy(newChild)
            return

class AEquivalentImplyOp(Node):
    def __init__ (self, _t_equivalent_=None):
        super(AEquivalentImplyOp, self).__init__()
        self._t_equivalent_ = None
        if (_t_equivalent_ != None):
            self.setTEquivalent(_t_equivalent_)

    def clone(self):
        return AEquivalentImplyOp(self.cloneNode(self._t_equivalent_))

    def apply(self, analysis):
        analysis.caseAEquivalentImplyOp(self)

    def getTEquivalent (self):
        return self._t_equivalent_

    def setTEquivalent(self, node):
        if(self._t_equivalent_ != None):
            self._t_equivalent_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_equivalent_ = node

    def __str__(self):
        return '' + self.toString(self._t_equivalent_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_equivalent_ == child):
            self._t_equivalent_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_equivalent_ == oldChild):
            self.setTEquivalent(newChild)
            return

class AAddMathOp(Node):
    def __init__ (self, _add_op_=None):
        super(AAddMathOp, self).__init__()
        self._add_op_ = None
        if (_add_op_ != None):
            self.setAddOp(_add_op_)

    def clone(self):
        return AAddMathOp(self.cloneNode(self._add_op_))

    def apply(self, analysis):
        analysis.caseAAddMathOp(self)

    def getAddOp (self):
        return self._add_op_

    def setAddOp(self, node):
        if(self._add_op_ != None):
            self._add_op_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._add_op_ = node

    def __str__(self):
        return '' + self.toString(self._add_op_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._add_op_ == child):
            self._add_op_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._add_op_ == oldChild):
            self.setAddOp(newChild)
            return

class ASubMathOp(Node):
    def __init__ (self, _sub_op_=None):
        super(ASubMathOp, self).__init__()
        self._sub_op_ = None
        if (_sub_op_ != None):
            self.setSubOp(_sub_op_)

    def clone(self):
        return ASubMathOp(self.cloneNode(self._sub_op_))

    def apply(self, analysis):
        analysis.caseASubMathOp(self)

    def getSubOp (self):
        return self._sub_op_

    def setSubOp(self, node):
        if(self._sub_op_ != None):
            self._sub_op_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._sub_op_ = node

    def __str__(self):
        return '' + self.toString(self._sub_op_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._sub_op_ == child):
            self._sub_op_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._sub_op_ == oldChild):
            self.setSubOp(newChild)
            return

class AMulMathOp(Node):
    def __init__ (self, _star_=None):
        super(AMulMathOp, self).__init__()
        self._star_ = None
        if (_star_ != None):
            self.setStar(_star_)

    def clone(self):
        return AMulMathOp(self.cloneNode(self._star_))

    def apply(self, analysis):
        analysis.caseAMulMathOp(self)

    def getStar (self):
        return self._star_

    def setStar(self, node):
        if(self._star_ != None):
            self._star_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._star_ = node

    def __str__(self):
        return '' + self.toString(self._star_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._star_ == child):
            self._star_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._star_ == oldChild):
            self.setStar(newChild)
            return

class ADivMathOp(Node):
    def __init__ (self, _div_op_=None):
        super(ADivMathOp, self).__init__()
        self._div_op_ = None
        if (_div_op_ != None):
            self.setDivOp(_div_op_)

    def clone(self):
        return ADivMathOp(self.cloneNode(self._div_op_))

    def apply(self, analysis):
        analysis.caseADivMathOp(self)

    def getDivOp (self):
        return self._div_op_

    def setDivOp(self, node):
        if(self._div_op_ != None):
            self._div_op_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._div_op_ = node

    def __str__(self):
        return '' + self.toString(self._div_op_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._div_op_ == child):
            self._div_op_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._div_op_ == oldChild):
            self.setDivOp(newChild)
            return

class APrefix(Node):
    def __init__ (self, _name_=None,_hash_=None):
        super(APrefix, self).__init__()
        self._name_ = None
        self._hash_ = None
        if (_name_ != None):
            self.setName(_name_)
        if (_hash_ != None):
            self.setHash(_hash_)

    def clone(self):
        return APrefix(self.cloneNode(self._name_),self.cloneNode(self._hash_))

    def apply(self, analysis):
        analysis.caseAPrefix(self)

    def getName (self):
        return self._name_

    def setName(self, node):
        if(self._name_ != None):
            self._name_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._name_ = node
    def getHash (self):
        return self._hash_

    def setHash(self, node):
        if(self._hash_ != None):
            self._hash_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._hash_ = node

    def __str__(self):
        return '' + self.toString(self._name_)+ self.toString(self._hash_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._name_ == child):
            self._name_ = None
            return
        if (self._hash_ == child):
            self._hash_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._name_ == oldChild):
            self.setName(newChild)
            return
        if (self._hash_ == oldChild):
            self.setHash(newChild)
            return

class AAnySqname(Node):
    def __init__ (self, _prefix_=None,_name_=None):
        super(AAnySqname, self).__init__()
        self._prefix_ = None
        self._name_ = None
        if (_prefix_ != None):
            self.setPrefix(_prefix_)
        if (_name_ != None):
            self.setName(_name_)

    def clone(self):
        return AAnySqname(self.cloneNode(self._prefix_),self.cloneNode(self._name_))

    def apply(self, analysis):
        return analysis.caseAAnySqname(self)

    def getPrefix (self):
        return self._prefix_

    def setPrefix(self, node):
        if(self._prefix_ != None):
            self._prefix_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._prefix_ = node
    def getName (self):
        return self._name_

    def setName(self, node):
        if(self._name_ != None):
            self._name_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._name_ = node

    def __str__(self):
        return '' + self.toString(self._prefix_)+ self.toString(self._name_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._prefix_ == child):
            self._prefix_ = None
            return
        if (self._name_ == child):
            self._name_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._prefix_ == oldChild):
            self.setPrefix(newChild)
            return
        if (self._name_ == oldChild):
            self.setName(newChild)
            return

class ARelationSqname(Node):
    def __init__ (self, _prefix_=None,_t_relation_=None):
        super(ARelationSqname, self).__init__()
        self._prefix_ = None
        self._t_relation_ = None
        if (_prefix_ != None):
            self.setPrefix(_prefix_)
        if (_t_relation_ != None):
            self.setTRelation(_t_relation_)

    def clone(self):
        return ARelationSqname(self.cloneNode(self._prefix_),self.cloneNode(self._t_relation_))

    def apply(self, analysis):
        analysis.caseARelationSqname(self)

    def getPrefix (self):
        return self._prefix_

    def setPrefix(self, node):
        if(self._prefix_ != None):
            self._prefix_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._prefix_ = node
    def getTRelation (self):
        return self._t_relation_

    def setTRelation(self, node):
        if(self._t_relation_ != None):
            self._t_relation_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_relation_ = node

    def __str__(self):
        return '' + self.toString(self._prefix_)+ self.toString(self._t_relation_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._prefix_ == child):
            self._prefix_ = None
            return
        if (self._t_relation_ == child):
            self._t_relation_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._prefix_ == oldChild):
            self.setPrefix(newChild)
            return
        if (self._t_relation_ == oldChild):
            self.setTRelation(newChild)
            return

class ASourceSqname(Node):
    def __init__ (self, _prefix_=None,_t_source_=None):
        super(ASourceSqname, self).__init__()
        self._prefix_ = None
        self._t_source_ = None
        if (_prefix_ != None):
            self.setPrefix(_prefix_)
        if (_t_source_ != None):
            self.setTSource(_t_source_)

    def clone(self):
        return ASourceSqname(self.cloneNode(self._prefix_),self.cloneNode(self._t_source_))

    def apply(self, analysis):
        analysis.caseASourceSqname(self)

    def getPrefix (self):
        return self._prefix_

    def setPrefix(self, node):
        if(self._prefix_ != None):
            self._prefix_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._prefix_ = node
    def getTSource (self):
        return self._t_source_

    def setTSource(self, node):
        if(self._t_source_ != None):
            self._t_source_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_source_ = node

    def __str__(self):
        return '' + self.toString(self._prefix_)+ self.toString(self._t_source_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._prefix_ == child):
            self._prefix_ = None
            return
        if (self._t_source_ == child):
            self._t_source_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._prefix_ == oldChild):
            self.setPrefix(newChild)
            return
        if (self._t_source_ == oldChild):
            self.setTSource(newChild)
            return

class AIriIri(Node):
    def __init__ (self, _full_iri_=None):
        super(AIriIri, self).__init__()
        self._full_iri_ = None
        if (_full_iri_ != None):
            self.setFullIri(_full_iri_)

    def clone(self):
        return AIriIri(self.cloneNode(self._full_iri_))

    def apply(self, analysis):
        return analysis.caseAIriIri(self)

    def getFullIri (self):
        return self._full_iri_

    def setFullIri(self, node):
        if(self._full_iri_ != None):
            self._full_iri_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._full_iri_ = node

    def __str__(self):
        return '' + self.toString(self._full_iri_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._full_iri_ == child):
            self._full_iri_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._full_iri_ == oldChild):
            self.setFullIri(newChild)
            return

class ASqnameIri(Node):
    def __init__ (self, _sqname_=None):
        super(ASqnameIri, self).__init__()
        self._sqname_ = None
        if (_sqname_ != None):
            self.setSqname(_sqname_)

    def clone(self):
        return ASqnameIri(self.cloneNode(self._sqname_))

    def apply(self, analysis):
        return analysis.caseASqnameIri(self)

    def getSqname (self):
        return self._sqname_

    def setSqname(self, node):
        if(self._sqname_ != None):
            self._sqname_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._sqname_ = node

    def __str__(self):
        return '' + self.toString(self._sqname_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._sqname_ == child):
            self._sqname_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._sqname_ == oldChild):
            self.setSqname(newChild)
            return

class AIriId(Node):
    def __init__ (self, _iri_=None):
        super(AIriId, self).__init__()
        self._iri_ = None
        if (_iri_ != None):
            self.setIri(_iri_)

    def clone(self):
        return AIriId(self.cloneNode(self._iri_))

    def apply(self, analysis):
        return analysis.caseAIriId(self)

    def getIri (self):
        return self._iri_

    def setIri(self, node):
        if(self._iri_ != None):
            self._iri_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._iri_ = node

    def __str__(self):
        return '' + self.toString(self._iri_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._iri_ == child):
            self._iri_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._iri_ == oldChild):
            self.setIri(newChild)
            return

class AAnonymousId(Node):
    def __init__ (self, _anonymous_=None):
        super(AAnonymousId, self).__init__()
        self._anonymous_ = None
        if (_anonymous_ != None):
            self.setAnonymous(_anonymous_)

    def clone(self):
        return AAnonymousId(self.cloneNode(self._anonymous_))

    def apply(self, analysis):
        analysis.caseAAnonymousId(self)

    def getAnonymous (self):
        return self._anonymous_

    def setAnonymous(self, node):
        if(self._anonymous_ != None):
            self._anonymous_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._anonymous_ = node

    def __str__(self):
        return '' + self.toString(self._anonymous_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._anonymous_ == child):
            self._anonymous_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._anonymous_ == oldChild):
            self.setAnonymous(newChild)
            return

class AUniversalTruthId(Node):
    def __init__ (self, _t_univtrue_=None):
        super(AUniversalTruthId, self).__init__()
        self._t_univtrue_ = None
        if (_t_univtrue_ != None):
            self.setTUnivtrue(_t_univtrue_)

    def clone(self):
        return AUniversalTruthId(self.cloneNode(self._t_univtrue_))

    def apply(self, analysis):
        analysis.caseAUniversalTruthId(self)

    def getTUnivtrue (self):
        return self._t_univtrue_

    def setTUnivtrue(self, node):
        if(self._t_univtrue_ != None):
            self._t_univtrue_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_univtrue_ = node

    def __str__(self):
        return '' + self.toString(self._t_univtrue_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_univtrue_ == child):
            self._t_univtrue_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_univtrue_ == oldChild):
            self.setTUnivtrue(newChild)
            return

class AUniversalFalsehoodId(Node):
    def __init__ (self, _t_univfalse_=None):
        super(AUniversalFalsehoodId, self).__init__()
        self._t_univfalse_ = None
        if (_t_univfalse_ != None):
            self.setTUnivfalse(_t_univfalse_)

    def clone(self):
        return AUniversalFalsehoodId(self.cloneNode(self._t_univfalse_))

    def apply(self, analysis):
        analysis.caseAUniversalFalsehoodId(self)

    def getTUnivfalse (self):
        return self._t_univfalse_

    def setTUnivfalse(self, node):
        if(self._t_univfalse_ != None):
            self._t_univfalse_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._t_univfalse_ = node

    def __str__(self):
        return '' + self.toString(self._t_univfalse_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._t_univfalse_ == child):
            self._t_univfalse_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._t_univfalse_ == oldChild):
            self.setTUnivfalse(newChild)
            return

class AIdIdlist(Node):
    def __init__ (self, _id_=None):
        super(AIdIdlist, self).__init__()
        self._id_ = None
        if (_id_ != None):
            self.setId(_id_)

    def clone(self):
        return AIdIdlist(self.cloneNode(self._id_))

    def apply(self, analysis):
        return analysis.caseAIdIdlist(self)

    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node

    def __str__(self):
        return '' + self.toString(self._id_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._id_ == child):
            self._id_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._id_ == oldChild):
            self.setId(newChild)
            return

class AIdlistIdlist(Node):
    def __init__ (self, _lbrace_=None,_id_=None,_moreids_=None,_rbrace_=None):
        super(AIdlistIdlist, self).__init__()
        self._lbrace_ = None
        self._id_ = None
        self._moreids_ = list()
        self._rbrace_ = None
        if (_lbrace_ != None):
            self.setLbrace(_lbrace_)
        if (_id_ != None):
            self.setId(_id_)
        if (_moreids_ != None):
            self._moreids_.extend(_moreids_)
        if (_rbrace_ != None):
            self.setRbrace(_rbrace_)

    def clone(self):
        return AIdlistIdlist(self.cloneNode(self._lbrace_),self.cloneNode(self._id_),self.cloneList(self._moreids_),self.cloneNode(self._rbrace_))

    def apply(self, analysis):
        return analysis.caseAIdlistIdlist(self)

    def getLbrace (self):
        return self._lbrace_

    def setLbrace(self, node):
        if(self._lbrace_ != None):
            self._lbrace_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lbrace_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node
    def getMoreids(self):
        return self._moreids_

    def setMoreids(self, lst):
        del self._moreids_[0:len(self._moreids_)]
        self._moreids_.extend(lst)
        
    def getRbrace (self):
        return self._rbrace_

    def setRbrace(self, node):
        if(self._rbrace_ != None):
            self._rbrace_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._rbrace_ = node

    def __str__(self):
        return '' + self.toString(self._lbrace_)+ self.toString(self._id_)+ self.toString(self._moreids_)+ self.toString(self._rbrace_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._lbrace_ == child):
            self._lbrace_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return
        if child in self._moreids_:
            self._moreids_.remove(child)
            return
        if (self._rbrace_ == child):
            self._rbrace_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._lbrace_ == oldChild):
            self.setLbrace(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return
        for i in range(self._moreids_):
            if (self._moreids_[i] == oldChild):
                if (newChild != None):
                    self._moreids_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._moreids_[i]
                oldChild.setparent(None)
                return
        if (self._rbrace_ == oldChild):
            self.setRbrace(newChild)
            return

class AMoreids(Node):
    def __init__ (self, _comma_=None,_id_=None):
        super(AMoreids, self).__init__()
        self._comma_ = None
        self._id_ = None
        if (_comma_ != None):
            self.setComma(_comma_)
        if (_id_ != None):
            self.setId(_id_)

    def clone(self):
        return AMoreids(self.cloneNode(self._comma_),self.cloneNode(self._id_))

    def apply(self, analysis):
        return analysis.caseAMoreids(self)

    def getComma (self):
        return self._comma_

    def setComma(self, node):
        if(self._comma_ != None):
            self._comma_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._comma_ = node
    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node

    def __str__(self):
        return '' + self.toString(self._comma_)+ self.toString(self._id_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._comma_ == child):
            self._comma_ = None
            return
        if (self._id_ == child):
            self._id_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._comma_ == oldChild):
            self.setComma(newChild)
            return
        if (self._id_ == oldChild):
            self.setId(newChild)
            return

class ADatatypeValue(Node):
    def __init__ (self, _functionsymbol_=None):
        super(ADatatypeValue, self).__init__()
        self._functionsymbol_ = None
        if (_functionsymbol_ != None):
            self.setFunctionsymbol(_functionsymbol_)

    def clone(self):
        return ADatatypeValue(self.cloneNode(self._functionsymbol_))

    def apply(self, analysis):
        return analysis.caseADatatypeValue(self)

    def getFunctionsymbol (self):
        return self._functionsymbol_

    def setFunctionsymbol(self, node):
        if(self._functionsymbol_ != None):
            self._functionsymbol_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._functionsymbol_ = node

    def __str__(self):
        return '' + self.toString(self._functionsymbol_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._functionsymbol_ == child):
            self._functionsymbol_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._functionsymbol_ == oldChild):
            self.setFunctionsymbol(newChild)
            return

class ATermValue(Node):
    def __init__ (self, _id_=None):
        super(ATermValue, self).__init__()
        self._id_ = None
        if (_id_ != None):
            self.setId(_id_)

    def clone(self):
        return ATermValue(self.cloneNode(self._id_))

    def apply(self, analysis):
        return analysis.caseATermValue(self)

    def getId (self):
        return self._id_

    def setId(self, node):
        if(self._id_ != None):
            self._id_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._id_ = node

    def __str__(self):
        return '' + self.toString(self._id_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._id_ == child):
            self._id_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._id_ == oldChild):
            self.setId(newChild)
            return

class ANumericValue(Node):
    def __init__ (self, _number_=None):
        super(ANumericValue, self).__init__()
        self._number_ = None
        if (_number_ != None):
            self.setNumber(_number_)

    def clone(self):
        return ANumericValue(self.cloneNode(self._number_))

    def apply(self, analysis):
        return analysis.caseANumericValue(self)

    def getNumber (self):
        return self._number_

    def setNumber(self, node):
        if(self._number_ != None):
            self._number_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._number_ = node

    def __str__(self):
        return '' + self.toString(self._number_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._number_ == child):
            self._number_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._number_ == oldChild):
            self.setNumber(newChild)
            return

class AStringValue(Node):
    def __init__ (self, _string_=None):
        super(AStringValue, self).__init__()
        self._string_ = None
        if (_string_ != None):
            self.setString(_string_)

    def clone(self):
        return AStringValue(self.cloneNode(self._string_))

    def apply(self, analysis):
        return analysis.caseAStringValue(self)

    def getString (self):
        return self._string_

    def setString(self, node):
        if(self._string_ != None):
            self._string_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._string_ = node

    def __str__(self):
        return '' + self.toString(self._string_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._string_ == child):
            self._string_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._string_ == oldChild):
            self.setString(newChild)
            return

class ATermValuelist(Node):
    def __init__ (self, _value_=None):
        super(ATermValuelist, self).__init__()
        self._value_ = None
        if (_value_ != None):
            self.setValue(_value_)

    def clone(self):
        return ATermValuelist(self.cloneNode(self._value_))

    def apply(self, analysis):
        return analysis.caseATermValuelist(self)

    def getValue (self):
        return self._value_

    def setValue(self, node):
        if(self._value_ != None):
            self._value_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._value_ = node

    def __str__(self):
        return '' + self.toString(self._value_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._value_ == child):
            self._value_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._value_ == oldChild):
            self.setValue(newChild)
            return

class AValuelistValuelist(Node):
    def __init__ (self, _lbrace_=None,_value_=None,_morevalues_=None,_rbrace_=None):
        super(AValuelistValuelist, self).__init__()
        self._lbrace_ = None
        self._value_ = None
        self._morevalues_ = list()
        self._rbrace_ = None
        if (_lbrace_ != None):
            self.setLbrace(_lbrace_)
        if (_value_ != None):
            self.setValue(_value_)
        if (_morevalues_ != None):
            self._morevalues_.extend(_morevalues_)
        if (_rbrace_ != None):
            self.setRbrace(_rbrace_)

    def clone(self):
        return AValuelistValuelist(self.cloneNode(self._lbrace_),self.cloneNode(self._value_),self.cloneList(self._morevalues_),self.cloneNode(self._rbrace_))

    def apply(self, analysis):
        return analysis.caseAValuelistValuelist(self)

    def getLbrace (self):
        return self._lbrace_

    def setLbrace(self, node):
        if(self._lbrace_ != None):
            self._lbrace_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lbrace_ = node
    def getValue (self):
        return self._value_

    def setValue(self, node):
        if(self._value_ != None):
            self._value_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._value_ = node
    def getMorevalues(self):
        return self._morevalues_

    def setMorevalues(self, lst):
        del self._morevalues_[0:len(self._morevalues_)]
        self._morevalues_.extend(lst)
        
    def getRbrace (self):
        return self._rbrace_

    def setRbrace(self, node):
        if(self._rbrace_ != None):
            self._rbrace_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._rbrace_ = node

    def __str__(self):
        return '' + self.toString(self._lbrace_)+ self.toString(self._value_)+ self.toString(self._morevalues_)+ self.toString(self._rbrace_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._lbrace_ == child):
            self._lbrace_ = None
            return
        if (self._value_ == child):
            self._value_ = None
            return
        if child in self._morevalues_:
            self._morevalues_.remove(child)
            return
        if (self._rbrace_ == child):
            self._rbrace_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._lbrace_ == oldChild):
            self.setLbrace(newChild)
            return
        if (self._value_ == oldChild):
            self.setValue(newChild)
            return
        for i in range(self._morevalues_):
            if (self._morevalues_[i] == oldChild):
                if (newChild != None):
                    self._morevalues_[i] = newChild
                    oldChild.setparent(None)
                    return

                del self._morevalues_[i]
                oldChild.setparent(None)
                return
        if (self._rbrace_ == oldChild):
            self.setRbrace(newChild)
            return

class AMorevalues(Node):
    def __init__ (self, _comma_=None,_value_=None):
        super(AMorevalues, self).__init__()
        self._comma_ = None
        self._value_ = None
        if (_comma_ != None):
            self.setComma(_comma_)
        if (_value_ != None):
            self.setValue(_value_)

    def clone(self):
        return AMorevalues(self.cloneNode(self._comma_),self.cloneNode(self._value_))

    def apply(self, analysis):
        return analysis.caseAMorevalues(self)

    def getComma (self):
        return self._comma_

    def setComma(self, node):
        if(self._comma_ != None):
            self._comma_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._comma_ = node
    def getValue (self):
        return self._value_

    def setValue(self, node):
        if(self._value_ != None):
            self._value_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._value_ = node

    def __str__(self):
        return '' + self.toString(self._comma_)+ self.toString(self._value_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._comma_ == child):
            self._comma_ = None
            return
        if (self._value_ == child):
            self._value_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._comma_ == oldChild):
            self.setComma(newChild)
            return
        if (self._value_ == oldChild):
            self.setValue(newChild)
            return

class ADataTerm(Node):
    def __init__ (self, _value_=None):
        super(ADataTerm, self).__init__()
        self._value_ = None
        if (_value_ != None):
            self.setValue(_value_)

    def clone(self):
        return ADataTerm(self.cloneNode(self._value_))

    def apply(self, analysis):
        return analysis.caseADataTerm(self)

    def getValue (self):
        return self._value_

    def setValue(self, node):
        if(self._value_ != None):
            self._value_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._value_ = node

    def __str__(self):
        return '' + self.toString(self._value_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._value_ == child):
            self._value_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._value_ == oldChild):
            self.setValue(newChild)
            return

class AVarTerm(Node):
    def __init__ (self, _variable_=None):
        super(AVarTerm, self).__init__()
        self._variable_ = None
        if (_variable_ != None):
            self.setVariable(_variable_)

    def clone(self):
        return AVarTerm(self.cloneNode(self._variable_))

    def apply(self, analysis):
        return analysis.caseAVarTerm(self)

    def getVariable (self):
        return self._variable_

    def setVariable(self, node):
        if(self._variable_ != None):
            self._variable_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._variable_ = node

    def __str__(self):
        return '' + self.toString(self._variable_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._variable_ == child):
            self._variable_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._variable_ == oldChild):
            self.setVariable(newChild)
            return

class ANbAnonymousTerm(Node):
    def __init__ (self, _nb_anonymous_=None):
        super(ANbAnonymousTerm, self).__init__()
        self._nb_anonymous_ = None
        if (_nb_anonymous_ != None):
            self.setNbAnonymous(_nb_anonymous_)

    def clone(self):
        return ANbAnonymousTerm(self.cloneNode(self._nb_anonymous_))

    def apply(self, analysis):
        analysis.caseANbAnonymousTerm(self)

    def getNbAnonymous (self):
        return self._nb_anonymous_

    def setNbAnonymous(self, node):
        if(self._nb_anonymous_ != None):
            self._nb_anonymous_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._nb_anonymous_ = node

    def __str__(self):
        return '' + self.toString(self._nb_anonymous_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._nb_anonymous_ == child):
            self._nb_anonymous_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._nb_anonymous_ == oldChild):
            self.setNbAnonymous(newChild)
            return

class ATermTerms(Node):
    def __init__ (self, _term_=None):
        super(ATermTerms, self).__init__()
        self._term_ = None
        if (_term_ != None):
            self.setTerm(_term_)

    def clone(self):
        return ATermTerms(self.cloneNode(self._term_))

    def apply(self, analysis):
        return analysis.caseATermTerms(self)

    def getTerm (self):
        return self._term_

    def setTerm(self, node):
        if(self._term_ != None):
            self._term_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._term_ = node

    def __str__(self):
        return '' + self.toString(self._term_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._term_ == child):
            self._term_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._term_ == oldChild):
            self.setTerm(newChild)
            return

class ATerms(Node):
    def __init__ (self, _terms_=None,_comma_=None,_term_=None):
        super(ATerms, self).__init__()
        self._terms_ = None
        self._comma_ = None
        self._term_ = None
        if (_terms_ != None):
            self.setTerms(_terms_)
        if (_comma_ != None):
            self.setComma(_comma_)
        if (_term_ != None):
            self.setTerm(_term_)

    def clone(self):
        return ATerms(self.cloneNode(self._terms_),self.cloneNode(self._comma_),self.cloneNode(self._term_))

    def apply(self, analysis):
        return analysis.caseATerms(self)

    def getTerms (self):
        return self._terms_

    def setTerms(self, node):
        if(self._terms_ != None):
            self._terms_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._terms_ = node
    def getComma (self):
        return self._comma_

    def setComma(self, node):
        if(self._comma_ != None):
            self._comma_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._comma_ = node
    def getTerm (self):
        return self._term_

    def setTerm(self, node):
        if(self._term_ != None):
            self._term_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._term_ = node

    def __str__(self):
        return '' + self.toString(self._terms_)+ self.toString(self._comma_)+ self.toString(self._term_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._terms_ == child):
            self._terms_ = None
            return
        if (self._comma_ == child):
            self._comma_ = None
            return
        if (self._term_ == child):
            self._term_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._terms_ == oldChild):
            self.setTerms(newChild)
            return
        if (self._comma_ == oldChild):
            self.setComma(newChild)
            return
        if (self._term_ == oldChild):
            self.setTerm(newChild)
            return

class ATermTermlist(Node):
    def __init__ (self, _term_=None):
        super(ATermTermlist, self).__init__()
        self._term_ = None
        if (_term_ != None):
            self.setTerm(_term_)

    def clone(self):
        return ATermTermlist(self.cloneNode(self._term_))

    def apply(self, analysis):
        return analysis.caseATermTermlist(self)

    def getTerm (self):
        return self._term_

    def setTerm(self, node):
        if(self._term_ != None):
            self._term_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._term_ = node

    def __str__(self):
        return '' + self.toString(self._term_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._term_ == child):
            self._term_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._term_ == oldChild):
            self.setTerm(newChild)
            return

class ATermlist(Node):
    def __init__ (self, _lbrace_=None,_terms_=None,_rbrace_=None):
        super(ATermlist, self).__init__()
        self._lbrace_ = None
        self._terms_ = None
        self._rbrace_ = None
        if (_lbrace_ != None):
            self.setLbrace(_lbrace_)
        if (_terms_ != None):
            self.setTerms(_terms_)
        if (_rbrace_ != None):
            self.setRbrace(_rbrace_)

    def clone(self):
        return ATermlist(self.cloneNode(self._lbrace_),self.cloneNode(self._terms_),self.cloneNode(self._rbrace_))

    def apply(self, analysis):
        return analysis.caseATermlist(self)

    def getLbrace (self):
        return self._lbrace_

    def setLbrace(self, node):
        if(self._lbrace_ != None):
            self._lbrace_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lbrace_ = node
    def getTerms (self):
        return self._terms_

    def setTerms(self, node):
        if(self._terms_ != None):
            self._terms_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._terms_ = node
    def getRbrace (self):
        return self._rbrace_

    def setRbrace(self, node):
        if(self._rbrace_ != None):
            self._rbrace_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._rbrace_ = node

    def __str__(self):
        return '' + self.toString(self._lbrace_)+ self.toString(self._terms_)+ self.toString(self._rbrace_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._lbrace_ == child):
            self._lbrace_ = None
            return
        if (self._terms_ == child):
            self._terms_ = None
            return
        if (self._rbrace_ == child):
            self._rbrace_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._lbrace_ == oldChild):
            self.setLbrace(newChild)
            return
        if (self._terms_ == oldChild):
            self.setTerms(newChild)
            return
        if (self._rbrace_ == oldChild):
            self.setRbrace(newChild)
            return

class AVariableVariables(Node):
    def __init__ (self, _variable_=None):
        super(AVariableVariables, self).__init__()
        self._variable_ = None
        if (_variable_ != None):
            self.setVariable(_variable_)

    def clone(self):
        return AVariableVariables(self.cloneNode(self._variable_))

    def apply(self, analysis):
        analysis.caseAVariableVariables(self)

    def getVariable (self):
        return self._variable_

    def setVariable(self, node):
        if(self._variable_ != None):
            self._variable_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._variable_ = node

    def __str__(self):
        return '' + self.toString(self._variable_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._variable_ == child):
            self._variable_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._variable_ == oldChild):
            self.setVariable(newChild)
            return

class AVariables(Node):
    def __init__ (self, _variables_=None,_comma_=None,_variable_=None):
        super(AVariables, self).__init__()
        self._variables_ = None
        self._comma_ = None
        self._variable_ = None
        if (_variables_ != None):
            self.setVariables(_variables_)
        if (_comma_ != None):
            self.setComma(_comma_)
        if (_variable_ != None):
            self.setVariable(_variable_)

    def clone(self):
        return AVariables(self.cloneNode(self._variables_),self.cloneNode(self._comma_),self.cloneNode(self._variable_))

    def apply(self, analysis):
        analysis.caseAVariables(self)

    def getVariables (self):
        return self._variables_

    def setVariables(self, node):
        if(self._variables_ != None):
            self._variables_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._variables_ = node
    def getComma (self):
        return self._comma_

    def setComma(self, node):
        if(self._comma_ != None):
            self._comma_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._comma_ = node
    def getVariable (self):
        return self._variable_

    def setVariable(self, node):
        if(self._variable_ != None):
            self._variable_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._variable_ = node

    def __str__(self):
        return '' + self.toString(self._variables_)+ self.toString(self._comma_)+ self.toString(self._variable_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._variables_ == child):
            self._variables_ = None
            return
        if (self._comma_ == child):
            self._comma_ = None
            return
        if (self._variable_ == child):
            self._variable_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._variables_ == oldChild):
            self.setVariables(newChild)
            return
        if (self._comma_ == oldChild):
            self.setComma(newChild)
            return
        if (self._variable_ == oldChild):
            self.setVariable(newChild)
            return

class AVariableVariablelist(Node):
    def __init__ (self, _variable_=None):
        super(AVariableVariablelist, self).__init__()
        self._variable_ = None
        if (_variable_ != None):
            self.setVariable(_variable_)

    def clone(self):
        return AVariableVariablelist(self.cloneNode(self._variable_))

    def apply(self, analysis):
        analysis.caseAVariableVariablelist(self)

    def getVariable (self):
        return self._variable_

    def setVariable(self, node):
        if(self._variable_ != None):
            self._variable_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._variable_ = node

    def __str__(self):
        return '' + self.toString(self._variable_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._variable_ == child):
            self._variable_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._variable_ == oldChild):
            self.setVariable(newChild)
            return

class AVariableListVariablelist(Node):
    def __init__ (self, _lbrace_=None,_variables_=None,_rbrace_=None):
        super(AVariableListVariablelist, self).__init__()
        self._lbrace_ = None
        self._variables_ = None
        self._rbrace_ = None
        if (_lbrace_ != None):
            self.setLbrace(_lbrace_)
        if (_variables_ != None):
            self.setVariables(_variables_)
        if (_rbrace_ != None):
            self.setRbrace(_rbrace_)

    def clone(self):
        return AVariableListVariablelist(self.cloneNode(self._lbrace_),self.cloneNode(self._variables_),self.cloneNode(self._rbrace_))

    def apply(self, analysis):
        analysis.caseAVariableListVariablelist(self)

    def getLbrace (self):
        return self._lbrace_

    def setLbrace(self, node):
        if(self._lbrace_ != None):
            self._lbrace_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._lbrace_ = node
    def getVariables (self):
        return self._variables_

    def setVariables(self, node):
        if(self._variables_ != None):
            self._variables_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._variables_ = node
    def getRbrace (self):
        return self._rbrace_

    def setRbrace(self, node):
        if(self._rbrace_ != None):
            self._rbrace_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._rbrace_ = node

    def __str__(self):
        return '' + self.toString(self._lbrace_)+ self.toString(self._variables_)+ self.toString(self._rbrace_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._lbrace_ == child):
            self._lbrace_ = None
            return
        if (self._variables_ == child):
            self._variables_ = None
            return
        if (self._rbrace_ == child):
            self._rbrace_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._lbrace_ == oldChild):
            self.setLbrace(newChild)
            return
        if (self._variables_ == oldChild):
            self.setVariables(newChild)
            return
        if (self._rbrace_ == oldChild):
            self.setRbrace(newChild)
            return

class AInteger(Node):
    def __init__ (self, _sub_op_=None,_pos_integer_=None):
        super(AInteger, self).__init__()
        self._sub_op_ = None
        self._pos_integer_ = None
        if (_sub_op_ != None):
            self.setSubOp(_sub_op_)
        if (_pos_integer_ != None):
            self.setPosInteger(_pos_integer_)

    def clone(self):
        return AInteger(self.cloneNode(self._sub_op_),self.cloneNode(self._pos_integer_))

    def apply(self, analysis):
        analysis.caseAInteger(self)

    def getSubOp (self):
        return self._sub_op_

    def setSubOp(self, node):
        if(self._sub_op_ != None):
            self._sub_op_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._sub_op_ = node
    def getPosInteger (self):
        return self._pos_integer_

    def setPosInteger(self, node):
        if(self._pos_integer_ != None):
            self._pos_integer_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._pos_integer_ = node

    def __str__(self):
        return '' + self.toString(self._sub_op_)+ self.toString(self._pos_integer_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._sub_op_ == child):
            self._sub_op_ = None
            return
        if (self._pos_integer_ == child):
            self._pos_integer_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._sub_op_ == oldChild):
            self.setSubOp(newChild)
            return
        if (self._pos_integer_ == oldChild):
            self.setPosInteger(newChild)
            return

class ADecimal(Node):
    def __init__ (self, _sub_op_=None,_pos_decimal_=None):
        super(ADecimal, self).__init__()
        self._sub_op_ = None
        self._pos_decimal_ = None
        if (_sub_op_ != None):
            self.setSubOp(_sub_op_)
        if (_pos_decimal_ != None):
            self.setPosDecimal(_pos_decimal_)

    def clone(self):
        return ADecimal(self.cloneNode(self._sub_op_),self.cloneNode(self._pos_decimal_))

    def apply(self, analysis):
        analysis.caseADecimal(self)

    def getSubOp (self):
        return self._sub_op_

    def setSubOp(self, node):
        if(self._sub_op_ != None):
            self._sub_op_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._sub_op_ = node
    def getPosDecimal (self):
        return self._pos_decimal_

    def setPosDecimal(self, node):
        if(self._pos_decimal_ != None):
            self._pos_decimal_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._pos_decimal_ = node

    def __str__(self):
        return '' + self.toString(self._sub_op_)+ self.toString(self._pos_decimal_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._sub_op_ == child):
            self._sub_op_ = None
            return
        if (self._pos_decimal_ == child):
            self._pos_decimal_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._sub_op_ == oldChild):
            self.setSubOp(newChild)
            return
        if (self._pos_decimal_ == oldChild):
            self.setPosDecimal(newChild)
            return

class AIntegerNumber(Node):
    def __init__ (self, _integer_=None):
        super(AIntegerNumber, self).__init__()
        self._integer_ = None
        if (_integer_ != None):
            self.setInteger(_integer_)

    def clone(self):
        return AIntegerNumber(self.cloneNode(self._integer_))

    def apply(self, analysis):
        analysis.caseAIntegerNumber(self)

    def getInteger (self):
        return self._integer_

    def setInteger(self, node):
        if(self._integer_ != None):
            self._integer_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._integer_ = node

    def __str__(self):
        return '' + self.toString(self._integer_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._integer_ == child):
            self._integer_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._integer_ == oldChild):
            self.setInteger(newChild)
            return

class ADecimalNumber(Node):
    def __init__ (self, _decimal_=None):
        super(ADecimalNumber, self).__init__()
        self._decimal_ = None
        if (_decimal_ != None):
            self.setDecimal(_decimal_)

    def clone(self):
        return ADecimalNumber(self.cloneNode(self._decimal_))

    def apply(self, analysis):
        analysis.caseADecimalNumber(self)

    def getDecimal (self):
        return self._decimal_

    def setDecimal(self, node):
        if(self._decimal_ != None):
            self._decimal_.setparent(None)

        if (node != None):
            if (node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._decimal_ = node

    def __str__(self):
        return '' + self.toString(self._decimal_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
    def removeChild(self, child):
        if (self._decimal_ == child):
            self._decimal_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if (self._decimal_ == oldChild):
            self.setDecimal(newChild)
            return


class Start(Node):
    def __init__(self, _base_=None, _eof_=None):
        super(Start, self).__init__()
        self._base_ = None
        self._eof_ = None
        self.setPWsml(_base_)
        self.setEOF(_eof_)

    def clone(self):
        return Start(self.cloneNode(self._base_), self.cloneNode(self._eof_))

    def apply(self, analysis):
        analysis.caseStart(self)

    def getPWsml(self):
        return self._base_
        
    def setPWsml(self, node):
        if(self._base_ != None):
            self._base_.setparent(None)

        if(node != None):
            if(node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._base_ = node

    def getEOF(self):
        return self._eof_
        
    def setEOF(self, node):
        if(self._eof_ != None):
            self._eof_.setparent(None)

        if(node != None):
            if(node.getparent() != None):
                node.getparent().removeChild(node)

            node.setparent(self)

        self._eof_ = node

    def removeChild(self, child):
        if(self._base_ == child):
            self._base_ = None
            return

        if(self._eof_ == child):
            self._eof_ = None
            return

    def replaceChild(self, oldChild, newChild):
        if(self._base_ == oldChild):
            self.setPWsml(newChild)
            return

        if(self._eof_ == oldChild):
            self.setEOF(newChild)
            return

    def __str__(self):
        return '' + self.toString(self._base_) + self.toString(self._eof_)
    
    def __repr__(self):
        return "'" + self.__str__() + "'"
        
     

############################# analysis.py #############################################

class Analysis(object):
    def __init__(self):
        self._in_ = None
        self._out_ = None

    def getIn(self, node):
        if (self._in_ == None):
            return None
            
        if self._in_.has_key(node):
            return self._in_[node]
        else:
            return None

    def setIn(self, node, _in_):
        if(self._in_ == None):
            self._in_ = dict()

        if not(_in_ == None):
            self._in_[node] = _in_
        else:
            if self._in_.has_key(node):
                del self._in_[node]

    def getOut(self, node):
        if(self._out_ == None):
            return None
            
        if self._out_.has_key(node):
            return self._out_[node]
        else:
            return None

    def setOut(self, node, _out_):
        if(self._out_ == None):
            self._out_ = dict()

        if not(_out_ == None):
            self._out_[node] = _out_
        else:
            if self._out_.has_key(node):
                del self._out_[node]

    def caseStart(self, node):
        self.defaultCase(node)

    def caseAWsml(self, node):
        self.defaultCase(node)
        
    def caseAWsmlvariant(self, node):
        self.defaultCase(node)
        
    def caseANamespace(self, node):
        self.defaultCase(node)
        
    def caseASharedvardef(self, node):
        self.defaultCase(node)
        
    def caseACapability(self, node):
        self.defaultCase(node)
        
    def caseAGoal(self, node):
        self.defaultCase(node)
        
    def caseAWebservice(self, node):
        self.defaultCase(node)
        
    def caseAGoalDefinition(self, node):
        self.defaultCase(node)
        
    def caseAOntologyDefinition(self, node):
        self.defaultCase(node)
        
    def caseAWebserviceDefinition(self, node):
        self.defaultCase(node)
        
    def caseAMediatorDefinition(self, node):
        self.defaultCase(node)
        
    def caseADefaultnsPrefixdefinitionlist(self, node):
        self.defaultCase(node)
        
    def caseAPrefixdefinitionlistPrefixdefinitionlist(self, node):
        self.defaultCase(node)
        
    def caseANamespacedefPrefixdefinition(self, node):
        self.defaultCase(node)
        
    def caseADefaultPrefixdefinition(self, node):
        self.defaultCase(node)
        
    def caseAMoreprefixdefinitions(self, node):
        self.defaultCase(node)
        
    def caseANfpHeader(self, node):
        self.defaultCase(node)
        
    def caseAUsesmediatorHeader(self, node):
        self.defaultCase(node)
        
    def caseAImportsontologyHeader(self, node):
        self.defaultCase(node)
        
    def caseAUsesmediator(self, node):
        self.defaultCase(node)
        
    def caseAImportsontology(self, node):
        self.defaultCase(node)
        
    def caseANfp(self, node):
        self.defaultCase(node)
        
    def caseAOomediatorMediator(self, node):
        self.defaultCase(node)
        
    def caseAGgmediatorMediator(self, node):
        self.defaultCase(node)
        
    def caseAWgmediatorMediator(self, node):
        self.defaultCase(node)
        
    def caseAWwmediatorMediator(self, node):
        self.defaultCase(node)
        
    def caseAOomediator(self, node):
        self.defaultCase(node)
        
    def caseAGgmediator(self, node):
        self.defaultCase(node)
        
    def caseAWgmediator(self, node):
        self.defaultCase(node)
        
    def caseAWwmediator(self, node):
        self.defaultCase(node)
        
    def caseAUseService(self, node):
        self.defaultCase(node)
        
    def caseASource(self, node):
        self.defaultCase(node)
        
    def caseAMsources(self, node):
        self.defaultCase(node)
        
    def caseASingleSources(self, node):
        self.defaultCase(node)
        
    def caseAMultipleSources(self, node):
        self.defaultCase(node)
        
    def caseATarget(self, node):
        self.defaultCase(node)
        
    def caseAPreconditionPrePostAssOrEff(self, node):
        self.defaultCase(node)
        
    def caseAPostconditionPrePostAssOrEff(self, node):
        self.defaultCase(node)
        
    def caseAAssumptionPrePostAssOrEff(self, node):
        self.defaultCase(node)
        
    def caseAEffectPrePostAssOrEff(self, node):
        self.defaultCase(node)
        
    def caseAMinterfaces(self, node):
        self.defaultCase(node)
        
    def caseAInterface(self, node):
        self.defaultCase(node)
        
    def caseASingleInterfaces(self, node):
        self.defaultCase(node)
        
    def caseAMultipleInterfaces(self, node):
        self.defaultCase(node)
        
    def caseAChoreography(self, node):
        self.defaultCase(node)
        
    def caseAOrchestration(self, node):
        self.defaultCase(node)
        
    def caseAOntology(self, node):
        self.defaultCase(node)
        
    def caseAConceptOntologyElement(self, node):
        self.defaultCase(node)
        
    def caseAInstanceOntologyElement(self, node):
        self.defaultCase(node)
        
    def caseARelationOntologyElement(self, node):
        self.defaultCase(node)
        
    def caseARelationinstanceOntologyElement(self, node):
        self.defaultCase(node)
        
    def caseAAxiomOntologyElement(self, node):
        self.defaultCase(node)
        
    def caseAConcept(self, node):
        self.defaultCase(node)
        
    def caseASuperconcept(self, node):
        self.defaultCase(node)
        
    def caseAOpenWorldAttType(self, node):
        self.defaultCase(node)
        
    def caseAClosedWorldAttType(self, node):
        self.defaultCase(node)
        
    def caseAAttribute(self, node):
        self.defaultCase(node)
        
    def caseACardinality(self, node):
        self.defaultCase(node)
        
    def caseAFiniteCardinalityCardinalityNumber(self, node):
        self.defaultCase(node)
        
    def caseAInfiniteCardinalityCardinalityNumber(self, node):
        self.defaultCase(node)
        
    def caseATransitiveAttributefeature(self, node):
        self.defaultCase(node)
        
    def caseASymmetricAttributefeature(self, node):
        self.defaultCase(node)
        
    def caseAInverseAttributefeature(self, node):
        self.defaultCase(node)
        
    def caseAReflexiveAttributefeature(self, node):
        self.defaultCase(node)
        
    def caseAInstance(self, node):
        self.defaultCase(node)
        
    def caseAMemberof(self, node):
        self.defaultCase(node)
        
    def caseAAttributevalue(self, node):
        self.defaultCase(node)
        
    def caseARelation(self, node):
        self.defaultCase(node)
        
    def caseAParamtype(self, node):
        self.defaultCase(node)
        
    def caseAParamtyping(self, node):
        self.defaultCase(node)
        
    def caseAMoreparamtype(self, node):
        self.defaultCase(node)
        
    def caseASuperrelation(self, node):
        self.defaultCase(node)
        
    def caseAArity(self, node):
        self.defaultCase(node)
        
    def caseARelationinstance(self, node):
        self.defaultCase(node)
        
    def caseAAxiom(self, node):
        self.defaultCase(node)
        
    def caseAUseAxiomAxiomdefinition(self, node):
        self.defaultCase(node)
        
    def caseANfpAxiomAxiomdefinition(self, node):
        self.defaultCase(node)
        
    def caseADefinedAxiomAxiomdefinition(self, node):
        self.defaultCase(node)
        
    def caseALogDefinition(self, node):
        self.defaultCase(node)
        
    def caseALpRuleLogExpr(self, node):
        self.defaultCase(node)
        
    def caseAConstraintLogExpr(self, node):
        self.defaultCase(node)
        
    def caseAOtherExpressionLogExpr(self, node):
        self.defaultCase(node)
        
    def caseAImplicationExpr(self, node):
        self.defaultCase(node)
        
    def caseADisjunctionExpr(self, node):
        self.defaultCase(node)
        
    def caseAConjunctionDisjunction(self, node):
        self.defaultCase(node)
        
    def caseADisjunction(self, node):
        self.defaultCase(node)
        
    def caseASubexprConjunction(self, node):
        self.defaultCase(node)
        
    def caseAConjunction(self, node):
        self.defaultCase(node)
        
    def caseANegatedSubexpr(self, node):
        self.defaultCase(node)
        
    def caseASimpleSubexpr(self, node):
        self.defaultCase(node)
        
    def caseAComplexSubexpr(self, node):
        self.defaultCase(node)
        
    def caseAQuantifiedSubexpr(self, node):
        self.defaultCase(node)
        
    def caseAQuantified(self, node):
        self.defaultCase(node)
        
    def caseAMoleculeSimple(self, node):
        self.defaultCase(node)
        
    def caseAComparisonSimple(self, node):
        self.defaultCase(node)
        
    def caseAAtomSimple(self, node):
        self.defaultCase(node)
        
    def caseAConceptMoleculePreferredMolecule(self, node):
        self.defaultCase(node)
        
    def caseAConceptMoleculeNonpreferredMolecule(self, node):
        self.defaultCase(node)
        
    def caseAAttributeMoleculeMolecule(self, node):
        self.defaultCase(node)
        
    def caseAAttrSpecification(self, node):
        self.defaultCase(node)
        
    def caseAAttrRelationAttrRelList(self, node):
        self.defaultCase(node)
        
    def caseAAttrRelList(self, node):
        self.defaultCase(node)
        
    def caseAAttrDefAttrRelation(self, node):
        self.defaultCase(node)
        
    def caseAAttrValAttrRelation(self, node):
        self.defaultCase(node)
        
    def caseAComparison(self, node):
        self.defaultCase(node)
        
    def caseAParametrizedFunctionsymbol(self, node):
        self.defaultCase(node)
        
    def caseAMathFunctionsymbol(self, node):
        self.defaultCase(node)
        
    def caseASubMathexpr(self, node):
        self.defaultCase(node)
        
    def caseAMathexpr(self, node):
        self.defaultCase(node)
        
    def caseAGtCompOp(self, node):
        self.defaultCase(node)
        
    def caseALtCompOp(self, node):
        self.defaultCase(node)
        
    def caseAGteCompOp(self, node):
        self.defaultCase(node)
        
    def caseALteCompOp(self, node):
        self.defaultCase(node)
        
    def caseAEqualCompOp(self, node):
        self.defaultCase(node)
        
    def caseAUnequalCompOp(self, node):
        self.defaultCase(node)
        
    def caseAMemberofCptOp(self, node):
        self.defaultCase(node)
        
    def caseASubconceptofCptOp(self, node):
        self.defaultCase(node)
        
    def caseAForallQuantifierKey(self, node):
        self.defaultCase(node)
        
    def caseAExistsQuantifierKey(self, node):
        self.defaultCase(node)
        
    def caseAOftypeAttrDefOp(self, node):
        self.defaultCase(node)
        
    def caseAImpliestypeAttrDefOp(self, node):
        self.defaultCase(node)
        
    def caseAImpliesImplyOp(self, node):
        self.defaultCase(node)
        
    def caseAImpliedbyImplyOp(self, node):
        self.defaultCase(node)
        
    def caseAEquivalentImplyOp(self, node):
        self.defaultCase(node)
        
    def caseAAddMathOp(self, node):
        self.defaultCase(node)
        
    def caseASubMathOp(self, node):
        self.defaultCase(node)
        
    def caseAMulMathOp(self, node):
        self.defaultCase(node)
        
    def caseADivMathOp(self, node):
        self.defaultCase(node)
        
    def caseAPrefix(self, node):
        self.defaultCase(node)
        
    def caseAAnySqname(self, node):
        self.defaultCase(node)
        
    def caseARelationSqname(self, node):
        self.defaultCase(node)
        
    def caseASourceSqname(self, node):
        self.defaultCase(node)
        
    def caseAIriIri(self, node):
        self.defaultCase(node)
        
    def caseASqnameIri(self, node):
        self.defaultCase(node)
        
    def caseAIriId(self, node):
        self.defaultCase(node)
        
    def caseAAnonymousId(self, node):
        self.defaultCase(node)
        
    def caseAUniversalTruthId(self, node):
        self.defaultCase(node)
        
    def caseAUniversalFalsehoodId(self, node):
        self.defaultCase(node)
        
    def caseAIdIdlist(self, node):
        self.defaultCase(node)
        
    def caseAIdlistIdlist(self, node):
        self.defaultCase(node)
        
    def caseAMoreids(self, node):
        self.defaultCase(node)
        
    def caseADatatypeValue(self, node):
        self.defaultCase(node)
        
    def caseATermValue(self, node):
        self.defaultCase(node)
        
    def caseANumericValue(self, node):
        self.defaultCase(node)
        
    def caseAStringValue(self, node):
        self.defaultCase(node)
        
    def caseATermValuelist(self, node):
        self.defaultCase(node)
        
    def caseAValuelistValuelist(self, node):
        self.defaultCase(node)
        
    def caseAMorevalues(self, node):
        self.defaultCase(node)
        
    def caseADataTerm(self, node):
        self.defaultCase(node)
        
    def caseAVarTerm(self, node):
        self.defaultCase(node)
        
    def caseANbAnonymousTerm(self, node):
        self.defaultCase(node)
        
    def caseATermTerms(self, node):
        self.defaultCase(node)
        
    def caseATerms(self, node):
        self.defaultCase(node)
        
    def caseATermTermlist(self, node):
        self.defaultCase(node)
        
    def caseATermlist(self, node):
        self.defaultCase(node)
        
    def caseAVariableVariables(self, node):
        self.defaultCase(node)
        
    def caseAVariables(self, node):
        self.defaultCase(node)
        
    def caseAVariableVariablelist(self, node):
        self.defaultCase(node)
        
    def caseAVariableListVariablelist(self, node):
        self.defaultCase(node)
        
    def caseAInteger(self, node):
        self.defaultCase(node)
        
    def caseADecimal(self, node):
        self.defaultCase(node)
        
    def caseAIntegerNumber(self, node):
        self.defaultCase(node)
        
    def caseADecimalNumber(self, node):
        self.defaultCase(node)
        

    def caseTTBlank(self, node):
        self.defaultCase(node)
        
    def caseTTComment(self, node):
        self.defaultCase(node)
        
    def caseTComma(self, node):
        self.defaultCase(node)
        
    def caseTEndpoint(self, node):
        self.defaultCase(node)
        
    def caseTLpar(self, node):
        self.defaultCase(node)
        
    def caseTRpar(self, node):
        self.defaultCase(node)
        
    def caseTLbracket(self, node):
        self.defaultCase(node)
        
    def caseTRbracket(self, node):
        self.defaultCase(node)
        
    def caseTLbrace(self, node):
        self.defaultCase(node)
        
    def caseTRbrace(self, node):
        self.defaultCase(node)
        
    def caseTHash(self, node):
        self.defaultCase(node)
        
    def caseTTAnd(self, node):
        self.defaultCase(node)
        
    def caseTTOr(self, node):
        self.defaultCase(node)
        
    def caseTTImplies(self, node):
        self.defaultCase(node)
        
    def caseTTImpliedBy(self, node):
        self.defaultCase(node)
        
    def caseTTEquivalent(self, node):
        self.defaultCase(node)
        
    def caseTTImpliedByLp(self, node):
        self.defaultCase(node)
        
    def caseTTConstraint(self, node):
        self.defaultCase(node)
        
    def caseTTNot(self, node):
        self.defaultCase(node)
        
    def caseTTExists(self, node):
        self.defaultCase(node)
        
    def caseTTForall(self, node):
        self.defaultCase(node)
        
    def caseTTUnivfalse(self, node):
        self.defaultCase(node)
        
    def caseTTUnivtrue(self, node):
        self.defaultCase(node)
        
    def caseTGt(self, node):
        self.defaultCase(node)
        
    def caseTLt(self, node):
        self.defaultCase(node)
        
    def caseTGte(self, node):
        self.defaultCase(node)
        
    def caseTLte(self, node):
        self.defaultCase(node)
        
    def caseTEqual(self, node):
        self.defaultCase(node)
        
    def caseTUnequal(self, node):
        self.defaultCase(node)
        
    def caseTAddOp(self, node):
        self.defaultCase(node)
        
    def caseTSubOp(self, node):
        self.defaultCase(node)
        
    def caseTStar(self, node):
        self.defaultCase(node)
        
    def caseTDivOp(self, node):
        self.defaultCase(node)
        
    def caseTTAssumption(self, node):
        self.defaultCase(node)
        
    def caseTTAxiom(self, node):
        self.defaultCase(node)
        
    def caseTTCapability(self, node):
        self.defaultCase(node)
        
    def caseTTChoreography(self, node):
        self.defaultCase(node)
        
    def caseTTConcept(self, node):
        self.defaultCase(node)
        
    def caseTTDefinedby(self, node):
        self.defaultCase(node)
        
    def caseTTEffect(self, node):
        self.defaultCase(node)
        
    def caseTTEndnfp(self, node):
        self.defaultCase(node)
        
    def caseTTGgmediator(self, node):
        self.defaultCase(node)
        
    def caseTTGoal(self, node):
        self.defaultCase(node)
        
    def caseTTHasvalue(self, node):
        self.defaultCase(node)
        
    def caseTTImpliestype(self, node):
        self.defaultCase(node)
        
    def caseTTImportontology(self, node):
        self.defaultCase(node)
        
    def caseTTInstance(self, node):
        self.defaultCase(node)
        
    def caseTTInterface(self, node):
        self.defaultCase(node)
        
    def caseTTInverseof(self, node):
        self.defaultCase(node)
        
    def caseTTMemberof(self, node):
        self.defaultCase(node)
        
    def caseTTNamespace(self, node):
        self.defaultCase(node)
        
    def caseTTNfp(self, node):
        self.defaultCase(node)
        
    def caseTTOftype(self, node):
        self.defaultCase(node)
        
    def caseTTOntology(self, node):
        self.defaultCase(node)
        
    def caseTTOomediator(self, node):
        self.defaultCase(node)
        
    def caseTTOrchestration(self, node):
        self.defaultCase(node)
        
    def caseTTPostcondition(self, node):
        self.defaultCase(node)
        
    def caseTTPrecondition(self, node):
        self.defaultCase(node)
        
    def caseTTReflexive(self, node):
        self.defaultCase(node)
        
    def caseTTRelation(self, node):
        self.defaultCase(node)
        
    def caseTTRelationInstance(self, node):
        self.defaultCase(node)
        
    def caseTTSharedvariable(self, node):
        self.defaultCase(node)
        
    def caseTTSource(self, node):
        self.defaultCase(node)
        
    def caseTTSubconcept(self, node):
        self.defaultCase(node)
        
    def caseTTSubrelation(self, node):
        self.defaultCase(node)
        
    def caseTTSymmetric(self, node):
        self.defaultCase(node)
        
    def caseTTTarget(self, node):
        self.defaultCase(node)
        
    def caseTTTransitive(self, node):
        self.defaultCase(node)
        
    def caseTTUsemediator(self, node):
        self.defaultCase(node)
        
    def caseTTUseservice(self, node):
        self.defaultCase(node)
        
    def caseTTWebservice(self, node):
        self.defaultCase(node)
        
    def caseTTWgmediator(self, node):
        self.defaultCase(node)
        
    def caseTTWsmlvariant(self, node):
        self.defaultCase(node)
        
    def caseTTWwmediator(self, node):
        self.defaultCase(node)
        
    def caseTVariable(self, node):
        self.defaultCase(node)
        
    def caseTAnonymous(self, node):
        self.defaultCase(node)
        
    def caseTNbAnonymous(self, node):
        self.defaultCase(node)
        
    def caseTPosInteger(self, node):
        self.defaultCase(node)
        
    def caseTPosDecimal(self, node):
        self.defaultCase(node)
        
    def caseTString(self, node):
        self.defaultCase(node)
        
    def caseTFullIri(self, node):
        self.defaultCase(node)
        
    def caseTName(self, node):
        self.defaultCase(node)
        
    def caseEOF(self, node):
        self.defaultCase(node)

    def defaultCase(self, node):
        pass

class DepthFirstAdapter(Analysis):
    def inStart(self, node):
        self.defaultIn(node)

    def outStart(self, node):
        self.defaultOut(node)

    def defaultIn(self, node):
        pass

    def defaultOut(self, node):
	    pass

    def caseStart(self, node):
        self.inStart(node)
        node.getPWsml().apply(self)
        node.getEOF().apply(self);
        self.outStart(node)

    def inAWsml(self, node):
        self.defaultIn(node)

    def outAWsml(self, node):
        self.defaultOut(node)

    def caseAWsml(self, node):
        self.inAWsml(node)
        if not(node.getWsmlvariant() == None):
            node.getWsmlvariant().apply(self)
        if not(node.getNamespace() == None):
            node.getNamespace().apply(self)
        temp = node.getDefinition()
        for item in temp:
            item.apply(self)
        self.outAWsml(node)
        
    def inAWsmlvariant(self, node):
        self.defaultIn(node)

    def outAWsmlvariant(self, node):
        self.defaultOut(node)

    def caseAWsmlvariant(self, node):
        self.inAWsmlvariant(node)
        if not(node.getTWsmlvariant() == None):
            node.getTWsmlvariant().apply(self)
        if not(node.getFullIri() == None):
            node.getFullIri().apply(self)
        self.outAWsmlvariant(node)
        
    def inANamespace(self, node):
        self.defaultIn(node)

    def outANamespace(self, node):
        self.defaultOut(node)

    def caseANamespace(self, node):
        self.inANamespace(node)
        if not(node.getTNamespace() == None):
            node.getTNamespace().apply(self)
        if not(node.getPrefixdefinitionlist() == None):
            node.getPrefixdefinitionlist().apply(self)
        self.outANamespace(node)
        
    def inASharedvardef(self, node):
        self.defaultIn(node)

    def outASharedvardef(self, node):
        self.defaultOut(node)

    def caseASharedvardef(self, node):
        self.inASharedvardef(node)
        if not(node.getTSharedvariable() == None):
            node.getTSharedvariable().apply(self)
        if not(node.getVariablelist() == None):
            node.getVariablelist().apply(self)
        self.outASharedvardef(node)
        
    def inACapability(self, node):
        self.defaultIn(node)

    def outACapability(self, node):
        self.defaultOut(node)

    def caseACapability(self, node):
        self.inACapability(node)
        if not(node.getTCapability() == None):
            node.getTCapability().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        temp = node.getHeader()
        for item in temp:
            item.apply(self)
        if not(node.getSharedvardef() == None):
            node.getSharedvardef().apply(self)
        temp = node.getPrePostAssOrEff()
        for item in temp:
            item.apply(self)
        self.outACapability(node)
        
    def inAGoal(self, node):
        self.defaultIn(node)

    def outAGoal(self, node):
        self.defaultOut(node)

    def caseAGoal(self, node):
        self.inAGoal(node)
        if not(node.getTGoal() == None):
            node.getTGoal().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        temp = node.getHeader()
        for item in temp:
            item.apply(self)
        if not(node.getCapability() == None):
            node.getCapability().apply(self)
        temp = node.getInterfaces()
        for item in temp:
            item.apply(self)
        self.outAGoal(node)
        
    def inAWebservice(self, node):
        self.defaultIn(node)

    def outAWebservice(self, node):
        self.defaultOut(node)

    def caseAWebservice(self, node):
        self.inAWebservice(node)
        if not(node.getTWebservice() == None):
            node.getTWebservice().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        temp = node.getHeader()
        for item in temp:
            item.apply(self)
        if not(node.getCapability() == None):
            node.getCapability().apply(self)
        temp = node.getInterfaces()
        for item in temp:
            item.apply(self)
        self.outAWebservice(node)
        
    def inAGoalDefinition(self, node):
        self.defaultIn(node)

    def outAGoalDefinition(self, node):
        self.defaultOut(node)

    def caseAGoalDefinition(self, node):
        self.inAGoalDefinition(node)
        if not(node.getGoal() == None):
            node.getGoal().apply(self)
        self.outAGoalDefinition(node)
        
    def inAOntologyDefinition(self, node):
        self.defaultIn(node)

    def outAOntologyDefinition(self, node):
        self.defaultOut(node)

    def caseAOntologyDefinition(self, node):
        self.inAOntologyDefinition(node)
        if not(node.getOntology() == None):
            node.getOntology().apply(self)
        self.outAOntologyDefinition(node)
        
    def inAWebserviceDefinition(self, node):
        self.defaultIn(node)

    def outAWebserviceDefinition(self, node):
        self.defaultOut(node)

    def caseAWebserviceDefinition(self, node):
        self.inAWebserviceDefinition(node)
        if not(node.getWebservice() == None):
            node.getWebservice().apply(self)
        self.outAWebserviceDefinition(node)
        
    def inAMediatorDefinition(self, node):
        self.defaultIn(node)

    def outAMediatorDefinition(self, node):
        self.defaultOut(node)

    def caseAMediatorDefinition(self, node):
        self.inAMediatorDefinition(node)
        if not(node.getMediator() == None):
            node.getMediator().apply(self)
        self.outAMediatorDefinition(node)
        
    def inADefaultnsPrefixdefinitionlist(self, node):
        self.defaultIn(node)

    def outADefaultnsPrefixdefinitionlist(self, node):
        self.defaultOut(node)

    def caseADefaultnsPrefixdefinitionlist(self, node):
        self.inADefaultnsPrefixdefinitionlist(node)
        if not(node.getFullIri() == None):
            node.getFullIri().apply(self)
        self.outADefaultnsPrefixdefinitionlist(node)
        
    def inAPrefixdefinitionlistPrefixdefinitionlist(self, node):
        self.defaultIn(node)

    def outAPrefixdefinitionlistPrefixdefinitionlist(self, node):
        self.defaultOut(node)

    def caseAPrefixdefinitionlistPrefixdefinitionlist(self, node):
        self.inAPrefixdefinitionlistPrefixdefinitionlist(node)
        if not(node.getLbrace() == None):
            node.getLbrace().apply(self)
        if not(node.getPrefixdefinition() == None):
            node.getPrefixdefinition().apply(self)
        temp = node.getMoreprefixdefinitions()
        for item in temp:
            item.apply(self)
        if not(node.getRbrace() == None):
            node.getRbrace().apply(self)
        self.outAPrefixdefinitionlistPrefixdefinitionlist(node)
        
    def inANamespacedefPrefixdefinition(self, node):
        self.defaultIn(node)

    def outANamespacedefPrefixdefinition(self, node):
        self.defaultOut(node)

    def caseANamespacedefPrefixdefinition(self, node):
        self.inANamespacedefPrefixdefinition(node)
        if not(node.getName() == None):
            node.getName().apply(self)
        if not(node.getFullIri() == None):
            node.getFullIri().apply(self)
        self.outANamespacedefPrefixdefinition(node)
        
    def inADefaultPrefixdefinition(self, node):
        self.defaultIn(node)

    def outADefaultPrefixdefinition(self, node):
        self.defaultOut(node)

    def caseADefaultPrefixdefinition(self, node):
        self.inADefaultPrefixdefinition(node)
        if not(node.getFullIri() == None):
            node.getFullIri().apply(self)
        self.outADefaultPrefixdefinition(node)
        
    def inAMoreprefixdefinitions(self, node):
        self.defaultIn(node)

    def outAMoreprefixdefinitions(self, node):
        self.defaultOut(node)

    def caseAMoreprefixdefinitions(self, node):
        self.inAMoreprefixdefinitions(node)
        if not(node.getComma() == None):
            node.getComma().apply(self)
        if not(node.getPrefixdefinition() == None):
            node.getPrefixdefinition().apply(self)
        self.outAMoreprefixdefinitions(node)
        
    def inANfpHeader(self, node):
        self.defaultIn(node)

    def outANfpHeader(self, node):
        self.defaultOut(node)

    def caseANfpHeader(self, node):
        self.inANfpHeader(node)
        if not(node.getNfp() == None):
            node.getNfp().apply(self)
        self.outANfpHeader(node)
        
    def inAUsesmediatorHeader(self, node):
        self.defaultIn(node)

    def outAUsesmediatorHeader(self, node):
        self.defaultOut(node)

    def caseAUsesmediatorHeader(self, node):
        self.inAUsesmediatorHeader(node)
        if not(node.getUsesmediator() == None):
            node.getUsesmediator().apply(self)
        self.outAUsesmediatorHeader(node)
        
    def inAImportsontologyHeader(self, node):
        self.defaultIn(node)

    def outAImportsontologyHeader(self, node):
        self.defaultOut(node)

    def caseAImportsontologyHeader(self, node):
        self.inAImportsontologyHeader(node)
        if not(node.getImportsontology() == None):
            node.getImportsontology().apply(self)
        self.outAImportsontologyHeader(node)
        
    def inAUsesmediator(self, node):
        self.defaultIn(node)

    def outAUsesmediator(self, node):
        self.defaultOut(node)

    def caseAUsesmediator(self, node):
        self.inAUsesmediator(node)
        if not(node.getTUsemediator() == None):
            node.getTUsemediator().apply(self)
        if not(node.getIdlist() == None):
            node.getIdlist().apply(self)
        self.outAUsesmediator(node)
        
    def inAImportsontology(self, node):
        self.defaultIn(node)

    def outAImportsontology(self, node):
        self.defaultOut(node)

    def caseAImportsontology(self, node):
        self.inAImportsontology(node)
        if not(node.getTImportontology() == None):
            node.getTImportontology().apply(self)
        if not(node.getIdlist() == None):
            node.getIdlist().apply(self)
        self.outAImportsontology(node)
        
    def inANfp(self, node):
        self.defaultIn(node)

    def outANfp(self, node):
        self.defaultOut(node)

    def caseANfp(self, node):
        self.inANfp(node)
        if not(node.getTNfp() == None):
            node.getTNfp().apply(self)
        temp = node.getAttributevalue()
        for item in temp:
            item.apply(self)
        if not(node.getTEndnfp() == None):
            node.getTEndnfp().apply(self)
        self.outANfp(node)
        
    def inAOomediatorMediator(self, node):
        self.defaultIn(node)

    def outAOomediatorMediator(self, node):
        self.defaultOut(node)

    def caseAOomediatorMediator(self, node):
        self.inAOomediatorMediator(node)
        if not(node.getOomediator() == None):
            node.getOomediator().apply(self)
        self.outAOomediatorMediator(node)
        
    def inAGgmediatorMediator(self, node):
        self.defaultIn(node)

    def outAGgmediatorMediator(self, node):
        self.defaultOut(node)

    def caseAGgmediatorMediator(self, node):
        self.inAGgmediatorMediator(node)
        if not(node.getGgmediator() == None):
            node.getGgmediator().apply(self)
        self.outAGgmediatorMediator(node)
        
    def inAWgmediatorMediator(self, node):
        self.defaultIn(node)

    def outAWgmediatorMediator(self, node):
        self.defaultOut(node)

    def caseAWgmediatorMediator(self, node):
        self.inAWgmediatorMediator(node)
        if not(node.getWgmediator() == None):
            node.getWgmediator().apply(self)
        self.outAWgmediatorMediator(node)
        
    def inAWwmediatorMediator(self, node):
        self.defaultIn(node)

    def outAWwmediatorMediator(self, node):
        self.defaultOut(node)

    def caseAWwmediatorMediator(self, node):
        self.inAWwmediatorMediator(node)
        if not(node.getWwmediator() == None):
            node.getWwmediator().apply(self)
        self.outAWwmediatorMediator(node)
        
    def inAOomediator(self, node):
        self.defaultIn(node)

    def outAOomediator(self, node):
        self.defaultOut(node)

    def caseAOomediator(self, node):
        self.inAOomediator(node)
        if not(node.getTOomediator() == None):
            node.getTOomediator().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        if not(node.getNfp() == None):
            node.getNfp().apply(self)
        if not(node.getImportsontology() == None):
            node.getImportsontology().apply(self)
        if not(node.getSources() == None):
            node.getSources().apply(self)
        if not(node.getTarget() == None):
            node.getTarget().apply(self)
        if not(node.getUseService() == None):
            node.getUseService().apply(self)
        self.outAOomediator(node)
        
    def inAGgmediator(self, node):
        self.defaultIn(node)

    def outAGgmediator(self, node):
        self.defaultOut(node)

    def caseAGgmediator(self, node):
        self.inAGgmediator(node)
        if not(node.getTGgmediator() == None):
            node.getTGgmediator().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        temp = node.getHeader()
        for item in temp:
            item.apply(self)
        if not(node.getSources() == None):
            node.getSources().apply(self)
        if not(node.getTarget() == None):
            node.getTarget().apply(self)
        if not(node.getUseService() == None):
            node.getUseService().apply(self)
        self.outAGgmediator(node)
        
    def inAWgmediator(self, node):
        self.defaultIn(node)

    def outAWgmediator(self, node):
        self.defaultOut(node)

    def caseAWgmediator(self, node):
        self.inAWgmediator(node)
        if not(node.getTWgmediator() == None):
            node.getTWgmediator().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        temp = node.getHeader()
        for item in temp:
            item.apply(self)
        if not(node.getSource() == None):
            node.getSource().apply(self)
        if not(node.getTarget() == None):
            node.getTarget().apply(self)
        if not(node.getUseService() == None):
            node.getUseService().apply(self)
        self.outAWgmediator(node)
        
    def inAWwmediator(self, node):
        self.defaultIn(node)

    def outAWwmediator(self, node):
        self.defaultOut(node)

    def caseAWwmediator(self, node):
        self.inAWwmediator(node)
        if not(node.getTWwmediator() == None):
            node.getTWwmediator().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        temp = node.getHeader()
        for item in temp:
            item.apply(self)
        if not(node.getSource() == None):
            node.getSource().apply(self)
        if not(node.getTarget() == None):
            node.getTarget().apply(self)
        if not(node.getUseService() == None):
            node.getUseService().apply(self)
        self.outAWwmediator(node)
        
    def inAUseService(self, node):
        self.defaultIn(node)

    def outAUseService(self, node):
        self.defaultOut(node)

    def caseAUseService(self, node):
        self.inAUseService(node)
        if not(node.getTUseservice() == None):
            node.getTUseservice().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        self.outAUseService(node)
        
    def inASource(self, node):
        self.defaultIn(node)

    def outASource(self, node):
        self.defaultOut(node)

    def caseASource(self, node):
        self.inASource(node)
        if not(node.getTSource() == None):
            node.getTSource().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        self.outASource(node)
        
    def inAMsources(self, node):
        self.defaultIn(node)

    def outAMsources(self, node):
        self.defaultOut(node)

    def caseAMsources(self, node):
        self.inAMsources(node)
        if not(node.getTSource() == None):
            node.getTSource().apply(self)
        if not(node.getLbrace() == None):
            node.getLbrace().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        temp = node.getMoreids()
        for item in temp:
            item.apply(self)
        if not(node.getRbrace() == None):
            node.getRbrace().apply(self)
        self.outAMsources(node)
        
    def inASingleSources(self, node):
        self.defaultIn(node)

    def outASingleSources(self, node):
        self.defaultOut(node)

    def caseASingleSources(self, node):
        self.inASingleSources(node)
        if not(node.getSource() == None):
            node.getSource().apply(self)
        self.outASingleSources(node)
        
    def inAMultipleSources(self, node):
        self.defaultIn(node)

    def outAMultipleSources(self, node):
        self.defaultOut(node)

    def caseAMultipleSources(self, node):
        self.inAMultipleSources(node)
        if not(node.getMsources() == None):
            node.getMsources().apply(self)
        self.outAMultipleSources(node)
        
    def inATarget(self, node):
        self.defaultIn(node)

    def outATarget(self, node):
        self.defaultOut(node)

    def caseATarget(self, node):
        self.inATarget(node)
        if not(node.getTTarget() == None):
            node.getTTarget().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        self.outATarget(node)
        
    def inAPreconditionPrePostAssOrEff(self, node):
        self.defaultIn(node)

    def outAPreconditionPrePostAssOrEff(self, node):
        self.defaultOut(node)

    def caseAPreconditionPrePostAssOrEff(self, node):
        self.inAPreconditionPrePostAssOrEff(node)
        if not(node.getTPrecondition() == None):
            node.getTPrecondition().apply(self)
        if not(node.getAxiomdefinition() == None):
            node.getAxiomdefinition().apply(self)
        self.outAPreconditionPrePostAssOrEff(node)
        
    def inAPostconditionPrePostAssOrEff(self, node):
        self.defaultIn(node)

    def outAPostconditionPrePostAssOrEff(self, node):
        self.defaultOut(node)

    def caseAPostconditionPrePostAssOrEff(self, node):
        self.inAPostconditionPrePostAssOrEff(node)
        if not(node.getTPostcondition() == None):
            node.getTPostcondition().apply(self)
        if not(node.getAxiomdefinition() == None):
            node.getAxiomdefinition().apply(self)
        self.outAPostconditionPrePostAssOrEff(node)
        
    def inAAssumptionPrePostAssOrEff(self, node):
        self.defaultIn(node)

    def outAAssumptionPrePostAssOrEff(self, node):
        self.defaultOut(node)

    def caseAAssumptionPrePostAssOrEff(self, node):
        self.inAAssumptionPrePostAssOrEff(node)
        if not(node.getTAssumption() == None):
            node.getTAssumption().apply(self)
        if not(node.getAxiomdefinition() == None):
            node.getAxiomdefinition().apply(self)
        self.outAAssumptionPrePostAssOrEff(node)
        
    def inAEffectPrePostAssOrEff(self, node):
        self.defaultIn(node)

    def outAEffectPrePostAssOrEff(self, node):
        self.defaultOut(node)

    def caseAEffectPrePostAssOrEff(self, node):
        self.inAEffectPrePostAssOrEff(node)
        if not(node.getTEffect() == None):
            node.getTEffect().apply(self)
        if not(node.getAxiomdefinition() == None):
            node.getAxiomdefinition().apply(self)
        self.outAEffectPrePostAssOrEff(node)
        
    def inAMinterfaces(self, node):
        self.defaultIn(node)

    def outAMinterfaces(self, node):
        self.defaultOut(node)

    def caseAMinterfaces(self, node):
        self.inAMinterfaces(node)
        if not(node.getTInterface() == None):
            node.getTInterface().apply(self)
        if not(node.getLbrace() == None):
            node.getLbrace().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        temp = node.getMoreids()
        for item in temp:
            item.apply(self)
        if not(node.getRbrace() == None):
            node.getRbrace().apply(self)
        self.outAMinterfaces(node)
        
    def inAInterface(self, node):
        self.defaultIn(node)

    def outAInterface(self, node):
        self.defaultOut(node)

    def caseAInterface(self, node):
        self.inAInterface(node)
        if not(node.getTInterface() == None):
            node.getTInterface().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        temp = node.getHeader()
        for item in temp:
            item.apply(self)
        if not(node.getChoreography() == None):
            node.getChoreography().apply(self)
        if not(node.getOrchestration() == None):
            node.getOrchestration().apply(self)
        self.outAInterface(node)
        
    def inASingleInterfaces(self, node):
        self.defaultIn(node)

    def outASingleInterfaces(self, node):
        self.defaultOut(node)

    def caseASingleInterfaces(self, node):
        self.inASingleInterfaces(node)
        if not(node.getInterface() == None):
            node.getInterface().apply(self)
        self.outASingleInterfaces(node)
        
    def inAMultipleInterfaces(self, node):
        self.defaultIn(node)

    def outAMultipleInterfaces(self, node):
        self.defaultOut(node)

    def caseAMultipleInterfaces(self, node):
        self.inAMultipleInterfaces(node)
        if not(node.getMinterfaces() == None):
            node.getMinterfaces().apply(self)
        self.outAMultipleInterfaces(node)
        
    def inAChoreography(self, node):
        self.defaultIn(node)

    def outAChoreography(self, node):
        self.defaultOut(node)

    def caseAChoreography(self, node):
        self.inAChoreography(node)
        if not(node.getTChoreography() == None):
            node.getTChoreography().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        self.outAChoreography(node)
        
    def inAOrchestration(self, node):
        self.defaultIn(node)

    def outAOrchestration(self, node):
        self.defaultOut(node)

    def caseAOrchestration(self, node):
        self.inAOrchestration(node)
        if not(node.getTOrchestration() == None):
            node.getTOrchestration().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        self.outAOrchestration(node)
        
    def inAOntology(self, node):
        self.defaultIn(node)

    def outAOntology(self, node):
        self.defaultOut(node)

    def caseAOntology(self, node):
        self.inAOntology(node)
        if not(node.getTOntology() == None):
            node.getTOntology().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        temp = node.getHeader()
        for item in temp:
            item.apply(self)
        temp = node.getOntologyElement()
        for item in temp:
            item.apply(self)
        self.outAOntology(node)
        
    def inAConceptOntologyElement(self, node):
        self.defaultIn(node)

    def outAConceptOntologyElement(self, node):
        self.defaultOut(node)

    def caseAConceptOntologyElement(self, node):
        self.inAConceptOntologyElement(node)
        if not(node.getConcept() == None):
            node.getConcept().apply(self)
        self.outAConceptOntologyElement(node)
        
    def inAInstanceOntologyElement(self, node):
        self.defaultIn(node)

    def outAInstanceOntologyElement(self, node):
        self.defaultOut(node)

    def caseAInstanceOntologyElement(self, node):
        self.inAInstanceOntologyElement(node)
        if not(node.getInstance() == None):
            node.getInstance().apply(self)
        self.outAInstanceOntologyElement(node)
        
    def inARelationOntologyElement(self, node):
        self.defaultIn(node)

    def outARelationOntologyElement(self, node):
        self.defaultOut(node)

    def caseARelationOntologyElement(self, node):
        self.inARelationOntologyElement(node)
        if not(node.getRelation() == None):
            node.getRelation().apply(self)
        self.outARelationOntologyElement(node)
        
    def inARelationinstanceOntologyElement(self, node):
        self.defaultIn(node)

    def outARelationinstanceOntologyElement(self, node):
        self.defaultOut(node)

    def caseARelationinstanceOntologyElement(self, node):
        self.inARelationinstanceOntologyElement(node)
        if not(node.getRelationinstance() == None):
            node.getRelationinstance().apply(self)
        self.outARelationinstanceOntologyElement(node)
        
    def inAAxiomOntologyElement(self, node):
        self.defaultIn(node)

    def outAAxiomOntologyElement(self, node):
        self.defaultOut(node)

    def caseAAxiomOntologyElement(self, node):
        self.inAAxiomOntologyElement(node)
        if not(node.getAxiom() == None):
            node.getAxiom().apply(self)
        self.outAAxiomOntologyElement(node)
        
    def inAConcept(self, node):
        self.defaultIn(node)

    def outAConcept(self, node):
        self.defaultOut(node)

    def caseAConcept(self, node):
        self.inAConcept(node)
        if not(node.getTConcept() == None):
            node.getTConcept().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        if not(node.getSuperconcept() == None):
            node.getSuperconcept().apply(self)
        if not(node.getNfp() == None):
            node.getNfp().apply(self)
        temp = node.getAttribute()
        for item in temp:
            item.apply(self)
        self.outAConcept(node)
        
    def inASuperconcept(self, node):
        self.defaultIn(node)

    def outASuperconcept(self, node):
        self.defaultOut(node)

    def caseASuperconcept(self, node):
        self.inASuperconcept(node)
        if not(node.getTSubconcept() == None):
            node.getTSubconcept().apply(self)
        if not(node.getIdlist() == None):
            node.getIdlist().apply(self)
        self.outASuperconcept(node)
        
    def inAOpenWorldAttType(self, node):
        self.defaultIn(node)

    def outAOpenWorldAttType(self, node):
        self.defaultOut(node)

    def caseAOpenWorldAttType(self, node):
        self.inAOpenWorldAttType(node)
        if not(node.getTOftype() == None):
            node.getTOftype().apply(self)
        self.outAOpenWorldAttType(node)
        
    def inAClosedWorldAttType(self, node):
        self.defaultIn(node)

    def outAClosedWorldAttType(self, node):
        self.defaultOut(node)

    def caseAClosedWorldAttType(self, node):
        self.inAClosedWorldAttType(node)
        if not(node.getTImpliestype() == None):
            node.getTImpliestype().apply(self)
        self.outAClosedWorldAttType(node)
        
    def inAAttribute(self, node):
        self.defaultIn(node)

    def outAAttribute(self, node):
        self.defaultOut(node)

    def caseAAttribute(self, node):
        self.inAAttribute(node)
        if not(node.getId() == None):
            node.getId().apply(self)
        temp = node.getAttributefeature()
        for item in temp:
            item.apply(self)
        if not(node.getAttType() == None):
            node.getAttType().apply(self)
        if not(node.getCardinality() == None):
            node.getCardinality().apply(self)
        if not(node.getIdlist() == None):
            node.getIdlist().apply(self)
        if not(node.getNfp() == None):
            node.getNfp().apply(self)
        self.outAAttribute(node)
        
    def inACardinality(self, node):
        self.defaultIn(node)

    def outACardinality(self, node):
        self.defaultOut(node)

    def caseACardinality(self, node):
        self.inACardinality(node)
        if not(node.getLpar() == None):
            node.getLpar().apply(self)
        if not(node.getPosInteger() == None):
            node.getPosInteger().apply(self)
        if not(node.getCardinalityNumber() == None):
            node.getCardinalityNumber().apply(self)
        if not(node.getRpar() == None):
            node.getRpar().apply(self)
        self.outACardinality(node)
        
    def inAFiniteCardinalityCardinalityNumber(self, node):
        self.defaultIn(node)

    def outAFiniteCardinalityCardinalityNumber(self, node):
        self.defaultOut(node)

    def caseAFiniteCardinalityCardinalityNumber(self, node):
        self.inAFiniteCardinalityCardinalityNumber(node)
        if not(node.getPosInteger() == None):
            node.getPosInteger().apply(self)
        self.outAFiniteCardinalityCardinalityNumber(node)
        
    def inAInfiniteCardinalityCardinalityNumber(self, node):
        self.defaultIn(node)

    def outAInfiniteCardinalityCardinalityNumber(self, node):
        self.defaultOut(node)

    def caseAInfiniteCardinalityCardinalityNumber(self, node):
        self.inAInfiniteCardinalityCardinalityNumber(node)
        if not(node.getStar() == None):
            node.getStar().apply(self)
        self.outAInfiniteCardinalityCardinalityNumber(node)
        
    def inATransitiveAttributefeature(self, node):
        self.defaultIn(node)

    def outATransitiveAttributefeature(self, node):
        self.defaultOut(node)

    def caseATransitiveAttributefeature(self, node):
        self.inATransitiveAttributefeature(node)
        if not(node.getTTransitive() == None):
            node.getTTransitive().apply(self)
        self.outATransitiveAttributefeature(node)
        
    def inASymmetricAttributefeature(self, node):
        self.defaultIn(node)

    def outASymmetricAttributefeature(self, node):
        self.defaultOut(node)

    def caseASymmetricAttributefeature(self, node):
        self.inASymmetricAttributefeature(node)
        if not(node.getTSymmetric() == None):
            node.getTSymmetric().apply(self)
        self.outASymmetricAttributefeature(node)
        
    def inAInverseAttributefeature(self, node):
        self.defaultIn(node)

    def outAInverseAttributefeature(self, node):
        self.defaultOut(node)

    def caseAInverseAttributefeature(self, node):
        self.inAInverseAttributefeature(node)
        if not(node.getTInverseof() == None):
            node.getTInverseof().apply(self)
        if not(node.getLpar() == None):
            node.getLpar().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        if not(node.getRpar() == None):
            node.getRpar().apply(self)
        self.outAInverseAttributefeature(node)
        
    def inAReflexiveAttributefeature(self, node):
        self.defaultIn(node)

    def outAReflexiveAttributefeature(self, node):
        self.defaultOut(node)

    def caseAReflexiveAttributefeature(self, node):
        self.inAReflexiveAttributefeature(node)
        if not(node.getTReflexive() == None):
            node.getTReflexive().apply(self)
        self.outAReflexiveAttributefeature(node)
        
    def inAInstance(self, node):
        self.defaultIn(node)

    def outAInstance(self, node):
        self.defaultOut(node)

    def caseAInstance(self, node):
        self.inAInstance(node)
        if not(node.getTInstance() == None):
            node.getTInstance().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        if not(node.getMemberof() == None):
            node.getMemberof().apply(self)
        if not(node.getNfp() == None):
            node.getNfp().apply(self)
        temp = node.getAttributevalue()
        for item in temp:
            item.apply(self)
        self.outAInstance(node)
        
    def inAMemberof(self, node):
        self.defaultIn(node)

    def outAMemberof(self, node):
        self.defaultOut(node)

    def caseAMemberof(self, node):
        self.inAMemberof(node)
        if not(node.getTMemberof() == None):
            node.getTMemberof().apply(self)
        if not(node.getIdlist() == None):
            node.getIdlist().apply(self)
        self.outAMemberof(node)
        
    def inAAttributevalue(self, node):
        self.defaultIn(node)

    def outAAttributevalue(self, node):
        self.defaultOut(node)

    def caseAAttributevalue(self, node):
        self.inAAttributevalue(node)
        if not(node.getId() == None):
            node.getId().apply(self)
        if not(node.getTHasvalue() == None):
            node.getTHasvalue().apply(self)
        if not(node.getValuelist() == None):
            node.getValuelist().apply(self)
        self.outAAttributevalue(node)
        
    def inARelation(self, node):
        self.defaultIn(node)

    def outARelation(self, node):
        self.defaultOut(node)

    def caseARelation(self, node):
        self.inARelation(node)
        if not(node.getTRelation() == None):
            node.getTRelation().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        if not(node.getArity() == None):
            node.getArity().apply(self)
        if not(node.getParamtyping() == None):
            node.getParamtyping().apply(self)
        if not(node.getSuperrelation() == None):
            node.getSuperrelation().apply(self)
        if not(node.getNfp() == None):
            node.getNfp().apply(self)
        self.outARelation(node)
        
    def inAParamtype(self, node):
        self.defaultIn(node)

    def outAParamtype(self, node):
        self.defaultOut(node)

    def caseAParamtype(self, node):
        self.inAParamtype(node)
        if not(node.getAttType() == None):
            node.getAttType().apply(self)
        if not(node.getIdlist() == None):
            node.getIdlist().apply(self)
        self.outAParamtype(node)
        
    def inAParamtyping(self, node):
        self.defaultIn(node)

    def outAParamtyping(self, node):
        self.defaultOut(node)

    def caseAParamtyping(self, node):
        self.inAParamtyping(node)
        if not(node.getLpar() == None):
            node.getLpar().apply(self)
        if not(node.getParamtype() == None):
            node.getParamtype().apply(self)
        temp = node.getMoreparamtype()
        for item in temp:
            item.apply(self)
        if not(node.getRpar() == None):
            node.getRpar().apply(self)
        self.outAParamtyping(node)
        
    def inAMoreparamtype(self, node):
        self.defaultIn(node)

    def outAMoreparamtype(self, node):
        self.defaultOut(node)

    def caseAMoreparamtype(self, node):
        self.inAMoreparamtype(node)
        if not(node.getComma() == None):
            node.getComma().apply(self)
        if not(node.getParamtype() == None):
            node.getParamtype().apply(self)
        self.outAMoreparamtype(node)
        
    def inASuperrelation(self, node):
        self.defaultIn(node)

    def outASuperrelation(self, node):
        self.defaultOut(node)

    def caseASuperrelation(self, node):
        self.inASuperrelation(node)
        if not(node.getTSubrelation() == None):
            node.getTSubrelation().apply(self)
        if not(node.getIdlist() == None):
            node.getIdlist().apply(self)
        self.outASuperrelation(node)
        
    def inAArity(self, node):
        self.defaultIn(node)

    def outAArity(self, node):
        self.defaultOut(node)

    def caseAArity(self, node):
        self.inAArity(node)
        if not(node.getDivOp() == None):
            node.getDivOp().apply(self)
        if not(node.getPosInteger() == None):
            node.getPosInteger().apply(self)
        self.outAArity(node)
        
    def inARelationinstance(self, node):
        self.defaultIn(node)

    def outARelationinstance(self, node):
        self.defaultOut(node)

    def caseARelationinstance(self, node):
        self.inARelationinstance(node)
        if not(node.getTRelationInstance() == None):
            node.getTRelationInstance().apply(self)
        if not(node.getName() == None):
            node.getName().apply(self)
        if not(node.getRelation() == None):
            node.getRelation().apply(self)
        if not(node.getLpar() == None):
            node.getLpar().apply(self)
        if not(node.getValue() == None):
            node.getValue().apply(self)
        temp = node.getMorevalues()
        for item in temp:
            item.apply(self)
        if not(node.getRpar() == None):
            node.getRpar().apply(self)
        if not(node.getNfp() == None):
            node.getNfp().apply(self)
        self.outARelationinstance(node)
        
    def inAAxiom(self, node):
        self.defaultIn(node)

    def outAAxiom(self, node):
        self.defaultOut(node)

    def caseAAxiom(self, node):
        self.inAAxiom(node)
        if not(node.getTAxiom() == None):
            node.getTAxiom().apply(self)
        if not(node.getAxiomdefinition() == None):
            node.getAxiomdefinition().apply(self)
        self.outAAxiom(node)
        
    def inAUseAxiomAxiomdefinition(self, node):
        self.defaultIn(node)

    def outAUseAxiomAxiomdefinition(self, node):
        self.defaultOut(node)

    def caseAUseAxiomAxiomdefinition(self, node):
        self.inAUseAxiomAxiomdefinition(node)
        if not(node.getId() == None):
            node.getId().apply(self)
        self.outAUseAxiomAxiomdefinition(node)
        
    def inANfpAxiomAxiomdefinition(self, node):
        self.defaultIn(node)

    def outANfpAxiomAxiomdefinition(self, node):
        self.defaultOut(node)

    def caseANfpAxiomAxiomdefinition(self, node):
        self.inANfpAxiomAxiomdefinition(node)
        if not(node.getId() == None):
            node.getId().apply(self)
        if not(node.getNfp() == None):
            node.getNfp().apply(self)
        self.outANfpAxiomAxiomdefinition(node)
        
    def inADefinedAxiomAxiomdefinition(self, node):
        self.defaultIn(node)

    def outADefinedAxiomAxiomdefinition(self, node):
        self.defaultOut(node)

    def caseADefinedAxiomAxiomdefinition(self, node):
        self.inADefinedAxiomAxiomdefinition(node)
        if not(node.getId() == None):
            node.getId().apply(self)
        if not(node.getNfp() == None):
            node.getNfp().apply(self)
        if not(node.getLogDefinition() == None):
            node.getLogDefinition().apply(self)
        self.outADefinedAxiomAxiomdefinition(node)
        
    def inALogDefinition(self, node):
        self.defaultIn(node)

    def outALogDefinition(self, node):
        self.defaultOut(node)

    def caseALogDefinition(self, node):
        self.inALogDefinition(node)
        if not(node.getTDefinedby() == None):
            node.getTDefinedby().apply(self)
        temp = node.getLogExpr()
        for item in temp:
            item.apply(self)
        self.outALogDefinition(node)
        
    def inALpRuleLogExpr(self, node):
        self.defaultIn(node)

    def outALpRuleLogExpr(self, node):
        self.defaultOut(node)

    def caseALpRuleLogExpr(self, node):
        self.inALpRuleLogExpr(node)
        if not(node.getHead() == None):
            node.getHead().apply(self)
        if not(node.getTImpliedByLp() == None):
            node.getTImpliedByLp().apply(self)
        if not(node.getBody() == None):
            node.getBody().apply(self)
        if not(node.getEndpoint() == None):
            node.getEndpoint().apply(self)
        self.outALpRuleLogExpr(node)
        
    def inAConstraintLogExpr(self, node):
        self.defaultIn(node)

    def outAConstraintLogExpr(self, node):
        self.defaultOut(node)

    def caseAConstraintLogExpr(self, node):
        self.inAConstraintLogExpr(node)
        if not(node.getTConstraint() == None):
            node.getTConstraint().apply(self)
        if not(node.getExpr() == None):
            node.getExpr().apply(self)
        if not(node.getEndpoint() == None):
            node.getEndpoint().apply(self)
        self.outAConstraintLogExpr(node)
        
    def inAOtherExpressionLogExpr(self, node):
        self.defaultIn(node)

    def outAOtherExpressionLogExpr(self, node):
        self.defaultOut(node)

    def caseAOtherExpressionLogExpr(self, node):
        self.inAOtherExpressionLogExpr(node)
        if not(node.getExpr() == None):
            node.getExpr().apply(self)
        if not(node.getEndpoint() == None):
            node.getEndpoint().apply(self)
        self.outAOtherExpressionLogExpr(node)
        
    def inAImplicationExpr(self, node):
        self.defaultIn(node)

    def outAImplicationExpr(self, node):
        self.defaultOut(node)

    def caseAImplicationExpr(self, node):
        self.inAImplicationExpr(node)
        if not(node.getExpr() == None):
            node.getExpr().apply(self)
        if not(node.getImplyOp() == None):
            node.getImplyOp().apply(self)
        if not(node.getDisjunction() == None):
            node.getDisjunction().apply(self)
        self.outAImplicationExpr(node)
        
    def inADisjunctionExpr(self, node):
        self.defaultIn(node)

    def outADisjunctionExpr(self, node):
        self.defaultOut(node)

    def caseADisjunctionExpr(self, node):
        self.inADisjunctionExpr(node)
        if not(node.getDisjunction() == None):
            node.getDisjunction().apply(self)
        self.outADisjunctionExpr(node)
        
    def inAConjunctionDisjunction(self, node):
        self.defaultIn(node)

    def outAConjunctionDisjunction(self, node):
        self.defaultOut(node)

    def caseAConjunctionDisjunction(self, node):
        self.inAConjunctionDisjunction(node)
        if not(node.getConjunction() == None):
            node.getConjunction().apply(self)
        self.outAConjunctionDisjunction(node)
        
    def inADisjunction(self, node):
        self.defaultIn(node)

    def outADisjunction(self, node):
        self.defaultOut(node)

    def caseADisjunction(self, node):
        self.inADisjunction(node)
        if not(node.getDisjunction() == None):
            node.getDisjunction().apply(self)
        if not(node.getTOr() == None):
            node.getTOr().apply(self)
        if not(node.getConjunction() == None):
            node.getConjunction().apply(self)
        self.outADisjunction(node)
        
    def inASubexprConjunction(self, node):
        self.defaultIn(node)

    def outASubexprConjunction(self, node):
        self.defaultOut(node)

    def caseASubexprConjunction(self, node):
        self.inASubexprConjunction(node)
        if not(node.getSubexpr() == None):
            node.getSubexpr().apply(self)
        self.outASubexprConjunction(node)
        
    def inAConjunction(self, node):
        self.defaultIn(node)

    def outAConjunction(self, node):
        self.defaultOut(node)

    def caseAConjunction(self, node):
        self.inAConjunction(node)
        if not(node.getConjunction() == None):
            node.getConjunction().apply(self)
        if not(node.getTAnd() == None):
            node.getTAnd().apply(self)
        if not(node.getSubexpr() == None):
            node.getSubexpr().apply(self)
        self.outAConjunction(node)
        
    def inANegatedSubexpr(self, node):
        self.defaultIn(node)

    def outANegatedSubexpr(self, node):
        self.defaultOut(node)

    def caseANegatedSubexpr(self, node):
        self.inANegatedSubexpr(node)
        if not(node.getTNot() == None):
            node.getTNot().apply(self)
        if not(node.getSubexpr() == None):
            node.getSubexpr().apply(self)
        self.outANegatedSubexpr(node)
        
    def inASimpleSubexpr(self, node):
        self.defaultIn(node)

    def outASimpleSubexpr(self, node):
        self.defaultOut(node)

    def caseASimpleSubexpr(self, node):
        self.inASimpleSubexpr(node)
        if not(node.getSimple() == None):
            node.getSimple().apply(self)
        self.outASimpleSubexpr(node)
        
    def inAComplexSubexpr(self, node):
        self.defaultIn(node)

    def outAComplexSubexpr(self, node):
        self.defaultOut(node)

    def caseAComplexSubexpr(self, node):
        self.inAComplexSubexpr(node)
        if not(node.getLpar() == None):
            node.getLpar().apply(self)
        if not(node.getExpr() == None):
            node.getExpr().apply(self)
        if not(node.getRpar() == None):
            node.getRpar().apply(self)
        self.outAComplexSubexpr(node)
        
    def inAQuantifiedSubexpr(self, node):
        self.defaultIn(node)

    def outAQuantifiedSubexpr(self, node):
        self.defaultOut(node)

    def caseAQuantifiedSubexpr(self, node):
        self.inAQuantifiedSubexpr(node)
        if not(node.getQuantified() == None):
            node.getQuantified().apply(self)
        self.outAQuantifiedSubexpr(node)
        
    def inAQuantified(self, node):
        self.defaultIn(node)

    def outAQuantified(self, node):
        self.defaultOut(node)

    def caseAQuantified(self, node):
        self.inAQuantified(node)
        if not(node.getQuantifierKey() == None):
            node.getQuantifierKey().apply(self)
        if not(node.getVariablelist() == None):
            node.getVariablelist().apply(self)
        if not(node.getLpar() == None):
            node.getLpar().apply(self)
        if not(node.getExpr() == None):
            node.getExpr().apply(self)
        if not(node.getRpar() == None):
            node.getRpar().apply(self)
        self.outAQuantified(node)
        
    def inAMoleculeSimple(self, node):
        self.defaultIn(node)

    def outAMoleculeSimple(self, node):
        self.defaultOut(node)

    def caseAMoleculeSimple(self, node):
        self.inAMoleculeSimple(node)
        if not(node.getMolecule() == None):
            node.getMolecule().apply(self)
        self.outAMoleculeSimple(node)
        
    def inAComparisonSimple(self, node):
        self.defaultIn(node)

    def outAComparisonSimple(self, node):
        self.defaultOut(node)

    def caseAComparisonSimple(self, node):
        self.inAComparisonSimple(node)
        if not(node.getComparison() == None):
            node.getComparison().apply(self)
        self.outAComparisonSimple(node)
        
    def inAAtomSimple(self, node):
        self.defaultIn(node)

    def outAAtomSimple(self, node):
        self.defaultOut(node)

    def caseAAtomSimple(self, node):
        self.inAAtomSimple(node)
        if not(node.getTerm() == None):
            node.getTerm().apply(self)
        self.outAAtomSimple(node)
        
    def inAConceptMoleculePreferredMolecule(self, node):
        self.defaultIn(node)

    def outAConceptMoleculePreferredMolecule(self, node):
        self.defaultOut(node)

    def caseAConceptMoleculePreferredMolecule(self, node):
        self.inAConceptMoleculePreferredMolecule(node)
        if not(node.getTerm() == None):
            node.getTerm().apply(self)
        if not(node.getAttrSpecification() == None):
            node.getAttrSpecification().apply(self)
        if not(node.getCptOp() == None):
            node.getCptOp().apply(self)
        if not(node.getTermlist() == None):
            node.getTermlist().apply(self)
        self.outAConceptMoleculePreferredMolecule(node)
        
    def inAConceptMoleculeNonpreferredMolecule(self, node):
        self.defaultIn(node)

    def outAConceptMoleculeNonpreferredMolecule(self, node):
        self.defaultOut(node)

    def caseAConceptMoleculeNonpreferredMolecule(self, node):
        self.inAConceptMoleculeNonpreferredMolecule(node)
        if not(node.getTerm() == None):
            node.getTerm().apply(self)
        if not(node.getCptOp() == None):
            node.getCptOp().apply(self)
        if not(node.getTermlist() == None):
            node.getTermlist().apply(self)
        if not(node.getAttrSpecification() == None):
            node.getAttrSpecification().apply(self)
        self.outAConceptMoleculeNonpreferredMolecule(node)
        
    def inAAttributeMoleculeMolecule(self, node):
        self.defaultIn(node)

    def outAAttributeMoleculeMolecule(self, node):
        self.defaultOut(node)

    def caseAAttributeMoleculeMolecule(self, node):
        self.inAAttributeMoleculeMolecule(node)
        if not(node.getTerm() == None):
            node.getTerm().apply(self)
        if not(node.getAttrSpecification() == None):
            node.getAttrSpecification().apply(self)
        self.outAAttributeMoleculeMolecule(node)
        
    def inAAttrSpecification(self, node):
        self.defaultIn(node)

    def outAAttrSpecification(self, node):
        self.defaultOut(node)

    def caseAAttrSpecification(self, node):
        self.inAAttrSpecification(node)
        if not(node.getLbracket() == None):
            node.getLbracket().apply(self)
        if not(node.getAttrRelList() == None):
            node.getAttrRelList().apply(self)
        if not(node.getRbracket() == None):
            node.getRbracket().apply(self)
        self.outAAttrSpecification(node)
        
    def inAAttrRelationAttrRelList(self, node):
        self.defaultIn(node)

    def outAAttrRelationAttrRelList(self, node):
        self.defaultOut(node)

    def caseAAttrRelationAttrRelList(self, node):
        self.inAAttrRelationAttrRelList(node)
        if not(node.getAttrRelation() == None):
            node.getAttrRelation().apply(self)
        self.outAAttrRelationAttrRelList(node)
        
    def inAAttrRelList(self, node):
        self.defaultIn(node)

    def outAAttrRelList(self, node):
        self.defaultOut(node)

    def caseAAttrRelList(self, node):
        self.inAAttrRelList(node)
        if not(node.getAttrRelList() == None):
            node.getAttrRelList().apply(self)
        if not(node.getComma() == None):
            node.getComma().apply(self)
        if not(node.getAttrRelation() == None):
            node.getAttrRelation().apply(self)
        self.outAAttrRelList(node)
        
    def inAAttrDefAttrRelation(self, node):
        self.defaultIn(node)

    def outAAttrDefAttrRelation(self, node):
        self.defaultOut(node)

    def caseAAttrDefAttrRelation(self, node):
        self.inAAttrDefAttrRelation(node)
        if not(node.getTerm() == None):
            node.getTerm().apply(self)
        if not(node.getAttrDefOp() == None):
            node.getAttrDefOp().apply(self)
        if not(node.getTermlist() == None):
            node.getTermlist().apply(self)
        self.outAAttrDefAttrRelation(node)
        
    def inAAttrValAttrRelation(self, node):
        self.defaultIn(node)

    def outAAttrValAttrRelation(self, node):
        self.defaultOut(node)

    def caseAAttrValAttrRelation(self, node):
        self.inAAttrValAttrRelation(node)
        if not(node.getTerm() == None):
            node.getTerm().apply(self)
        if not(node.getTHasvalue() == None):
            node.getTHasvalue().apply(self)
        if not(node.getTermlist() == None):
            node.getTermlist().apply(self)
        self.outAAttrValAttrRelation(node)
        
    def inAComparison(self, node):
        self.defaultIn(node)

    def outAComparison(self, node):
        self.defaultOut(node)

    def caseAComparison(self, node):
        self.inAComparison(node)
        if not(node.getLeft() == None):
            node.getLeft().apply(self)
        if not(node.getCompOp() == None):
            node.getCompOp().apply(self)
        if not(node.getRight() == None):
            node.getRight().apply(self)
        self.outAComparison(node)
        
    def inAParametrizedFunctionsymbol(self, node):
        self.defaultIn(node)

    def outAParametrizedFunctionsymbol(self, node):
        self.defaultOut(node)

    def caseAParametrizedFunctionsymbol(self, node):
        self.inAParametrizedFunctionsymbol(node)
        if not(node.getId() == None):
            node.getId().apply(self)
        if not(node.getLpar() == None):
            node.getLpar().apply(self)
        if not(node.getTerms() == None):
            node.getTerms().apply(self)
        if not(node.getRpar() == None):
            node.getRpar().apply(self)
        self.outAParametrizedFunctionsymbol(node)
        
    def inAMathFunctionsymbol(self, node):
        self.defaultIn(node)

    def outAMathFunctionsymbol(self, node):
        self.defaultOut(node)

    def caseAMathFunctionsymbol(self, node):
        self.inAMathFunctionsymbol(node)
        if not(node.getLpar() == None):
            node.getLpar().apply(self)
        if not(node.getMathexpr() == None):
            node.getMathexpr().apply(self)
        if not(node.getMathOp() == None):
            node.getMathOp().apply(self)
        if not(node.getTerm() == None):
            node.getTerm().apply(self)
        if not(node.getRpar() == None):
            node.getRpar().apply(self)
        self.outAMathFunctionsymbol(node)
        
    def inASubMathexpr(self, node):
        self.defaultIn(node)

    def outASubMathexpr(self, node):
        self.defaultOut(node)

    def caseASubMathexpr(self, node):
        self.inASubMathexpr(node)
        if not(node.getMathexpr() == None):
            node.getMathexpr().apply(self)
        if not(node.getMathOp() == None):
            node.getMathOp().apply(self)
        if not(node.getTerm() == None):
            node.getTerm().apply(self)
        self.outASubMathexpr(node)
        
    def inAMathexpr(self, node):
        self.defaultIn(node)

    def outAMathexpr(self, node):
        self.defaultOut(node)

    def caseAMathexpr(self, node):
        self.inAMathexpr(node)
        if not(node.getTerm() == None):
            node.getTerm().apply(self)
        self.outAMathexpr(node)
        
    def inAGtCompOp(self, node):
        self.defaultIn(node)

    def outAGtCompOp(self, node):
        self.defaultOut(node)

    def caseAGtCompOp(self, node):
        self.inAGtCompOp(node)
        if not(node.getGt() == None):
            node.getGt().apply(self)
        self.outAGtCompOp(node)
        
    def inALtCompOp(self, node):
        self.defaultIn(node)

    def outALtCompOp(self, node):
        self.defaultOut(node)

    def caseALtCompOp(self, node):
        self.inALtCompOp(node)
        if not(node.getLt() == None):
            node.getLt().apply(self)
        self.outALtCompOp(node)
        
    def inAGteCompOp(self, node):
        self.defaultIn(node)

    def outAGteCompOp(self, node):
        self.defaultOut(node)

    def caseAGteCompOp(self, node):
        self.inAGteCompOp(node)
        if not(node.getGte() == None):
            node.getGte().apply(self)
        self.outAGteCompOp(node)
        
    def inALteCompOp(self, node):
        self.defaultIn(node)

    def outALteCompOp(self, node):
        self.defaultOut(node)

    def caseALteCompOp(self, node):
        self.inALteCompOp(node)
        if not(node.getLte() == None):
            node.getLte().apply(self)
        self.outALteCompOp(node)
        
    def inAEqualCompOp(self, node):
        self.defaultIn(node)

    def outAEqualCompOp(self, node):
        self.defaultOut(node)

    def caseAEqualCompOp(self, node):
        self.inAEqualCompOp(node)
        if not(node.getEqual() == None):
            node.getEqual().apply(self)
        self.outAEqualCompOp(node)
        
    def inAUnequalCompOp(self, node):
        self.defaultIn(node)

    def outAUnequalCompOp(self, node):
        self.defaultOut(node)

    def caseAUnequalCompOp(self, node):
        self.inAUnequalCompOp(node)
        if not(node.getUnequal() == None):
            node.getUnequal().apply(self)
        self.outAUnequalCompOp(node)
        
    def inAMemberofCptOp(self, node):
        self.defaultIn(node)

    def outAMemberofCptOp(self, node):
        self.defaultOut(node)

    def caseAMemberofCptOp(self, node):
        self.inAMemberofCptOp(node)
        if not(node.getTMemberof() == None):
            node.getTMemberof().apply(self)
        self.outAMemberofCptOp(node)
        
    def inASubconceptofCptOp(self, node):
        self.defaultIn(node)

    def outASubconceptofCptOp(self, node):
        self.defaultOut(node)

    def caseASubconceptofCptOp(self, node):
        self.inASubconceptofCptOp(node)
        if not(node.getTSubconcept() == None):
            node.getTSubconcept().apply(self)
        self.outASubconceptofCptOp(node)
        
    def inAForallQuantifierKey(self, node):
        self.defaultIn(node)

    def outAForallQuantifierKey(self, node):
        self.defaultOut(node)

    def caseAForallQuantifierKey(self, node):
        self.inAForallQuantifierKey(node)
        if not(node.getTForall() == None):
            node.getTForall().apply(self)
        self.outAForallQuantifierKey(node)
        
    def inAExistsQuantifierKey(self, node):
        self.defaultIn(node)

    def outAExistsQuantifierKey(self, node):
        self.defaultOut(node)

    def caseAExistsQuantifierKey(self, node):
        self.inAExistsQuantifierKey(node)
        if not(node.getTExists() == None):
            node.getTExists().apply(self)
        self.outAExistsQuantifierKey(node)
        
    def inAOftypeAttrDefOp(self, node):
        self.defaultIn(node)

    def outAOftypeAttrDefOp(self, node):
        self.defaultOut(node)

    def caseAOftypeAttrDefOp(self, node):
        self.inAOftypeAttrDefOp(node)
        if not(node.getTOftype() == None):
            node.getTOftype().apply(self)
        self.outAOftypeAttrDefOp(node)
        
    def inAImpliestypeAttrDefOp(self, node):
        self.defaultIn(node)

    def outAImpliestypeAttrDefOp(self, node):
        self.defaultOut(node)

    def caseAImpliestypeAttrDefOp(self, node):
        self.inAImpliestypeAttrDefOp(node)
        if not(node.getTImpliestype() == None):
            node.getTImpliestype().apply(self)
        self.outAImpliestypeAttrDefOp(node)
        
    def inAImpliesImplyOp(self, node):
        self.defaultIn(node)

    def outAImpliesImplyOp(self, node):
        self.defaultOut(node)

    def caseAImpliesImplyOp(self, node):
        self.inAImpliesImplyOp(node)
        if not(node.getTImplies() == None):
            node.getTImplies().apply(self)
        self.outAImpliesImplyOp(node)
        
    def inAImpliedbyImplyOp(self, node):
        self.defaultIn(node)

    def outAImpliedbyImplyOp(self, node):
        self.defaultOut(node)

    def caseAImpliedbyImplyOp(self, node):
        self.inAImpliedbyImplyOp(node)
        if not(node.getTImpliedBy() == None):
            node.getTImpliedBy().apply(self)
        self.outAImpliedbyImplyOp(node)
        
    def inAEquivalentImplyOp(self, node):
        self.defaultIn(node)

    def outAEquivalentImplyOp(self, node):
        self.defaultOut(node)

    def caseAEquivalentImplyOp(self, node):
        self.inAEquivalentImplyOp(node)
        if not(node.getTEquivalent() == None):
            node.getTEquivalent().apply(self)
        self.outAEquivalentImplyOp(node)
        
    def inAAddMathOp(self, node):
        self.defaultIn(node)

    def outAAddMathOp(self, node):
        self.defaultOut(node)

    def caseAAddMathOp(self, node):
        self.inAAddMathOp(node)
        if not(node.getAddOp() == None):
            node.getAddOp().apply(self)
        self.outAAddMathOp(node)
        
    def inASubMathOp(self, node):
        self.defaultIn(node)

    def outASubMathOp(self, node):
        self.defaultOut(node)

    def caseASubMathOp(self, node):
        self.inASubMathOp(node)
        if not(node.getSubOp() == None):
            node.getSubOp().apply(self)
        self.outASubMathOp(node)
        
    def inAMulMathOp(self, node):
        self.defaultIn(node)

    def outAMulMathOp(self, node):
        self.defaultOut(node)

    def caseAMulMathOp(self, node):
        self.inAMulMathOp(node)
        if not(node.getStar() == None):
            node.getStar().apply(self)
        self.outAMulMathOp(node)
        
    def inADivMathOp(self, node):
        self.defaultIn(node)

    def outADivMathOp(self, node):
        self.defaultOut(node)

    def caseADivMathOp(self, node):
        self.inADivMathOp(node)
        if not(node.getDivOp() == None):
            node.getDivOp().apply(self)
        self.outADivMathOp(node)
        
    def inAPrefix(self, node):
        self.defaultIn(node)

    def outAPrefix(self, node):
        self.defaultOut(node)

    def caseAPrefix(self, node):
        self.inAPrefix(node)
        if not(node.getName() == None):
            node.getName().apply(self)
        if not(node.getHash() == None):
            node.getHash().apply(self)
        self.outAPrefix(node)
        
    def inAAnySqname(self, node):
        self.defaultIn(node)

    def outAAnySqname(self, node):
        self.defaultOut(node)

    def caseAAnySqname(self, node):
        self.inAAnySqname(node)
        if not(node.getPrefix() == None):
            node.getPrefix().apply(self)
        if not(node.getName() == None):
            node.getName().apply(self)
        self.outAAnySqname(node)
        
    def inARelationSqname(self, node):
        self.defaultIn(node)

    def outARelationSqname(self, node):
        self.defaultOut(node)

    def caseARelationSqname(self, node):
        self.inARelationSqname(node)
        if not(node.getPrefix() == None):
            node.getPrefix().apply(self)
        if not(node.getTRelation() == None):
            node.getTRelation().apply(self)
        self.outARelationSqname(node)
        
    def inASourceSqname(self, node):
        self.defaultIn(node)

    def outASourceSqname(self, node):
        self.defaultOut(node)

    def caseASourceSqname(self, node):
        self.inASourceSqname(node)
        if not(node.getPrefix() == None):
            node.getPrefix().apply(self)
        if not(node.getTSource() == None):
            node.getTSource().apply(self)
        self.outASourceSqname(node)
        
    def inAIriIri(self, node):
        self.defaultIn(node)

    def outAIriIri(self, node):
        self.defaultOut(node)

    def caseAIriIri(self, node):
        self.inAIriIri(node)
        if not(node.getFullIri() == None):
            node.getFullIri().apply(self)
        self.outAIriIri(node)
        
    def inASqnameIri(self, node):
        self.defaultIn(node)

    def outASqnameIri(self, node):
        self.defaultOut(node)

    def caseASqnameIri(self, node):
        self.inASqnameIri(node)
        if not(node.getSqname() == None):
            node.getSqname().apply(self)
        self.outASqnameIri(node)
        
    def inAIriId(self, node):
        self.defaultIn(node)

    def outAIriId(self, node):
        self.defaultOut(node)

    def caseAIriId(self, node):
        self.inAIriId(node)
        if not(node.getIri() == None):
            node.getIri().apply(self)
        self.outAIriId(node)
        
    def inAAnonymousId(self, node):
        self.defaultIn(node)

    def outAAnonymousId(self, node):
        self.defaultOut(node)

    def caseAAnonymousId(self, node):
        self.inAAnonymousId(node)
        if not(node.getAnonymous() == None):
            node.getAnonymous().apply(self)
        self.outAAnonymousId(node)
        
    def inAUniversalTruthId(self, node):
        self.defaultIn(node)

    def outAUniversalTruthId(self, node):
        self.defaultOut(node)

    def caseAUniversalTruthId(self, node):
        self.inAUniversalTruthId(node)
        if not(node.getTUnivtrue() == None):
            node.getTUnivtrue().apply(self)
        self.outAUniversalTruthId(node)
        
    def inAUniversalFalsehoodId(self, node):
        self.defaultIn(node)

    def outAUniversalFalsehoodId(self, node):
        self.defaultOut(node)

    def caseAUniversalFalsehoodId(self, node):
        self.inAUniversalFalsehoodId(node)
        if not(node.getTUnivfalse() == None):
            node.getTUnivfalse().apply(self)
        self.outAUniversalFalsehoodId(node)
        
    def inAIdIdlist(self, node):
        self.defaultIn(node)

    def outAIdIdlist(self, node):
        self.defaultOut(node)

    def caseAIdIdlist(self, node):
        self.inAIdIdlist(node)
        if not(node.getId() == None):
            node.getId().apply(self)
        self.outAIdIdlist(node)
        
    def inAIdlistIdlist(self, node):
        self.defaultIn(node)

    def outAIdlistIdlist(self, node):
        self.defaultOut(node)

    def caseAIdlistIdlist(self, node):
        self.inAIdlistIdlist(node)
        if not(node.getLbrace() == None):
            node.getLbrace().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        temp = node.getMoreids()
        for item in temp:
            item.apply(self)
        if not(node.getRbrace() == None):
            node.getRbrace().apply(self)
        self.outAIdlistIdlist(node)
        
    def inAMoreids(self, node):
        self.defaultIn(node)

    def outAMoreids(self, node):
        self.defaultOut(node)

    def caseAMoreids(self, node):
        self.inAMoreids(node)
        if not(node.getComma() == None):
            node.getComma().apply(self)
        if not(node.getId() == None):
            node.getId().apply(self)
        self.outAMoreids(node)
        
    def inADatatypeValue(self, node):
        self.defaultIn(node)

    def outADatatypeValue(self, node):
        self.defaultOut(node)

    def caseADatatypeValue(self, node):
        self.inADatatypeValue(node)
        if not(node.getFunctionsymbol() == None):
            node.getFunctionsymbol().apply(self)
        self.outADatatypeValue(node)
        
    def inATermValue(self, node):
        self.defaultIn(node)

    def outATermValue(self, node):
        self.defaultOut(node)

    def caseATermValue(self, node):
        self.inATermValue(node)
        if not(node.getId() == None):
            node.getId().apply(self)
        self.outATermValue(node)
        
    def inANumericValue(self, node):
        self.defaultIn(node)

    def outANumericValue(self, node):
        self.defaultOut(node)

    def caseANumericValue(self, node):
        self.inANumericValue(node)
        if not(node.getNumber() == None):
            node.getNumber().apply(self)
        self.outANumericValue(node)
        
    def inAStringValue(self, node):
        self.defaultIn(node)

    def outAStringValue(self, node):
        self.defaultOut(node)

    def caseAStringValue(self, node):
        self.inAStringValue(node)
        if not(node.getString() == None):
            node.getString().apply(self)
        self.outAStringValue(node)
        
    def inATermValuelist(self, node):
        self.defaultIn(node)

    def outATermValuelist(self, node):
        self.defaultOut(node)

    def caseATermValuelist(self, node):
        self.inATermValuelist(node)
        if not(node.getValue() == None):
            node.getValue().apply(self)
        self.outATermValuelist(node)
        
    def inAValuelistValuelist(self, node):
        self.defaultIn(node)

    def outAValuelistValuelist(self, node):
        self.defaultOut(node)

    def caseAValuelistValuelist(self, node):
        self.inAValuelistValuelist(node)
        if not(node.getLbrace() == None):
            node.getLbrace().apply(self)
        if not(node.getValue() == None):
            node.getValue().apply(self)
        temp = node.getMorevalues()
        for item in temp:
            item.apply(self)
        if not(node.getRbrace() == None):
            node.getRbrace().apply(self)
        self.outAValuelistValuelist(node)
        
    def inAMorevalues(self, node):
        self.defaultIn(node)

    def outAMorevalues(self, node):
        self.defaultOut(node)

    def caseAMorevalues(self, node):
        self.inAMorevalues(node)
        if not(node.getComma() == None):
            node.getComma().apply(self)
        if not(node.getValue() == None):
            node.getValue().apply(self)
        self.outAMorevalues(node)
        
    def inADataTerm(self, node):
        self.defaultIn(node)

    def outADataTerm(self, node):
        self.defaultOut(node)

    def caseADataTerm(self, node):
        self.inADataTerm(node)
        if not(node.getValue() == None):
            node.getValue().apply(self)
        self.outADataTerm(node)
        
    def inAVarTerm(self, node):
        self.defaultIn(node)

    def outAVarTerm(self, node):
        self.defaultOut(node)

    def caseAVarTerm(self, node):
        self.inAVarTerm(node)
        if not(node.getVariable() == None):
            node.getVariable().apply(self)
        self.outAVarTerm(node)
        
    def inANbAnonymousTerm(self, node):
        self.defaultIn(node)

    def outANbAnonymousTerm(self, node):
        self.defaultOut(node)

    def caseANbAnonymousTerm(self, node):
        self.inANbAnonymousTerm(node)
        if not(node.getNbAnonymous() == None):
            node.getNbAnonymous().apply(self)
        self.outANbAnonymousTerm(node)
        
    def inATermTerms(self, node):
        self.defaultIn(node)

    def outATermTerms(self, node):
        self.defaultOut(node)

    def caseATermTerms(self, node):
        self.inATermTerms(node)
        if not(node.getTerm() == None):
            node.getTerm().apply(self)
        self.outATermTerms(node)
        
    def inATerms(self, node):
        self.defaultIn(node)

    def outATerms(self, node):
        self.defaultOut(node)

    def caseATerms(self, node):
        self.inATerms(node)
        if not(node.getTerms() == None):
            node.getTerms().apply(self)
        if not(node.getComma() == None):
            node.getComma().apply(self)
        if not(node.getTerm() == None):
            node.getTerm().apply(self)
        self.outATerms(node)
        
    def inATermTermlist(self, node):
        self.defaultIn(node)

    def outATermTermlist(self, node):
        self.defaultOut(node)

    def caseATermTermlist(self, node):
        self.inATermTermlist(node)
        if not(node.getTerm() == None):
            node.getTerm().apply(self)
        self.outATermTermlist(node)
        
    def inATermlist(self, node):
        self.defaultIn(node)

    def outATermlist(self, node):
        self.defaultOut(node)

    def caseATermlist(self, node):
        self.inATermlist(node)
        if not(node.getLbrace() == None):
            node.getLbrace().apply(self)
        if not(node.getTerms() == None):
            node.getTerms().apply(self)
        if not(node.getRbrace() == None):
            node.getRbrace().apply(self)
        self.outATermlist(node)
        
    def inAVariableVariables(self, node):
        self.defaultIn(node)

    def outAVariableVariables(self, node):
        self.defaultOut(node)

    def caseAVariableVariables(self, node):
        self.inAVariableVariables(node)
        if not(node.getVariable() == None):
            node.getVariable().apply(self)
        self.outAVariableVariables(node)
        
    def inAVariables(self, node):
        self.defaultIn(node)

    def outAVariables(self, node):
        self.defaultOut(node)

    def caseAVariables(self, node):
        self.inAVariables(node)
        if not(node.getVariables() == None):
            node.getVariables().apply(self)
        if not(node.getComma() == None):
            node.getComma().apply(self)
        if not(node.getVariable() == None):
            node.getVariable().apply(self)
        self.outAVariables(node)
        
    def inAVariableVariablelist(self, node):
        self.defaultIn(node)

    def outAVariableVariablelist(self, node):
        self.defaultOut(node)

    def caseAVariableVariablelist(self, node):
        self.inAVariableVariablelist(node)
        if not(node.getVariable() == None):
            node.getVariable().apply(self)
        self.outAVariableVariablelist(node)
        
    def inAVariableListVariablelist(self, node):
        self.defaultIn(node)

    def outAVariableListVariablelist(self, node):
        self.defaultOut(node)

    def caseAVariableListVariablelist(self, node):
        self.inAVariableListVariablelist(node)
        if not(node.getLbrace() == None):
            node.getLbrace().apply(self)
        if not(node.getVariables() == None):
            node.getVariables().apply(self)
        if not(node.getRbrace() == None):
            node.getRbrace().apply(self)
        self.outAVariableListVariablelist(node)
        
    def inAInteger(self, node):
        self.defaultIn(node)

    def outAInteger(self, node):
        self.defaultOut(node)

    def caseAInteger(self, node):
        self.inAInteger(node)
        if not(node.getSubOp() == None):
            node.getSubOp().apply(self)
        if not(node.getPosInteger() == None):
            node.getPosInteger().apply(self)
        self.outAInteger(node)
        
    def inADecimal(self, node):
        self.defaultIn(node)

    def outADecimal(self, node):
        self.defaultOut(node)

    def caseADecimal(self, node):
        self.inADecimal(node)
        if not(node.getSubOp() == None):
            node.getSubOp().apply(self)
        if not(node.getPosDecimal() == None):
            node.getPosDecimal().apply(self)
        self.outADecimal(node)
        
    def inAIntegerNumber(self, node):
        self.defaultIn(node)

    def outAIntegerNumber(self, node):
        self.defaultOut(node)

    def caseAIntegerNumber(self, node):
        self.inAIntegerNumber(node)
        if not(node.getInteger() == None):
            node.getInteger().apply(self)
        self.outAIntegerNumber(node)
        
    def inADecimalNumber(self, node):
        self.defaultIn(node)

    def outADecimalNumber(self, node):
        self.defaultOut(node)

    def caseADecimalNumber(self, node):
        self.inADecimalNumber(node)
        if not(node.getDecimal() == None):
            node.getDecimal().apply(self)
        self.outADecimalNumber(node)
        


class ReversedDepthFirstAdapter(Analysis):
    def inStart(self, node):
        self.defaultIn(node)

    def outStart(self, node):
        self.defaultOut(node)

    def defaultIn(self, node):
        pass

    def defaultOut(self, node):
        pass

    def caseStart(self, node):
        self.inStart(node)
        node.getEOF().apply(self)
        node.getPWsml().apply(self)
        self.outStart(node)

    def inAWsml(self, node):
        self.defaultIn(node)

    def outAWsml(self, node):
        self.defaultOut(node)

    def caseAWsml(self, node):
        self.inAWsml(node)
        temp = node.getDefinition()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getNamespace() != None):
            node.getNamespace().apply(self)
        if (node.getWsmlvariant() != None):
            node.getWsmlvariant().apply(self)
        self.outAWsml(node)
        
    def inAWsmlvariant(self, node):
        self.defaultIn(node)

    def outAWsmlvariant(self, node):
        self.defaultOut(node)

    def caseAWsmlvariant(self, node):
        self.inAWsmlvariant(node)
        if (node.getFullIri() != None):
            node.getFullIri().apply(self)
        if (node.getTWsmlvariant() != None):
            node.getTWsmlvariant().apply(self)
        self.outAWsmlvariant(node)
        
    def inANamespace(self, node):
        self.defaultIn(node)

    def outANamespace(self, node):
        self.defaultOut(node)

    def caseANamespace(self, node):
        self.inANamespace(node)
        if (node.getPrefixdefinitionlist() != None):
            node.getPrefixdefinitionlist().apply(self)
        if (node.getTNamespace() != None):
            node.getTNamespace().apply(self)
        self.outANamespace(node)
        
    def inASharedvardef(self, node):
        self.defaultIn(node)

    def outASharedvardef(self, node):
        self.defaultOut(node)

    def caseASharedvardef(self, node):
        self.inASharedvardef(node)
        if (node.getVariablelist() != None):
            node.getVariablelist().apply(self)
        if (node.getTSharedvariable() != None):
            node.getTSharedvariable().apply(self)
        self.outASharedvardef(node)
        
    def inACapability(self, node):
        self.defaultIn(node)

    def outACapability(self, node):
        self.defaultOut(node)

    def caseACapability(self, node):
        self.inACapability(node)
        temp = node.getPrePostAssOrEff()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getSharedvardef() != None):
            node.getSharedvardef().apply(self)
        temp = node.getHeader()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTCapability() != None):
            node.getTCapability().apply(self)
        self.outACapability(node)
        
    def inAGoal(self, node):
        self.defaultIn(node)

    def outAGoal(self, node):
        self.defaultOut(node)

    def caseAGoal(self, node):
        self.inAGoal(node)
        temp = node.getInterfaces()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getCapability() != None):
            node.getCapability().apply(self)
        temp = node.getHeader()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTGoal() != None):
            node.getTGoal().apply(self)
        self.outAGoal(node)
        
    def inAWebservice(self, node):
        self.defaultIn(node)

    def outAWebservice(self, node):
        self.defaultOut(node)

    def caseAWebservice(self, node):
        self.inAWebservice(node)
        temp = node.getInterfaces()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getCapability() != None):
            node.getCapability().apply(self)
        temp = node.getHeader()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTWebservice() != None):
            node.getTWebservice().apply(self)
        self.outAWebservice(node)
        
    def inAGoalDefinition(self, node):
        self.defaultIn(node)

    def outAGoalDefinition(self, node):
        self.defaultOut(node)

    def caseAGoalDefinition(self, node):
        self.inAGoalDefinition(node)
        if (node.getGoal() != None):
            node.getGoal().apply(self)
        self.outAGoalDefinition(node)
        
    def inAOntologyDefinition(self, node):
        self.defaultIn(node)

    def outAOntologyDefinition(self, node):
        self.defaultOut(node)

    def caseAOntologyDefinition(self, node):
        self.inAOntologyDefinition(node)
        if (node.getOntology() != None):
            node.getOntology().apply(self)
        self.outAOntologyDefinition(node)
        
    def inAWebserviceDefinition(self, node):
        self.defaultIn(node)

    def outAWebserviceDefinition(self, node):
        self.defaultOut(node)

    def caseAWebserviceDefinition(self, node):
        self.inAWebserviceDefinition(node)
        if (node.getWebservice() != None):
            node.getWebservice().apply(self)
        self.outAWebserviceDefinition(node)
        
    def inAMediatorDefinition(self, node):
        self.defaultIn(node)

    def outAMediatorDefinition(self, node):
        self.defaultOut(node)

    def caseAMediatorDefinition(self, node):
        self.inAMediatorDefinition(node)
        if (node.getMediator() != None):
            node.getMediator().apply(self)
        self.outAMediatorDefinition(node)
        
    def inADefaultnsPrefixdefinitionlist(self, node):
        self.defaultIn(node)

    def outADefaultnsPrefixdefinitionlist(self, node):
        self.defaultOut(node)

    def caseADefaultnsPrefixdefinitionlist(self, node):
        self.inADefaultnsPrefixdefinitionlist(node)
        if (node.getFullIri() != None):
            node.getFullIri().apply(self)
        self.outADefaultnsPrefixdefinitionlist(node)
        
    def inAPrefixdefinitionlistPrefixdefinitionlist(self, node):
        self.defaultIn(node)

    def outAPrefixdefinitionlistPrefixdefinitionlist(self, node):
        self.defaultOut(node)

    def caseAPrefixdefinitionlistPrefixdefinitionlist(self, node):
        self.inAPrefixdefinitionlistPrefixdefinitionlist(node)
        if (node.getRbrace() != None):
            node.getRbrace().apply(self)
        temp = node.getMoreprefixdefinitions()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getPrefixdefinition() != None):
            node.getPrefixdefinition().apply(self)
        if (node.getLbrace() != None):
            node.getLbrace().apply(self)
        self.outAPrefixdefinitionlistPrefixdefinitionlist(node)
        
    def inANamespacedefPrefixdefinition(self, node):
        self.defaultIn(node)

    def outANamespacedefPrefixdefinition(self, node):
        self.defaultOut(node)

    def caseANamespacedefPrefixdefinition(self, node):
        self.inANamespacedefPrefixdefinition(node)
        if (node.getFullIri() != None):
            node.getFullIri().apply(self)
        if (node.getName() != None):
            node.getName().apply(self)
        self.outANamespacedefPrefixdefinition(node)
        
    def inADefaultPrefixdefinition(self, node):
        self.defaultIn(node)

    def outADefaultPrefixdefinition(self, node):
        self.defaultOut(node)

    def caseADefaultPrefixdefinition(self, node):
        self.inADefaultPrefixdefinition(node)
        if (node.getFullIri() != None):
            node.getFullIri().apply(self)
        self.outADefaultPrefixdefinition(node)
        
    def inAMoreprefixdefinitions(self, node):
        self.defaultIn(node)

    def outAMoreprefixdefinitions(self, node):
        self.defaultOut(node)

    def caseAMoreprefixdefinitions(self, node):
        self.inAMoreprefixdefinitions(node)
        if (node.getPrefixdefinition() != None):
            node.getPrefixdefinition().apply(self)
        if (node.getComma() != None):
            node.getComma().apply(self)
        self.outAMoreprefixdefinitions(node)
        
    def inANfpHeader(self, node):
        self.defaultIn(node)

    def outANfpHeader(self, node):
        self.defaultOut(node)

    def caseANfpHeader(self, node):
        self.inANfpHeader(node)
        if (node.getNfp() != None):
            node.getNfp().apply(self)
        self.outANfpHeader(node)
        
    def inAUsesmediatorHeader(self, node):
        self.defaultIn(node)

    def outAUsesmediatorHeader(self, node):
        self.defaultOut(node)

    def caseAUsesmediatorHeader(self, node):
        self.inAUsesmediatorHeader(node)
        if (node.getUsesmediator() != None):
            node.getUsesmediator().apply(self)
        self.outAUsesmediatorHeader(node)
        
    def inAImportsontologyHeader(self, node):
        self.defaultIn(node)

    def outAImportsontologyHeader(self, node):
        self.defaultOut(node)

    def caseAImportsontologyHeader(self, node):
        self.inAImportsontologyHeader(node)
        if (node.getImportsontology() != None):
            node.getImportsontology().apply(self)
        self.outAImportsontologyHeader(node)
        
    def inAUsesmediator(self, node):
        self.defaultIn(node)

    def outAUsesmediator(self, node):
        self.defaultOut(node)

    def caseAUsesmediator(self, node):
        self.inAUsesmediator(node)
        if (node.getIdlist() != None):
            node.getIdlist().apply(self)
        if (node.getTUsemediator() != None):
            node.getTUsemediator().apply(self)
        self.outAUsesmediator(node)
        
    def inAImportsontology(self, node):
        self.defaultIn(node)

    def outAImportsontology(self, node):
        self.defaultOut(node)

    def caseAImportsontology(self, node):
        self.inAImportsontology(node)
        if (node.getIdlist() != None):
            node.getIdlist().apply(self)
        if (node.getTImportontology() != None):
            node.getTImportontology().apply(self)
        self.outAImportsontology(node)
        
    def inANfp(self, node):
        self.defaultIn(node)

    def outANfp(self, node):
        self.defaultOut(node)

    def caseANfp(self, node):
        self.inANfp(node)
        if (node.getTEndnfp() != None):
            node.getTEndnfp().apply(self)
        temp = node.getAttributevalue()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getTNfp() != None):
            node.getTNfp().apply(self)
        self.outANfp(node)
        
    def inAOomediatorMediator(self, node):
        self.defaultIn(node)

    def outAOomediatorMediator(self, node):
        self.defaultOut(node)

    def caseAOomediatorMediator(self, node):
        self.inAOomediatorMediator(node)
        if (node.getOomediator() != None):
            node.getOomediator().apply(self)
        self.outAOomediatorMediator(node)
        
    def inAGgmediatorMediator(self, node):
        self.defaultIn(node)

    def outAGgmediatorMediator(self, node):
        self.defaultOut(node)

    def caseAGgmediatorMediator(self, node):
        self.inAGgmediatorMediator(node)
        if (node.getGgmediator() != None):
            node.getGgmediator().apply(self)
        self.outAGgmediatorMediator(node)
        
    def inAWgmediatorMediator(self, node):
        self.defaultIn(node)

    def outAWgmediatorMediator(self, node):
        self.defaultOut(node)

    def caseAWgmediatorMediator(self, node):
        self.inAWgmediatorMediator(node)
        if (node.getWgmediator() != None):
            node.getWgmediator().apply(self)
        self.outAWgmediatorMediator(node)
        
    def inAWwmediatorMediator(self, node):
        self.defaultIn(node)

    def outAWwmediatorMediator(self, node):
        self.defaultOut(node)

    def caseAWwmediatorMediator(self, node):
        self.inAWwmediatorMediator(node)
        if (node.getWwmediator() != None):
            node.getWwmediator().apply(self)
        self.outAWwmediatorMediator(node)
        
    def inAOomediator(self, node):
        self.defaultIn(node)

    def outAOomediator(self, node):
        self.defaultOut(node)

    def caseAOomediator(self, node):
        self.inAOomediator(node)
        if (node.getUseService() != None):
            node.getUseService().apply(self)
        if (node.getTarget() != None):
            node.getTarget().apply(self)
        if (node.getSources() != None):
            node.getSources().apply(self)
        if (node.getImportsontology() != None):
            node.getImportsontology().apply(self)
        if (node.getNfp() != None):
            node.getNfp().apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTOomediator() != None):
            node.getTOomediator().apply(self)
        self.outAOomediator(node)
        
    def inAGgmediator(self, node):
        self.defaultIn(node)

    def outAGgmediator(self, node):
        self.defaultOut(node)

    def caseAGgmediator(self, node):
        self.inAGgmediator(node)
        if (node.getUseService() != None):
            node.getUseService().apply(self)
        if (node.getTarget() != None):
            node.getTarget().apply(self)
        if (node.getSources() != None):
            node.getSources().apply(self)
        temp = node.getHeader()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTGgmediator() != None):
            node.getTGgmediator().apply(self)
        self.outAGgmediator(node)
        
    def inAWgmediator(self, node):
        self.defaultIn(node)

    def outAWgmediator(self, node):
        self.defaultOut(node)

    def caseAWgmediator(self, node):
        self.inAWgmediator(node)
        if (node.getUseService() != None):
            node.getUseService().apply(self)
        if (node.getTarget() != None):
            node.getTarget().apply(self)
        if (node.getSource() != None):
            node.getSource().apply(self)
        temp = node.getHeader()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTWgmediator() != None):
            node.getTWgmediator().apply(self)
        self.outAWgmediator(node)
        
    def inAWwmediator(self, node):
        self.defaultIn(node)

    def outAWwmediator(self, node):
        self.defaultOut(node)

    def caseAWwmediator(self, node):
        self.inAWwmediator(node)
        if (node.getUseService() != None):
            node.getUseService().apply(self)
        if (node.getTarget() != None):
            node.getTarget().apply(self)
        if (node.getSource() != None):
            node.getSource().apply(self)
        temp = node.getHeader()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTWwmediator() != None):
            node.getTWwmediator().apply(self)
        self.outAWwmediator(node)
        
    def inAUseService(self, node):
        self.defaultIn(node)

    def outAUseService(self, node):
        self.defaultOut(node)

    def caseAUseService(self, node):
        self.inAUseService(node)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTUseservice() != None):
            node.getTUseservice().apply(self)
        self.outAUseService(node)
        
    def inASource(self, node):
        self.defaultIn(node)

    def outASource(self, node):
        self.defaultOut(node)

    def caseASource(self, node):
        self.inASource(node)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTSource() != None):
            node.getTSource().apply(self)
        self.outASource(node)
        
    def inAMsources(self, node):
        self.defaultIn(node)

    def outAMsources(self, node):
        self.defaultOut(node)

    def caseAMsources(self, node):
        self.inAMsources(node)
        if (node.getRbrace() != None):
            node.getRbrace().apply(self)
        temp = node.getMoreids()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getLbrace() != None):
            node.getLbrace().apply(self)
        if (node.getTSource() != None):
            node.getTSource().apply(self)
        self.outAMsources(node)
        
    def inASingleSources(self, node):
        self.defaultIn(node)

    def outASingleSources(self, node):
        self.defaultOut(node)

    def caseASingleSources(self, node):
        self.inASingleSources(node)
        if (node.getSource() != None):
            node.getSource().apply(self)
        self.outASingleSources(node)
        
    def inAMultipleSources(self, node):
        self.defaultIn(node)

    def outAMultipleSources(self, node):
        self.defaultOut(node)

    def caseAMultipleSources(self, node):
        self.inAMultipleSources(node)
        if (node.getMsources() != None):
            node.getMsources().apply(self)
        self.outAMultipleSources(node)
        
    def inATarget(self, node):
        self.defaultIn(node)

    def outATarget(self, node):
        self.defaultOut(node)

    def caseATarget(self, node):
        self.inATarget(node)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTTarget() != None):
            node.getTTarget().apply(self)
        self.outATarget(node)
        
    def inAPreconditionPrePostAssOrEff(self, node):
        self.defaultIn(node)

    def outAPreconditionPrePostAssOrEff(self, node):
        self.defaultOut(node)

    def caseAPreconditionPrePostAssOrEff(self, node):
        self.inAPreconditionPrePostAssOrEff(node)
        if (node.getAxiomdefinition() != None):
            node.getAxiomdefinition().apply(self)
        if (node.getTPrecondition() != None):
            node.getTPrecondition().apply(self)
        self.outAPreconditionPrePostAssOrEff(node)
        
    def inAPostconditionPrePostAssOrEff(self, node):
        self.defaultIn(node)

    def outAPostconditionPrePostAssOrEff(self, node):
        self.defaultOut(node)

    def caseAPostconditionPrePostAssOrEff(self, node):
        self.inAPostconditionPrePostAssOrEff(node)
        if (node.getAxiomdefinition() != None):
            node.getAxiomdefinition().apply(self)
        if (node.getTPostcondition() != None):
            node.getTPostcondition().apply(self)
        self.outAPostconditionPrePostAssOrEff(node)
        
    def inAAssumptionPrePostAssOrEff(self, node):
        self.defaultIn(node)

    def outAAssumptionPrePostAssOrEff(self, node):
        self.defaultOut(node)

    def caseAAssumptionPrePostAssOrEff(self, node):
        self.inAAssumptionPrePostAssOrEff(node)
        if (node.getAxiomdefinition() != None):
            node.getAxiomdefinition().apply(self)
        if (node.getTAssumption() != None):
            node.getTAssumption().apply(self)
        self.outAAssumptionPrePostAssOrEff(node)
        
    def inAEffectPrePostAssOrEff(self, node):
        self.defaultIn(node)

    def outAEffectPrePostAssOrEff(self, node):
        self.defaultOut(node)

    def caseAEffectPrePostAssOrEff(self, node):
        self.inAEffectPrePostAssOrEff(node)
        if (node.getAxiomdefinition() != None):
            node.getAxiomdefinition().apply(self)
        if (node.getTEffect() != None):
            node.getTEffect().apply(self)
        self.outAEffectPrePostAssOrEff(node)
        
    def inAMinterfaces(self, node):
        self.defaultIn(node)

    def outAMinterfaces(self, node):
        self.defaultOut(node)

    def caseAMinterfaces(self, node):
        self.inAMinterfaces(node)
        if (node.getRbrace() != None):
            node.getRbrace().apply(self)
        temp = node.getMoreids()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getLbrace() != None):
            node.getLbrace().apply(self)
        if (node.getTInterface() != None):
            node.getTInterface().apply(self)
        self.outAMinterfaces(node)
        
    def inAInterface(self, node):
        self.defaultIn(node)

    def outAInterface(self, node):
        self.defaultOut(node)

    def caseAInterface(self, node):
        self.inAInterface(node)
        if (node.getOrchestration() != None):
            node.getOrchestration().apply(self)
        if (node.getChoreography() != None):
            node.getChoreography().apply(self)
        temp = node.getHeader()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTInterface() != None):
            node.getTInterface().apply(self)
        self.outAInterface(node)
        
    def inASingleInterfaces(self, node):
        self.defaultIn(node)

    def outASingleInterfaces(self, node):
        self.defaultOut(node)

    def caseASingleInterfaces(self, node):
        self.inASingleInterfaces(node)
        if (node.getInterface() != None):
            node.getInterface().apply(self)
        self.outASingleInterfaces(node)
        
    def inAMultipleInterfaces(self, node):
        self.defaultIn(node)

    def outAMultipleInterfaces(self, node):
        self.defaultOut(node)

    def caseAMultipleInterfaces(self, node):
        self.inAMultipleInterfaces(node)
        if (node.getMinterfaces() != None):
            node.getMinterfaces().apply(self)
        self.outAMultipleInterfaces(node)
        
    def inAChoreography(self, node):
        self.defaultIn(node)

    def outAChoreography(self, node):
        self.defaultOut(node)

    def caseAChoreography(self, node):
        self.inAChoreography(node)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTChoreography() != None):
            node.getTChoreography().apply(self)
        self.outAChoreography(node)
        
    def inAOrchestration(self, node):
        self.defaultIn(node)

    def outAOrchestration(self, node):
        self.defaultOut(node)

    def caseAOrchestration(self, node):
        self.inAOrchestration(node)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTOrchestration() != None):
            node.getTOrchestration().apply(self)
        self.outAOrchestration(node)
        
    def inAOntology(self, node):
        self.defaultIn(node)

    def outAOntology(self, node):
        self.defaultOut(node)

    def caseAOntology(self, node):
        self.inAOntology(node)
        temp = node.getOntologyElement()
        temp.reverse()
        for item in temp:
            item.apply(self)
        temp = node.getHeader()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTOntology() != None):
            node.getTOntology().apply(self)
        self.outAOntology(node)
        
    def inAConceptOntologyElement(self, node):
        self.defaultIn(node)

    def outAConceptOntologyElement(self, node):
        self.defaultOut(node)

    def caseAConceptOntologyElement(self, node):
        self.inAConceptOntologyElement(node)
        if (node.getConcept() != None):
            node.getConcept().apply(self)
        self.outAConceptOntologyElement(node)
        
    def inAInstanceOntologyElement(self, node):
        self.defaultIn(node)

    def outAInstanceOntologyElement(self, node):
        self.defaultOut(node)

    def caseAInstanceOntologyElement(self, node):
        self.inAInstanceOntologyElement(node)
        if (node.getInstance() != None):
            node.getInstance().apply(self)
        self.outAInstanceOntologyElement(node)
        
    def inARelationOntologyElement(self, node):
        self.defaultIn(node)

    def outARelationOntologyElement(self, node):
        self.defaultOut(node)

    def caseARelationOntologyElement(self, node):
        self.inARelationOntologyElement(node)
        if (node.getRelation() != None):
            node.getRelation().apply(self)
        self.outARelationOntologyElement(node)
        
    def inARelationinstanceOntologyElement(self, node):
        self.defaultIn(node)

    def outARelationinstanceOntologyElement(self, node):
        self.defaultOut(node)

    def caseARelationinstanceOntologyElement(self, node):
        self.inARelationinstanceOntologyElement(node)
        if (node.getRelationinstance() != None):
            node.getRelationinstance().apply(self)
        self.outARelationinstanceOntologyElement(node)
        
    def inAAxiomOntologyElement(self, node):
        self.defaultIn(node)

    def outAAxiomOntologyElement(self, node):
        self.defaultOut(node)

    def caseAAxiomOntologyElement(self, node):
        self.inAAxiomOntologyElement(node)
        if (node.getAxiom() != None):
            node.getAxiom().apply(self)
        self.outAAxiomOntologyElement(node)
        
    def inAConcept(self, node):
        self.defaultIn(node)

    def outAConcept(self, node):
        self.defaultOut(node)

    def caseAConcept(self, node):
        self.inAConcept(node)
        temp = node.getAttribute()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getNfp() != None):
            node.getNfp().apply(self)
        if (node.getSuperconcept() != None):
            node.getSuperconcept().apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTConcept() != None):
            node.getTConcept().apply(self)
        self.outAConcept(node)
        
    def inASuperconcept(self, node):
        self.defaultIn(node)

    def outASuperconcept(self, node):
        self.defaultOut(node)

    def caseASuperconcept(self, node):
        self.inASuperconcept(node)
        if (node.getIdlist() != None):
            node.getIdlist().apply(self)
        if (node.getTSubconcept() != None):
            node.getTSubconcept().apply(self)
        self.outASuperconcept(node)
        
    def inAOpenWorldAttType(self, node):
        self.defaultIn(node)

    def outAOpenWorldAttType(self, node):
        self.defaultOut(node)

    def caseAOpenWorldAttType(self, node):
        self.inAOpenWorldAttType(node)
        if (node.getTOftype() != None):
            node.getTOftype().apply(self)
        self.outAOpenWorldAttType(node)
        
    def inAClosedWorldAttType(self, node):
        self.defaultIn(node)

    def outAClosedWorldAttType(self, node):
        self.defaultOut(node)

    def caseAClosedWorldAttType(self, node):
        self.inAClosedWorldAttType(node)
        if (node.getTImpliestype() != None):
            node.getTImpliestype().apply(self)
        self.outAClosedWorldAttType(node)
        
    def inAAttribute(self, node):
        self.defaultIn(node)

    def outAAttribute(self, node):
        self.defaultOut(node)

    def caseAAttribute(self, node):
        self.inAAttribute(node)
        if (node.getNfp() != None):
            node.getNfp().apply(self)
        if (node.getIdlist() != None):
            node.getIdlist().apply(self)
        if (node.getCardinality() != None):
            node.getCardinality().apply(self)
        if (node.getAttType() != None):
            node.getAttType().apply(self)
        temp = node.getAttributefeature()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        self.outAAttribute(node)
        
    def inACardinality(self, node):
        self.defaultIn(node)

    def outACardinality(self, node):
        self.defaultOut(node)

    def caseACardinality(self, node):
        self.inACardinality(node)
        if (node.getRpar() != None):
            node.getRpar().apply(self)
        if (node.getCardinalityNumber() != None):
            node.getCardinalityNumber().apply(self)
        if (node.getPosInteger() != None):
            node.getPosInteger().apply(self)
        if (node.getLpar() != None):
            node.getLpar().apply(self)
        self.outACardinality(node)
        
    def inAFiniteCardinalityCardinalityNumber(self, node):
        self.defaultIn(node)

    def outAFiniteCardinalityCardinalityNumber(self, node):
        self.defaultOut(node)

    def caseAFiniteCardinalityCardinalityNumber(self, node):
        self.inAFiniteCardinalityCardinalityNumber(node)
        if (node.getPosInteger() != None):
            node.getPosInteger().apply(self)
        self.outAFiniteCardinalityCardinalityNumber(node)
        
    def inAInfiniteCardinalityCardinalityNumber(self, node):
        self.defaultIn(node)

    def outAInfiniteCardinalityCardinalityNumber(self, node):
        self.defaultOut(node)

    def caseAInfiniteCardinalityCardinalityNumber(self, node):
        self.inAInfiniteCardinalityCardinalityNumber(node)
        if (node.getStar() != None):
            node.getStar().apply(self)
        self.outAInfiniteCardinalityCardinalityNumber(node)
        
    def inATransitiveAttributefeature(self, node):
        self.defaultIn(node)

    def outATransitiveAttributefeature(self, node):
        self.defaultOut(node)

    def caseATransitiveAttributefeature(self, node):
        self.inATransitiveAttributefeature(node)
        if (node.getTTransitive() != None):
            node.getTTransitive().apply(self)
        self.outATransitiveAttributefeature(node)
        
    def inASymmetricAttributefeature(self, node):
        self.defaultIn(node)

    def outASymmetricAttributefeature(self, node):
        self.defaultOut(node)

    def caseASymmetricAttributefeature(self, node):
        self.inASymmetricAttributefeature(node)
        if (node.getTSymmetric() != None):
            node.getTSymmetric().apply(self)
        self.outASymmetricAttributefeature(node)
        
    def inAInverseAttributefeature(self, node):
        self.defaultIn(node)

    def outAInverseAttributefeature(self, node):
        self.defaultOut(node)

    def caseAInverseAttributefeature(self, node):
        self.inAInverseAttributefeature(node)
        if (node.getRpar() != None):
            node.getRpar().apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getLpar() != None):
            node.getLpar().apply(self)
        if (node.getTInverseof() != None):
            node.getTInverseof().apply(self)
        self.outAInverseAttributefeature(node)
        
    def inAReflexiveAttributefeature(self, node):
        self.defaultIn(node)

    def outAReflexiveAttributefeature(self, node):
        self.defaultOut(node)

    def caseAReflexiveAttributefeature(self, node):
        self.inAReflexiveAttributefeature(node)
        if (node.getTReflexive() != None):
            node.getTReflexive().apply(self)
        self.outAReflexiveAttributefeature(node)
        
    def inAInstance(self, node):
        self.defaultIn(node)

    def outAInstance(self, node):
        self.defaultOut(node)

    def caseAInstance(self, node):
        self.inAInstance(node)
        temp = node.getAttributevalue()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getNfp() != None):
            node.getNfp().apply(self)
        if (node.getMemberof() != None):
            node.getMemberof().apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTInstance() != None):
            node.getTInstance().apply(self)
        self.outAInstance(node)
        
    def inAMemberof(self, node):
        self.defaultIn(node)

    def outAMemberof(self, node):
        self.defaultOut(node)

    def caseAMemberof(self, node):
        self.inAMemberof(node)
        if (node.getIdlist() != None):
            node.getIdlist().apply(self)
        if (node.getTMemberof() != None):
            node.getTMemberof().apply(self)
        self.outAMemberof(node)
        
    def inAAttributevalue(self, node):
        self.defaultIn(node)

    def outAAttributevalue(self, node):
        self.defaultOut(node)

    def caseAAttributevalue(self, node):
        self.inAAttributevalue(node)
        if (node.getValuelist() != None):
            node.getValuelist().apply(self)
        if (node.getTHasvalue() != None):
            node.getTHasvalue().apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        self.outAAttributevalue(node)
        
    def inARelation(self, node):
        self.defaultIn(node)

    def outARelation(self, node):
        self.defaultOut(node)

    def caseARelation(self, node):
        self.inARelation(node)
        if (node.getNfp() != None):
            node.getNfp().apply(self)
        if (node.getSuperrelation() != None):
            node.getSuperrelation().apply(self)
        if (node.getParamtyping() != None):
            node.getParamtyping().apply(self)
        if (node.getArity() != None):
            node.getArity().apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getTRelation() != None):
            node.getTRelation().apply(self)
        self.outARelation(node)
        
    def inAParamtype(self, node):
        self.defaultIn(node)

    def outAParamtype(self, node):
        self.defaultOut(node)

    def caseAParamtype(self, node):
        self.inAParamtype(node)
        if (node.getIdlist() != None):
            node.getIdlist().apply(self)
        if (node.getAttType() != None):
            node.getAttType().apply(self)
        self.outAParamtype(node)
        
    def inAParamtyping(self, node):
        self.defaultIn(node)

    def outAParamtyping(self, node):
        self.defaultOut(node)

    def caseAParamtyping(self, node):
        self.inAParamtyping(node)
        if (node.getRpar() != None):
            node.getRpar().apply(self)
        temp = node.getMoreparamtype()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getParamtype() != None):
            node.getParamtype().apply(self)
        if (node.getLpar() != None):
            node.getLpar().apply(self)
        self.outAParamtyping(node)
        
    def inAMoreparamtype(self, node):
        self.defaultIn(node)

    def outAMoreparamtype(self, node):
        self.defaultOut(node)

    def caseAMoreparamtype(self, node):
        self.inAMoreparamtype(node)
        if (node.getParamtype() != None):
            node.getParamtype().apply(self)
        if (node.getComma() != None):
            node.getComma().apply(self)
        self.outAMoreparamtype(node)
        
    def inASuperrelation(self, node):
        self.defaultIn(node)

    def outASuperrelation(self, node):
        self.defaultOut(node)

    def caseASuperrelation(self, node):
        self.inASuperrelation(node)
        if (node.getIdlist() != None):
            node.getIdlist().apply(self)
        if (node.getTSubrelation() != None):
            node.getTSubrelation().apply(self)
        self.outASuperrelation(node)
        
    def inAArity(self, node):
        self.defaultIn(node)

    def outAArity(self, node):
        self.defaultOut(node)

    def caseAArity(self, node):
        self.inAArity(node)
        if (node.getPosInteger() != None):
            node.getPosInteger().apply(self)
        if (node.getDivOp() != None):
            node.getDivOp().apply(self)
        self.outAArity(node)
        
    def inARelationinstance(self, node):
        self.defaultIn(node)

    def outARelationinstance(self, node):
        self.defaultOut(node)

    def caseARelationinstance(self, node):
        self.inARelationinstance(node)
        if (node.getNfp() != None):
            node.getNfp().apply(self)
        if (node.getRpar() != None):
            node.getRpar().apply(self)
        temp = node.getMorevalues()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getValue() != None):
            node.getValue().apply(self)
        if (node.getLpar() != None):
            node.getLpar().apply(self)
        if (node.getRelation() != None):
            node.getRelation().apply(self)
        if (node.getName() != None):
            node.getName().apply(self)
        if (node.getTRelationInstance() != None):
            node.getTRelationInstance().apply(self)
        self.outARelationinstance(node)
        
    def inAAxiom(self, node):
        self.defaultIn(node)

    def outAAxiom(self, node):
        self.defaultOut(node)

    def caseAAxiom(self, node):
        self.inAAxiom(node)
        if (node.getAxiomdefinition() != None):
            node.getAxiomdefinition().apply(self)
        if (node.getTAxiom() != None):
            node.getTAxiom().apply(self)
        self.outAAxiom(node)
        
    def inAUseAxiomAxiomdefinition(self, node):
        self.defaultIn(node)

    def outAUseAxiomAxiomdefinition(self, node):
        self.defaultOut(node)

    def caseAUseAxiomAxiomdefinition(self, node):
        self.inAUseAxiomAxiomdefinition(node)
        if (node.getId() != None):
            node.getId().apply(self)
        self.outAUseAxiomAxiomdefinition(node)
        
    def inANfpAxiomAxiomdefinition(self, node):
        self.defaultIn(node)

    def outANfpAxiomAxiomdefinition(self, node):
        self.defaultOut(node)

    def caseANfpAxiomAxiomdefinition(self, node):
        self.inANfpAxiomAxiomdefinition(node)
        if (node.getNfp() != None):
            node.getNfp().apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        self.outANfpAxiomAxiomdefinition(node)
        
    def inADefinedAxiomAxiomdefinition(self, node):
        self.defaultIn(node)

    def outADefinedAxiomAxiomdefinition(self, node):
        self.defaultOut(node)

    def caseADefinedAxiomAxiomdefinition(self, node):
        self.inADefinedAxiomAxiomdefinition(node)
        if (node.getLogDefinition() != None):
            node.getLogDefinition().apply(self)
        if (node.getNfp() != None):
            node.getNfp().apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        self.outADefinedAxiomAxiomdefinition(node)
        
    def inALogDefinition(self, node):
        self.defaultIn(node)

    def outALogDefinition(self, node):
        self.defaultOut(node)

    def caseALogDefinition(self, node):
        self.inALogDefinition(node)
        temp = node.getLogExpr()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getTDefinedby() != None):
            node.getTDefinedby().apply(self)
        self.outALogDefinition(node)
        
    def inALpRuleLogExpr(self, node):
        self.defaultIn(node)

    def outALpRuleLogExpr(self, node):
        self.defaultOut(node)

    def caseALpRuleLogExpr(self, node):
        self.inALpRuleLogExpr(node)
        if (node.getEndpoint() != None):
            node.getEndpoint().apply(self)
        if (node.getBody() != None):
            node.getBody().apply(self)
        if (node.getTImpliedByLp() != None):
            node.getTImpliedByLp().apply(self)
        if (node.getHead() != None):
            node.getHead().apply(self)
        self.outALpRuleLogExpr(node)
        
    def inAConstraintLogExpr(self, node):
        self.defaultIn(node)

    def outAConstraintLogExpr(self, node):
        self.defaultOut(node)

    def caseAConstraintLogExpr(self, node):
        self.inAConstraintLogExpr(node)
        if (node.getEndpoint() != None):
            node.getEndpoint().apply(self)
        if (node.getExpr() != None):
            node.getExpr().apply(self)
        if (node.getTConstraint() != None):
            node.getTConstraint().apply(self)
        self.outAConstraintLogExpr(node)
        
    def inAOtherExpressionLogExpr(self, node):
        self.defaultIn(node)

    def outAOtherExpressionLogExpr(self, node):
        self.defaultOut(node)

    def caseAOtherExpressionLogExpr(self, node):
        self.inAOtherExpressionLogExpr(node)
        if (node.getEndpoint() != None):
            node.getEndpoint().apply(self)
        if (node.getExpr() != None):
            node.getExpr().apply(self)
        self.outAOtherExpressionLogExpr(node)
        
    def inAImplicationExpr(self, node):
        self.defaultIn(node)

    def outAImplicationExpr(self, node):
        self.defaultOut(node)

    def caseAImplicationExpr(self, node):
        self.inAImplicationExpr(node)
        if (node.getDisjunction() != None):
            node.getDisjunction().apply(self)
        if (node.getImplyOp() != None):
            node.getImplyOp().apply(self)
        if (node.getExpr() != None):
            node.getExpr().apply(self)
        self.outAImplicationExpr(node)
        
    def inADisjunctionExpr(self, node):
        self.defaultIn(node)

    def outADisjunctionExpr(self, node):
        self.defaultOut(node)

    def caseADisjunctionExpr(self, node):
        self.inADisjunctionExpr(node)
        if (node.getDisjunction() != None):
            node.getDisjunction().apply(self)
        self.outADisjunctionExpr(node)
        
    def inAConjunctionDisjunction(self, node):
        self.defaultIn(node)

    def outAConjunctionDisjunction(self, node):
        self.defaultOut(node)

    def caseAConjunctionDisjunction(self, node):
        self.inAConjunctionDisjunction(node)
        if (node.getConjunction() != None):
            node.getConjunction().apply(self)
        self.outAConjunctionDisjunction(node)
        
    def inADisjunction(self, node):
        self.defaultIn(node)

    def outADisjunction(self, node):
        self.defaultOut(node)

    def caseADisjunction(self, node):
        self.inADisjunction(node)
        if (node.getConjunction() != None):
            node.getConjunction().apply(self)
        if (node.getTOr() != None):
            node.getTOr().apply(self)
        if (node.getDisjunction() != None):
            node.getDisjunction().apply(self)
        self.outADisjunction(node)
        
    def inASubexprConjunction(self, node):
        self.defaultIn(node)

    def outASubexprConjunction(self, node):
        self.defaultOut(node)

    def caseASubexprConjunction(self, node):
        self.inASubexprConjunction(node)
        if (node.getSubexpr() != None):
            node.getSubexpr().apply(self)
        self.outASubexprConjunction(node)
        
    def inAConjunction(self, node):
        self.defaultIn(node)

    def outAConjunction(self, node):
        self.defaultOut(node)

    def caseAConjunction(self, node):
        self.inAConjunction(node)
        if (node.getSubexpr() != None):
            node.getSubexpr().apply(self)
        if (node.getTAnd() != None):
            node.getTAnd().apply(self)
        if (node.getConjunction() != None):
            node.getConjunction().apply(self)
        self.outAConjunction(node)
        
    def inANegatedSubexpr(self, node):
        self.defaultIn(node)

    def outANegatedSubexpr(self, node):
        self.defaultOut(node)

    def caseANegatedSubexpr(self, node):
        self.inANegatedSubexpr(node)
        if (node.getSubexpr() != None):
            node.getSubexpr().apply(self)
        if (node.getTNot() != None):
            node.getTNot().apply(self)
        self.outANegatedSubexpr(node)
        
    def inASimpleSubexpr(self, node):
        self.defaultIn(node)

    def outASimpleSubexpr(self, node):
        self.defaultOut(node)

    def caseASimpleSubexpr(self, node):
        self.inASimpleSubexpr(node)
        if (node.getSimple() != None):
            node.getSimple().apply(self)
        self.outASimpleSubexpr(node)
        
    def inAComplexSubexpr(self, node):
        self.defaultIn(node)

    def outAComplexSubexpr(self, node):
        self.defaultOut(node)

    def caseAComplexSubexpr(self, node):
        self.inAComplexSubexpr(node)
        if (node.getRpar() != None):
            node.getRpar().apply(self)
        if (node.getExpr() != None):
            node.getExpr().apply(self)
        if (node.getLpar() != None):
            node.getLpar().apply(self)
        self.outAComplexSubexpr(node)
        
    def inAQuantifiedSubexpr(self, node):
        self.defaultIn(node)

    def outAQuantifiedSubexpr(self, node):
        self.defaultOut(node)

    def caseAQuantifiedSubexpr(self, node):
        self.inAQuantifiedSubexpr(node)
        if (node.getQuantified() != None):
            node.getQuantified().apply(self)
        self.outAQuantifiedSubexpr(node)
        
    def inAQuantified(self, node):
        self.defaultIn(node)

    def outAQuantified(self, node):
        self.defaultOut(node)

    def caseAQuantified(self, node):
        self.inAQuantified(node)
        if (node.getRpar() != None):
            node.getRpar().apply(self)
        if (node.getExpr() != None):
            node.getExpr().apply(self)
        if (node.getLpar() != None):
            node.getLpar().apply(self)
        if (node.getVariablelist() != None):
            node.getVariablelist().apply(self)
        if (node.getQuantifierKey() != None):
            node.getQuantifierKey().apply(self)
        self.outAQuantified(node)
        
    def inAMoleculeSimple(self, node):
        self.defaultIn(node)

    def outAMoleculeSimple(self, node):
        self.defaultOut(node)

    def caseAMoleculeSimple(self, node):
        self.inAMoleculeSimple(node)
        if (node.getMolecule() != None):
            node.getMolecule().apply(self)
        self.outAMoleculeSimple(node)
        
    def inAComparisonSimple(self, node):
        self.defaultIn(node)

    def outAComparisonSimple(self, node):
        self.defaultOut(node)

    def caseAComparisonSimple(self, node):
        self.inAComparisonSimple(node)
        if (node.getComparison() != None):
            node.getComparison().apply(self)
        self.outAComparisonSimple(node)
        
    def inAAtomSimple(self, node):
        self.defaultIn(node)

    def outAAtomSimple(self, node):
        self.defaultOut(node)

    def caseAAtomSimple(self, node):
        self.inAAtomSimple(node)
        if (node.getTerm() != None):
            node.getTerm().apply(self)
        self.outAAtomSimple(node)
        
    def inAConceptMoleculePreferredMolecule(self, node):
        self.defaultIn(node)

    def outAConceptMoleculePreferredMolecule(self, node):
        self.defaultOut(node)

    def caseAConceptMoleculePreferredMolecule(self, node):
        self.inAConceptMoleculePreferredMolecule(node)
        if (node.getTermlist() != None):
            node.getTermlist().apply(self)
        if (node.getCptOp() != None):
            node.getCptOp().apply(self)
        if (node.getAttrSpecification() != None):
            node.getAttrSpecification().apply(self)
        if (node.getTerm() != None):
            node.getTerm().apply(self)
        self.outAConceptMoleculePreferredMolecule(node)
        
    def inAConceptMoleculeNonpreferredMolecule(self, node):
        self.defaultIn(node)

    def outAConceptMoleculeNonpreferredMolecule(self, node):
        self.defaultOut(node)

    def caseAConceptMoleculeNonpreferredMolecule(self, node):
        self.inAConceptMoleculeNonpreferredMolecule(node)
        if (node.getAttrSpecification() != None):
            node.getAttrSpecification().apply(self)
        if (node.getTermlist() != None):
            node.getTermlist().apply(self)
        if (node.getCptOp() != None):
            node.getCptOp().apply(self)
        if (node.getTerm() != None):
            node.getTerm().apply(self)
        self.outAConceptMoleculeNonpreferredMolecule(node)
        
    def inAAttributeMoleculeMolecule(self, node):
        self.defaultIn(node)

    def outAAttributeMoleculeMolecule(self, node):
        self.defaultOut(node)

    def caseAAttributeMoleculeMolecule(self, node):
        self.inAAttributeMoleculeMolecule(node)
        if (node.getAttrSpecification() != None):
            node.getAttrSpecification().apply(self)
        if (node.getTerm() != None):
            node.getTerm().apply(self)
        self.outAAttributeMoleculeMolecule(node)
        
    def inAAttrSpecification(self, node):
        self.defaultIn(node)

    def outAAttrSpecification(self, node):
        self.defaultOut(node)

    def caseAAttrSpecification(self, node):
        self.inAAttrSpecification(node)
        if (node.getRbracket() != None):
            node.getRbracket().apply(self)
        if (node.getAttrRelList() != None):
            node.getAttrRelList().apply(self)
        if (node.getLbracket() != None):
            node.getLbracket().apply(self)
        self.outAAttrSpecification(node)
        
    def inAAttrRelationAttrRelList(self, node):
        self.defaultIn(node)

    def outAAttrRelationAttrRelList(self, node):
        self.defaultOut(node)

    def caseAAttrRelationAttrRelList(self, node):
        self.inAAttrRelationAttrRelList(node)
        if (node.getAttrRelation() != None):
            node.getAttrRelation().apply(self)
        self.outAAttrRelationAttrRelList(node)
        
    def inAAttrRelList(self, node):
        self.defaultIn(node)

    def outAAttrRelList(self, node):
        self.defaultOut(node)

    def caseAAttrRelList(self, node):
        self.inAAttrRelList(node)
        if (node.getAttrRelation() != None):
            node.getAttrRelation().apply(self)
        if (node.getComma() != None):
            node.getComma().apply(self)
        if (node.getAttrRelList() != None):
            node.getAttrRelList().apply(self)
        self.outAAttrRelList(node)
        
    def inAAttrDefAttrRelation(self, node):
        self.defaultIn(node)

    def outAAttrDefAttrRelation(self, node):
        self.defaultOut(node)

    def caseAAttrDefAttrRelation(self, node):
        self.inAAttrDefAttrRelation(node)
        if (node.getTermlist() != None):
            node.getTermlist().apply(self)
        if (node.getAttrDefOp() != None):
            node.getAttrDefOp().apply(self)
        if (node.getTerm() != None):
            node.getTerm().apply(self)
        self.outAAttrDefAttrRelation(node)
        
    def inAAttrValAttrRelation(self, node):
        self.defaultIn(node)

    def outAAttrValAttrRelation(self, node):
        self.defaultOut(node)

    def caseAAttrValAttrRelation(self, node):
        self.inAAttrValAttrRelation(node)
        if (node.getTermlist() != None):
            node.getTermlist().apply(self)
        if (node.getTHasvalue() != None):
            node.getTHasvalue().apply(self)
        if (node.getTerm() != None):
            node.getTerm().apply(self)
        self.outAAttrValAttrRelation(node)
        
    def inAComparison(self, node):
        self.defaultIn(node)

    def outAComparison(self, node):
        self.defaultOut(node)

    def caseAComparison(self, node):
        self.inAComparison(node)
        if (node.getRight() != None):
            node.getRight().apply(self)
        if (node.getCompOp() != None):
            node.getCompOp().apply(self)
        if (node.getLeft() != None):
            node.getLeft().apply(self)
        self.outAComparison(node)
        
    def inAParametrizedFunctionsymbol(self, node):
        self.defaultIn(node)

    def outAParametrizedFunctionsymbol(self, node):
        self.defaultOut(node)

    def caseAParametrizedFunctionsymbol(self, node):
        self.inAParametrizedFunctionsymbol(node)
        if (node.getRpar() != None):
            node.getRpar().apply(self)
        if (node.getTerms() != None):
            node.getTerms().apply(self)
        if (node.getLpar() != None):
            node.getLpar().apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        self.outAParametrizedFunctionsymbol(node)
        
    def inAMathFunctionsymbol(self, node):
        self.defaultIn(node)

    def outAMathFunctionsymbol(self, node):
        self.defaultOut(node)

    def caseAMathFunctionsymbol(self, node):
        self.inAMathFunctionsymbol(node)
        if (node.getRpar() != None):
            node.getRpar().apply(self)
        if (node.getTerm() != None):
            node.getTerm().apply(self)
        if (node.getMathOp() != None):
            node.getMathOp().apply(self)
        if (node.getMathexpr() != None):
            node.getMathexpr().apply(self)
        if (node.getLpar() != None):
            node.getLpar().apply(self)
        self.outAMathFunctionsymbol(node)
        
    def inASubMathexpr(self, node):
        self.defaultIn(node)

    def outASubMathexpr(self, node):
        self.defaultOut(node)

    def caseASubMathexpr(self, node):
        self.inASubMathexpr(node)
        if (node.getTerm() != None):
            node.getTerm().apply(self)
        if (node.getMathOp() != None):
            node.getMathOp().apply(self)
        if (node.getMathexpr() != None):
            node.getMathexpr().apply(self)
        self.outASubMathexpr(node)
        
    def inAMathexpr(self, node):
        self.defaultIn(node)

    def outAMathexpr(self, node):
        self.defaultOut(node)

    def caseAMathexpr(self, node):
        self.inAMathexpr(node)
        if (node.getTerm() != None):
            node.getTerm().apply(self)
        self.outAMathexpr(node)
        
    def inAGtCompOp(self, node):
        self.defaultIn(node)

    def outAGtCompOp(self, node):
        self.defaultOut(node)

    def caseAGtCompOp(self, node):
        self.inAGtCompOp(node)
        if (node.getGt() != None):
            node.getGt().apply(self)
        self.outAGtCompOp(node)
        
    def inALtCompOp(self, node):
        self.defaultIn(node)

    def outALtCompOp(self, node):
        self.defaultOut(node)

    def caseALtCompOp(self, node):
        self.inALtCompOp(node)
        if (node.getLt() != None):
            node.getLt().apply(self)
        self.outALtCompOp(node)
        
    def inAGteCompOp(self, node):
        self.defaultIn(node)

    def outAGteCompOp(self, node):
        self.defaultOut(node)

    def caseAGteCompOp(self, node):
        self.inAGteCompOp(node)
        if (node.getGte() != None):
            node.getGte().apply(self)
        self.outAGteCompOp(node)
        
    def inALteCompOp(self, node):
        self.defaultIn(node)

    def outALteCompOp(self, node):
        self.defaultOut(node)

    def caseALteCompOp(self, node):
        self.inALteCompOp(node)
        if (node.getLte() != None):
            node.getLte().apply(self)
        self.outALteCompOp(node)
        
    def inAEqualCompOp(self, node):
        self.defaultIn(node)

    def outAEqualCompOp(self, node):
        self.defaultOut(node)

    def caseAEqualCompOp(self, node):
        self.inAEqualCompOp(node)
        if (node.getEqual() != None):
            node.getEqual().apply(self)
        self.outAEqualCompOp(node)
        
    def inAUnequalCompOp(self, node):
        self.defaultIn(node)

    def outAUnequalCompOp(self, node):
        self.defaultOut(node)

    def caseAUnequalCompOp(self, node):
        self.inAUnequalCompOp(node)
        if (node.getUnequal() != None):
            node.getUnequal().apply(self)
        self.outAUnequalCompOp(node)
        
    def inAMemberofCptOp(self, node):
        self.defaultIn(node)

    def outAMemberofCptOp(self, node):
        self.defaultOut(node)

    def caseAMemberofCptOp(self, node):
        self.inAMemberofCptOp(node)
        if (node.getTMemberof() != None):
            node.getTMemberof().apply(self)
        self.outAMemberofCptOp(node)
        
    def inASubconceptofCptOp(self, node):
        self.defaultIn(node)

    def outASubconceptofCptOp(self, node):
        self.defaultOut(node)

    def caseASubconceptofCptOp(self, node):
        self.inASubconceptofCptOp(node)
        if (node.getTSubconcept() != None):
            node.getTSubconcept().apply(self)
        self.outASubconceptofCptOp(node)
        
    def inAForallQuantifierKey(self, node):
        self.defaultIn(node)

    def outAForallQuantifierKey(self, node):
        self.defaultOut(node)

    def caseAForallQuantifierKey(self, node):
        self.inAForallQuantifierKey(node)
        if (node.getTForall() != None):
            node.getTForall().apply(self)
        self.outAForallQuantifierKey(node)
        
    def inAExistsQuantifierKey(self, node):
        self.defaultIn(node)

    def outAExistsQuantifierKey(self, node):
        self.defaultOut(node)

    def caseAExistsQuantifierKey(self, node):
        self.inAExistsQuantifierKey(node)
        if (node.getTExists() != None):
            node.getTExists().apply(self)
        self.outAExistsQuantifierKey(node)
        
    def inAOftypeAttrDefOp(self, node):
        self.defaultIn(node)

    def outAOftypeAttrDefOp(self, node):
        self.defaultOut(node)

    def caseAOftypeAttrDefOp(self, node):
        self.inAOftypeAttrDefOp(node)
        if (node.getTOftype() != None):
            node.getTOftype().apply(self)
        self.outAOftypeAttrDefOp(node)
        
    def inAImpliestypeAttrDefOp(self, node):
        self.defaultIn(node)

    def outAImpliestypeAttrDefOp(self, node):
        self.defaultOut(node)

    def caseAImpliestypeAttrDefOp(self, node):
        self.inAImpliestypeAttrDefOp(node)
        if (node.getTImpliestype() != None):
            node.getTImpliestype().apply(self)
        self.outAImpliestypeAttrDefOp(node)
        
    def inAImpliesImplyOp(self, node):
        self.defaultIn(node)

    def outAImpliesImplyOp(self, node):
        self.defaultOut(node)

    def caseAImpliesImplyOp(self, node):
        self.inAImpliesImplyOp(node)
        if (node.getTImplies() != None):
            node.getTImplies().apply(self)
        self.outAImpliesImplyOp(node)
        
    def inAImpliedbyImplyOp(self, node):
        self.defaultIn(node)

    def outAImpliedbyImplyOp(self, node):
        self.defaultOut(node)

    def caseAImpliedbyImplyOp(self, node):
        self.inAImpliedbyImplyOp(node)
        if (node.getTImpliedBy() != None):
            node.getTImpliedBy().apply(self)
        self.outAImpliedbyImplyOp(node)
        
    def inAEquivalentImplyOp(self, node):
        self.defaultIn(node)

    def outAEquivalentImplyOp(self, node):
        self.defaultOut(node)

    def caseAEquivalentImplyOp(self, node):
        self.inAEquivalentImplyOp(node)
        if (node.getTEquivalent() != None):
            node.getTEquivalent().apply(self)
        self.outAEquivalentImplyOp(node)
        
    def inAAddMathOp(self, node):
        self.defaultIn(node)

    def outAAddMathOp(self, node):
        self.defaultOut(node)

    def caseAAddMathOp(self, node):
        self.inAAddMathOp(node)
        if (node.getAddOp() != None):
            node.getAddOp().apply(self)
        self.outAAddMathOp(node)
        
    def inASubMathOp(self, node):
        self.defaultIn(node)

    def outASubMathOp(self, node):
        self.defaultOut(node)

    def caseASubMathOp(self, node):
        self.inASubMathOp(node)
        if (node.getSubOp() != None):
            node.getSubOp().apply(self)
        self.outASubMathOp(node)
        
    def inAMulMathOp(self, node):
        self.defaultIn(node)

    def outAMulMathOp(self, node):
        self.defaultOut(node)

    def caseAMulMathOp(self, node):
        self.inAMulMathOp(node)
        if (node.getStar() != None):
            node.getStar().apply(self)
        self.outAMulMathOp(node)
        
    def inADivMathOp(self, node):
        self.defaultIn(node)

    def outADivMathOp(self, node):
        self.defaultOut(node)

    def caseADivMathOp(self, node):
        self.inADivMathOp(node)
        if (node.getDivOp() != None):
            node.getDivOp().apply(self)
        self.outADivMathOp(node)
        
    def inAPrefix(self, node):
        self.defaultIn(node)

    def outAPrefix(self, node):
        self.defaultOut(node)

    def caseAPrefix(self, node):
        self.inAPrefix(node)
        if (node.getHash() != None):
            node.getHash().apply(self)
        if (node.getName() != None):
            node.getName().apply(self)
        self.outAPrefix(node)
        
    def inAAnySqname(self, node):
        self.defaultIn(node)

    def outAAnySqname(self, node):
        self.defaultOut(node)

    def caseAAnySqname(self, node):
        self.inAAnySqname(node)
        if (node.getName() != None):
            node.getName().apply(self)
        if (node.getPrefix() != None):
            node.getPrefix().apply(self)
        self.outAAnySqname(node)
        
    def inARelationSqname(self, node):
        self.defaultIn(node)

    def outARelationSqname(self, node):
        self.defaultOut(node)

    def caseARelationSqname(self, node):
        self.inARelationSqname(node)
        if (node.getTRelation() != None):
            node.getTRelation().apply(self)
        if (node.getPrefix() != None):
            node.getPrefix().apply(self)
        self.outARelationSqname(node)
        
    def inASourceSqname(self, node):
        self.defaultIn(node)

    def outASourceSqname(self, node):
        self.defaultOut(node)

    def caseASourceSqname(self, node):
        self.inASourceSqname(node)
        if (node.getTSource() != None):
            node.getTSource().apply(self)
        if (node.getPrefix() != None):
            node.getPrefix().apply(self)
        self.outASourceSqname(node)
        
    def inAIriIri(self, node):
        self.defaultIn(node)

    def outAIriIri(self, node):
        self.defaultOut(node)

    def caseAIriIri(self, node):
        self.inAIriIri(node)
        if (node.getFullIri() != None):
            node.getFullIri().apply(self)
        self.outAIriIri(node)
        
    def inASqnameIri(self, node):
        self.defaultIn(node)

    def outASqnameIri(self, node):
        self.defaultOut(node)

    def caseASqnameIri(self, node):
        self.inASqnameIri(node)
        if (node.getSqname() != None):
            node.getSqname().apply(self)
        self.outASqnameIri(node)
        
    def inAIriId(self, node):
        self.defaultIn(node)

    def outAIriId(self, node):
        self.defaultOut(node)

    def caseAIriId(self, node):
        self.inAIriId(node)
        if (node.getIri() != None):
            node.getIri().apply(self)
        self.outAIriId(node)
        
    def inAAnonymousId(self, node):
        self.defaultIn(node)

    def outAAnonymousId(self, node):
        self.defaultOut(node)

    def caseAAnonymousId(self, node):
        self.inAAnonymousId(node)
        if (node.getAnonymous() != None):
            node.getAnonymous().apply(self)
        self.outAAnonymousId(node)
        
    def inAUniversalTruthId(self, node):
        self.defaultIn(node)

    def outAUniversalTruthId(self, node):
        self.defaultOut(node)

    def caseAUniversalTruthId(self, node):
        self.inAUniversalTruthId(node)
        if (node.getTUnivtrue() != None):
            node.getTUnivtrue().apply(self)
        self.outAUniversalTruthId(node)
        
    def inAUniversalFalsehoodId(self, node):
        self.defaultIn(node)

    def outAUniversalFalsehoodId(self, node):
        self.defaultOut(node)

    def caseAUniversalFalsehoodId(self, node):
        self.inAUniversalFalsehoodId(node)
        if (node.getTUnivfalse() != None):
            node.getTUnivfalse().apply(self)
        self.outAUniversalFalsehoodId(node)
        
    def inAIdIdlist(self, node):
        self.defaultIn(node)

    def outAIdIdlist(self, node):
        self.defaultOut(node)

    def caseAIdIdlist(self, node):
        self.inAIdIdlist(node)
        if (node.getId() != None):
            node.getId().apply(self)
        self.outAIdIdlist(node)
        
    def inAIdlistIdlist(self, node):
        self.defaultIn(node)

    def outAIdlistIdlist(self, node):
        self.defaultOut(node)

    def caseAIdlistIdlist(self, node):
        self.inAIdlistIdlist(node)
        if (node.getRbrace() != None):
            node.getRbrace().apply(self)
        temp = node.getMoreids()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getLbrace() != None):
            node.getLbrace().apply(self)
        self.outAIdlistIdlist(node)
        
    def inAMoreids(self, node):
        self.defaultIn(node)

    def outAMoreids(self, node):
        self.defaultOut(node)

    def caseAMoreids(self, node):
        self.inAMoreids(node)
        if (node.getId() != None):
            node.getId().apply(self)
        if (node.getComma() != None):
            node.getComma().apply(self)
        self.outAMoreids(node)
        
    def inADatatypeValue(self, node):
        self.defaultIn(node)

    def outADatatypeValue(self, node):
        self.defaultOut(node)

    def caseADatatypeValue(self, node):
        self.inADatatypeValue(node)
        if (node.getFunctionsymbol() != None):
            node.getFunctionsymbol().apply(self)
        self.outADatatypeValue(node)
        
    def inATermValue(self, node):
        self.defaultIn(node)

    def outATermValue(self, node):
        self.defaultOut(node)

    def caseATermValue(self, node):
        self.inATermValue(node)
        if (node.getId() != None):
            node.getId().apply(self)
        self.outATermValue(node)
        
    def inANumericValue(self, node):
        self.defaultIn(node)

    def outANumericValue(self, node):
        self.defaultOut(node)

    def caseANumericValue(self, node):
        self.inANumericValue(node)
        if (node.getNumber() != None):
            node.getNumber().apply(self)
        self.outANumericValue(node)
        
    def inAStringValue(self, node):
        self.defaultIn(node)

    def outAStringValue(self, node):
        self.defaultOut(node)

    def caseAStringValue(self, node):
        self.inAStringValue(node)
        if (node.getString() != None):
            node.getString().apply(self)
        self.outAStringValue(node)
        
    def inATermValuelist(self, node):
        self.defaultIn(node)

    def outATermValuelist(self, node):
        self.defaultOut(node)

    def caseATermValuelist(self, node):
        self.inATermValuelist(node)
        if (node.getValue() != None):
            node.getValue().apply(self)
        self.outATermValuelist(node)
        
    def inAValuelistValuelist(self, node):
        self.defaultIn(node)

    def outAValuelistValuelist(self, node):
        self.defaultOut(node)

    def caseAValuelistValuelist(self, node):
        self.inAValuelistValuelist(node)
        if (node.getRbrace() != None):
            node.getRbrace().apply(self)
        temp = node.getMorevalues()
        temp.reverse()
        for item in temp:
            item.apply(self)
        if (node.getValue() != None):
            node.getValue().apply(self)
        if (node.getLbrace() != None):
            node.getLbrace().apply(self)
        self.outAValuelistValuelist(node)
        
    def inAMorevalues(self, node):
        self.defaultIn(node)

    def outAMorevalues(self, node):
        self.defaultOut(node)

    def caseAMorevalues(self, node):
        self.inAMorevalues(node)
        if (node.getValue() != None):
            node.getValue().apply(self)
        if (node.getComma() != None):
            node.getComma().apply(self)
        self.outAMorevalues(node)
        
    def inADataTerm(self, node):
        self.defaultIn(node)

    def outADataTerm(self, node):
        self.defaultOut(node)

    def caseADataTerm(self, node):
        self.inADataTerm(node)
        if (node.getValue() != None):
            node.getValue().apply(self)
        self.outADataTerm(node)
        
    def inAVarTerm(self, node):
        self.defaultIn(node)

    def outAVarTerm(self, node):
        self.defaultOut(node)

    def caseAVarTerm(self, node):
        self.inAVarTerm(node)
        if (node.getVariable() != None):
            node.getVariable().apply(self)
        self.outAVarTerm(node)
        
    def inANbAnonymousTerm(self, node):
        self.defaultIn(node)

    def outANbAnonymousTerm(self, node):
        self.defaultOut(node)

    def caseANbAnonymousTerm(self, node):
        self.inANbAnonymousTerm(node)
        if (node.getNbAnonymous() != None):
            node.getNbAnonymous().apply(self)
        self.outANbAnonymousTerm(node)
        
    def inATermTerms(self, node):
        self.defaultIn(node)

    def outATermTerms(self, node):
        self.defaultOut(node)

    def caseATermTerms(self, node):
        self.inATermTerms(node)
        if (node.getTerm() != None):
            node.getTerm().apply(self)
        self.outATermTerms(node)
        
    def inATerms(self, node):
        self.defaultIn(node)

    def outATerms(self, node):
        self.defaultOut(node)

    def caseATerms(self, node):
        self.inATerms(node)
        if (node.getTerm() != None):
            node.getTerm().apply(self)
        if (node.getComma() != None):
            node.getComma().apply(self)
        if (node.getTerms() != None):
            node.getTerms().apply(self)
        self.outATerms(node)
        
    def inATermTermlist(self, node):
        self.defaultIn(node)

    def outATermTermlist(self, node):
        self.defaultOut(node)

    def caseATermTermlist(self, node):
        self.inATermTermlist(node)
        if (node.getTerm() != None):
            node.getTerm().apply(self)
        self.outATermTermlist(node)
        
    def inATermlist(self, node):
        self.defaultIn(node)

    def outATermlist(self, node):
        self.defaultOut(node)

    def caseATermlist(self, node):
        self.inATermlist(node)
        if (node.getRbrace() != None):
            node.getRbrace().apply(self)
        if (node.getTerms() != None):
            node.getTerms().apply(self)
        if (node.getLbrace() != None):
            node.getLbrace().apply(self)
        self.outATermlist(node)
        
    def inAVariableVariables(self, node):
        self.defaultIn(node)

    def outAVariableVariables(self, node):
        self.defaultOut(node)

    def caseAVariableVariables(self, node):
        self.inAVariableVariables(node)
        if (node.getVariable() != None):
            node.getVariable().apply(self)
        self.outAVariableVariables(node)
        
    def inAVariables(self, node):
        self.defaultIn(node)

    def outAVariables(self, node):
        self.defaultOut(node)

    def caseAVariables(self, node):
        self.inAVariables(node)
        if (node.getVariable() != None):
            node.getVariable().apply(self)
        if (node.getComma() != None):
            node.getComma().apply(self)
        if (node.getVariables() != None):
            node.getVariables().apply(self)
        self.outAVariables(node)
        
    def inAVariableVariablelist(self, node):
        self.defaultIn(node)

    def outAVariableVariablelist(self, node):
        self.defaultOut(node)

    def caseAVariableVariablelist(self, node):
        self.inAVariableVariablelist(node)
        if (node.getVariable() != None):
            node.getVariable().apply(self)
        self.outAVariableVariablelist(node)
        
    def inAVariableListVariablelist(self, node):
        self.defaultIn(node)

    def outAVariableListVariablelist(self, node):
        self.defaultOut(node)

    def caseAVariableListVariablelist(self, node):
        self.inAVariableListVariablelist(node)
        if (node.getRbrace() != None):
            node.getRbrace().apply(self)
        if (node.getVariables() != None):
            node.getVariables().apply(self)
        if (node.getLbrace() != None):
            node.getLbrace().apply(self)
        self.outAVariableListVariablelist(node)
        
    def inAInteger(self, node):
        self.defaultIn(node)

    def outAInteger(self, node):
        self.defaultOut(node)

    def caseAInteger(self, node):
        self.inAInteger(node)
        if (node.getPosInteger() != None):
            node.getPosInteger().apply(self)
        if (node.getSubOp() != None):
            node.getSubOp().apply(self)
        self.outAInteger(node)
        
    def inADecimal(self, node):
        self.defaultIn(node)

    def outADecimal(self, node):
        self.defaultOut(node)

    def caseADecimal(self, node):
        self.inADecimal(node)
        if (node.getPosDecimal() != None):
            node.getPosDecimal().apply(self)
        if (node.getSubOp() != None):
            node.getSubOp().apply(self)
        self.outADecimal(node)
        
    def inAIntegerNumber(self, node):
        self.defaultIn(node)

    def outAIntegerNumber(self, node):
        self.defaultOut(node)

    def caseAIntegerNumber(self, node):
        self.inAIntegerNumber(node)
        if (node.getInteger() != None):
            node.getInteger().apply(self)
        self.outAIntegerNumber(node)
        
    def inADecimalNumber(self, node):
        self.defaultIn(node)

    def outADecimalNumber(self, node):
        self.defaultOut(node)

    def caseADecimalNumber(self, node):
        self.inADecimalNumber(node)
        if (node.getDecimal() != None):
            node.getDecimal().apply(self)
        self.outADecimalNumber(node)
        


############################# lexer.py ############################################# 

class LexerException(Exception):
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return self.value
        
# lexer states
STATE_INITIAL = 0

accept_tokens = [None] * 82
        
accept_tokens[0] = lambda line, pos: TTBlank(None, line, pos)
accept_tokens[1] = lambda line, pos: TTComment(None, line, pos)
accept_tokens[2] = lambda line, pos: TComma(line, pos)
accept_tokens[3] = lambda line, pos: TEndpoint(None, line, pos)
accept_tokens[4] = lambda line, pos: TLpar(line, pos)
accept_tokens[5] = lambda line, pos: TRpar(line, pos)
accept_tokens[6] = lambda line, pos: TLbracket(line, pos)
accept_tokens[7] = lambda line, pos: TRbracket(line, pos)
accept_tokens[8] = lambda line, pos: TLbrace(line, pos)
accept_tokens[9] = lambda line, pos: TRbrace(line, pos)
accept_tokens[10] = lambda line, pos: THash(line, pos)
accept_tokens[11] = lambda line, pos: TTAnd(line, pos)
accept_tokens[12] = lambda line, pos: TTOr(line, pos)
accept_tokens[13] = lambda line, pos: TTImplies(None, line, pos)
accept_tokens[14] = lambda line, pos: TTImpliedBy(None, line, pos)
accept_tokens[15] = lambda line, pos: TTEquivalent(None, line, pos)
accept_tokens[16] = lambda line, pos: TTImpliedByLp(line, pos)
accept_tokens[17] = lambda line, pos: TTConstraint(line, pos)
accept_tokens[18] = lambda line, pos: TTNot(None, line, pos)
accept_tokens[19] = lambda line, pos: TTExists(line, pos)
accept_tokens[20] = lambda line, pos: TTForall(line, pos)
accept_tokens[21] = lambda line, pos: TTUnivfalse(line, pos)
accept_tokens[22] = lambda line, pos: TTUnivtrue(line, pos)
accept_tokens[23] = lambda line, pos: TGt(line, pos)
accept_tokens[24] = lambda line, pos: TLt(line, pos)
accept_tokens[25] = lambda line, pos: TGte(line, pos)
accept_tokens[26] = lambda line, pos: TLte(line, pos)
accept_tokens[27] = lambda line, pos: TEqual(line, pos)
accept_tokens[28] = lambda line, pos: TUnequal(line, pos)
accept_tokens[29] = lambda line, pos: TAddOp(line, pos)
accept_tokens[30] = lambda line, pos: TSubOp(line, pos)
accept_tokens[31] = lambda line, pos: TStar(line, pos)
accept_tokens[32] = lambda line, pos: TDivOp(line, pos)
accept_tokens[33] = lambda line, pos: TTAssumption(line, pos)
accept_tokens[34] = lambda line, pos: TTAxiom(line, pos)
accept_tokens[35] = lambda line, pos: TTCapability(line, pos)
accept_tokens[36] = lambda line, pos: TTChoreography(line, pos)
accept_tokens[37] = lambda line, pos: TTConcept(line, pos)
accept_tokens[38] = lambda line, pos: TTDefinedby(line, pos)
accept_tokens[39] = lambda line, pos: TTEffect(line, pos)
accept_tokens[40] = lambda line, pos: TTEndnfp(None, line, pos)
accept_tokens[41] = lambda line, pos: TTGgmediator(line, pos)
accept_tokens[42] = lambda line, pos: TTGoal(line, pos)
accept_tokens[43] = lambda line, pos: TTHasvalue(line, pos)
accept_tokens[44] = lambda line, pos: TTImpliestype(line, pos)
accept_tokens[45] = lambda line, pos: TTImportontology(line, pos)
accept_tokens[46] = lambda line, pos: TTInstance(line, pos)
accept_tokens[47] = lambda line, pos: TTInterface(line, pos)
accept_tokens[48] = lambda line, pos: TTInverseof(line, pos)
accept_tokens[49] = lambda line, pos: TTMemberof(line, pos)
accept_tokens[50] = lambda line, pos: TTNamespace(line, pos)
accept_tokens[51] = lambda line, pos: TTNfp(None, line, pos)
accept_tokens[52] = lambda line, pos: TTOftype(line, pos)
accept_tokens[53] = lambda line, pos: TTOntology(line, pos)
accept_tokens[54] = lambda line, pos: TTOomediator(line, pos)
accept_tokens[55] = lambda line, pos: TTOrchestration(line, pos)
accept_tokens[56] = lambda line, pos: TTPostcondition(line, pos)
accept_tokens[57] = lambda line, pos: TTPrecondition(line, pos)
accept_tokens[58] = lambda line, pos: TTReflexive(line, pos)
accept_tokens[59] = lambda line, pos: TTRelation(line, pos)
accept_tokens[60] = lambda line, pos: TTRelationInstance(line, pos)
accept_tokens[61] = lambda line, pos: TTSharedvariable(line, pos)
accept_tokens[62] = lambda line, pos: TTSource(line, pos)
accept_tokens[63] = lambda line, pos: TTSubconcept(line, pos)
accept_tokens[64] = lambda line, pos: TTSubrelation(line, pos)
accept_tokens[65] = lambda line, pos: TTSymmetric(line, pos)
accept_tokens[66] = lambda line, pos: TTTarget(line, pos)
accept_tokens[67] = lambda line, pos: TTTransitive(line, pos)
accept_tokens[68] = lambda line, pos: TTUsemediator(line, pos)
accept_tokens[69] = lambda line, pos: TTUseservice(line, pos)
accept_tokens[70] = lambda line, pos: TTWebservice(line, pos)
accept_tokens[71] = lambda line, pos: TTWgmediator(line, pos)
accept_tokens[72] = lambda line, pos: TTWsmlvariant(line, pos)
accept_tokens[73] = lambda line, pos: TTWwmediator(line, pos)
accept_tokens[74] = lambda line, pos: TVariable(None, line, pos)
accept_tokens[75] = lambda line, pos: TAnonymous(line, pos)
accept_tokens[76] = lambda line, pos: TNbAnonymous(None, line, pos)
accept_tokens[77] = lambda line, pos: TPosInteger(None, line, pos)
accept_tokens[78] = lambda line, pos: TPosDecimal(None, line, pos)
accept_tokens[79] = lambda line, pos: TString(None, line, pos)
accept_tokens[80] = lambda line, pos: TFullIri(None, line, pos)
accept_tokens[81] = lambda line, pos: TName(None, line, pos)


lexer_gotoTable = [
                    [
                      [
                        [9, 9, 1],
                        [10, 10, 2],
                        [13, 13, 3],
                        [32, 32, 4],
                        [33, 33, 5],
                        [34, 34, 6],
                        [35, 35, 7],
                        [40, 40, 8],
                        [41, 41, 9],
                        [42, 42, 10],
                        [43, 43, 11],
                        [44, 44, 12],
                        [45, 45, 13],
                        [46, 46, 14],
                        [47, 47, 15],
                        [48, 57, 16],
                        [58, 58, 17],
                        [60, 60, 18],
                        [61, 61, 19],
                        [62, 62, 20],
                        [63, 63, 21],
                        [65, 90, 22],
                        [91, 91, 23],
                        [93, 93, 24],
                        [95, 95, 25],
                        [97, 97, 26],
                        [98, 98, 27],
                        [99, 99, 28],
                        [100, 100, 29],
                        [101, 101, 30],
                        [102, 102, 31],
                        [103, 103, 32],
                        [104, 104, 33],
                        [105, 105, 34],
                        [106, 108, 27],
                        [109, 109, 35],
                        [110, 110, 36],
                        [111, 111, 37],
                        [112, 112, 38],
                        [113, 113, 27],
                        [114, 114, 39],
                        [115, 115, 40],
                        [116, 116, 41],
                        [117, 117, 42],
                        [118, 118, 27],
                        [119, 119, 43],
                        [120, 122, 27],
                        [123, 123, 44],
                        [125, 125, 45],
                        [12295, 12295, 46],
                        [12321, 12329, 47],
                        [19968, 40869, 48],
                      ],
                      [
                        [9, 32, -2],
                      ],
                      [
                        [9, 32, -2],
                      ],
                      [
                        [9, 9, 1],
                        [10, 10, 49],
                        [13, 32, -2],
                      ],
                      [
                        [9, 32, -2],
                      ],
                      [
                        [45, 45, 50],
                        [61, 61, 51],
                      ],
                      [
                        [0, 33, 52],
                        [34, 34, 53],
                        [35, 91, 52],
                        [92, 92, 54],
                        [93, 65535, 52],
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                      ],
                      [
                        [62, 62, 55],
                      ],
                      [
                        [9, 9, 56],
                        [10, 10, 57],
                        [13, 13, 58],
                        [32, 32, 59],
                      ],
                      [
                        [42, 42, 60],
                        [47, 47, 61],
                      ],
                      [
                        [46, 46, 62],
                        [48, 57, 16],
                      ],
                      [
                        [45, 45, 63],
                      ],
                      [
                        [45, 45, 64],
                      ],
                      [
                        [60, 60, 65],
                      ],
                      [
                        [61, 61, 66],
                      ],
                      [
                        [48, 57, 67],
                        [65, 90, 68],
                        [97, 122, 69],
                        [12295, 12295, 70],
                        [12321, 12329, 71],
                        [19968, 40869, 72],
                      ],
                      [
                        [48, 57, 73],
                        [65, 90, 74],
                        [92, 92, 75],
                        [95, 95, 76],
                        [97, 122, 77],
                        [183, 183, 78],
                        [720, 720, 79],
                        [721, 721, 80],
                        [768, 837, 81],
                        [864, 865, 82],
                        [903, 903, 83],
                        [1155, 1158, 84],
                        [1600, 1600, 85],
                        [3654, 3654, 86],
                        [3782, 3782, 87],
                        [12293, 12293, 88],
                        [12295, 12295, 89],
                        [12321, 12329, 90],
                        [12337, 12341, 91],
                        [12445, 12446, 92],
                        [12540, 12542, 93],
                        [19968, 40869, 94],
                      ],
                      [
                      ],
                      [
                      ],
                      [
                        [34, 34, 95],
                        [35, 35, 96],
                        [48, 40869, -24],
                      ],
                      [
                        [48, 95, -24],
                        [97, 109, 77],
                        [110, 110, 97],
                        [111, 114, 77],
                        [115, 115, 98],
                        [116, 119, 77],
                        [120, 120, 99],
                        [121, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 100],
                        [98, 103, 77],
                        [104, 104, 101],
                        [105, 110, 77],
                        [111, 111, 102],
                        [112, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 95, -24],
                        [97, 100, 77],
                        [101, 101, 103],
                        [102, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 95, -24],
                        [97, 101, 77],
                        [102, 102, 104],
                        [103, 109, 77],
                        [110, 110, 105],
                        [111, 112, 77],
                        [113, 113, 106],
                        [114, 119, 77],
                        [120, 120, 107],
                        [121, 40869, -28],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 108],
                        [98, 110, 77],
                        [111, 111, 109],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 95, -24],
                        [97, 102, 77],
                        [103, 103, 110],
                        [104, 110, 77],
                        [111, 111, 111],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 112],
                        [98, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 95, -24],
                        [97, 108, 77],
                        [109, 109, 113],
                        [110, 110, 114],
                        [111, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 115],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 116],
                        [98, 100, 77],
                        [101, 101, 117],
                        [102, 102, 118],
                        [103, 110, 77],
                        [111, 111, 119],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 101, -32],
                        [102, 102, 120],
                        [103, 109, 77],
                        [110, 110, 121],
                        [111, 111, 122],
                        [112, 113, 77],
                        [114, 114, 123],
                        [115, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 95, -24],
                        [97, 110, 77],
                        [111, 111, 124],
                        [112, 113, 77],
                        [114, 114, 125],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 126],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 95, -24],
                        [97, 103, 77],
                        [104, 104, 127],
                        [105, 110, 77],
                        [111, 111, 128],
                        [112, 116, 77],
                        [117, 117, 129],
                        [118, 120, 77],
                        [121, 121, 130],
                        [122, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 131],
                        [98, 113, 77],
                        [114, 114, 132],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 95, -24],
                        [97, 114, 77],
                        [115, 115, 133],
                        [116, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 134],
                        [102, 102, 77],
                        [103, 103, 135],
                        [104, 114, 77],
                        [115, 115, 136],
                        [116, 118, 77],
                        [119, 119, 137],
                        [120, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                      ],
                      [
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [9, 32, -2],
                      ],
                      [
                      ],
                      [
                      ],
                      [
                        [0, 65535, -8],
                      ],
                      [
                      ],
                      [
                        [0, 65535, 138],
                      ],
                      [
                      ],
                      [
                        [9, 32, -16],
                      ],
                      [
                        [9, 32, -16],
                      ],
                      [
                        [9, 9, 56],
                        [10, 10, 139],
                        [13, 32, -16],
                      ],
                      [
                        [9, 32, -16],
                      ],
                      [
                        [0, 41, 140],
                        [42, 42, 141],
                        [43, 46, 140],
                        [47, 47, 142],
                        [48, 65535, 140],
                      ],
                      [
                        [0, 9, 143],
                        [10, 10, 144],
                        [11, 12, 143],
                        [13, 13, 145],
                        [14, 65535, 143],
                      ],
                      [
                        [48, 57, 146],
                      ],
                      [
                      ],
                      [
                        [62, 62, 147],
                      ],
                      [
                      ],
                      [
                      ],
                      [
                        [48, 40869, -23],
                      ],
                      [
                        [48, 40869, -23],
                      ],
                      [
                        [48, 40869, -23],
                      ],
                      [
                        [48, 40869, -23],
                      ],
                      [
                        [48, 40869, -23],
                      ],
                      [
                        [48, 40869, -23],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [45, 45, 148],
                        [46, 46, 149],
                        [48, 57, 150],
                        [65, 90, 151],
                        [95, 95, 152],
                        [97, 122, 153],
                        [183, 183, 154],
                        [720, 720, 155],
                        [721, 721, 156],
                        [768, 837, 157],
                        [864, 865, 158],
                        [903, 903, 159],
                        [1155, 1158, 160],
                        [1600, 1600, 161],
                        [3654, 3654, 162],
                        [3782, 3782, 163],
                        [12293, 12293, 164],
                        [12295, 12295, 165],
                        [12321, 12329, 166],
                        [12337, 12341, 167],
                        [12445, 12446, 168],
                        [12540, 12542, 169],
                        [19968, 40869, 170],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [33, 33, 171],
                        [34, 34, 172],
                        [35, 35, 173],
                        [36, 36, 174],
                        [37, 37, 175],
                        [38, 38, 176],
                        [39, 39, 177],
                        [40, 40, 178],
                        [41, 41, 179],
                        [42, 42, 180],
                        [43, 43, 181],
                        [44, 44, 182],
                        [45, 45, 183],
                        [46, 46, 184],
                        [47, 47, 185],
                        [48, 57, 186],
                        [58, 58, 187],
                        [59, 59, 188],
                        [61, 61, 189],
                        [63, 63, 190],
                        [64, 64, 191],
                        [65, 90, 192],
                        [95, 95, 193],
                        [97, 122, 194],
                        [126, 126, 195],
                        [160, 12294, 196],
                        [12295, 12295, 197],
                        [12296, 12320, 196],
                        [12321, 12329, 198],
                        [12330, 19967, 196],
                        [19968, 40869, 199],
                        [40870, 55295, 196],
                        [63744, 64975, 200],
                        [65008, 65519, 201],
                      ],
                      [
                        [48, 57, 202],
                      ],
                      [
                        [48, 95, -24],
                        [97, 99, 77],
                        [100, 100, 203],
                        [101, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 204],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 95, -24],
                        [97, 104, 77],
                        [105, 105, 205],
                        [106, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 95, -24],
                        [97, 111, 77],
                        [112, 112, 206],
                        [113, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 207],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 108, -36],
                        [109, 109, 208],
                        [110, 110, 209],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 101, -32],
                        [102, 102, 210],
                        [103, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 101, -32],
                        [102, 102, 211],
                        [103, 40869, -105],
                      ],
                      [
                        [48, 99, -99],
                        [100, 100, 212],
                        [101, 40869, -99],
                      ],
                      [
                        [48, 95, -24],
                        [97, 116, 77],
                        [117, 117, 213],
                        [118, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 214],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 95, -24],
                        [97, 107, 77],
                        [108, 108, 215],
                        [109, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 95, -24],
                        [97, 113, 77],
                        [114, 114, 216],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 57, 73],
                        [65, 76, 74],
                        [77, 77, 217],
                        [78, 90, 74],
                        [92, 40869, -24],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 218],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 219],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 111, -102],
                        [112, 112, 220],
                        [113, 40869, -102],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 221],
                        [116, 116, 222],
                        [117, 117, 77],
                        [118, 118, 223],
                        [119, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 108, -36],
                        [109, 109, 224],
                        [110, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 101, -32],
                        [102, 102, 225],
                        [103, 108, 77],
                        [109, 109, 226],
                        [110, 40869, -117],
                      ],
                      [
                        [48, 102, -34],
                        [103, 103, 227],
                        [104, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 111, -102],
                        [112, 112, 228],
                        [113, 40869, -102],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 229],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 57, 73],
                        [65, 83, 74],
                        [84, 84, 230],
                        [85, 90, 74],
                        [92, 40869, -24],
                      ],
                      [
                        [48, 95, -24],
                        [97, 115, 77],
                        [116, 116, 231],
                        [117, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 76, -112],
                        [77, 77, 232],
                        [78, 40869, -112],
                      ],
                      [
                        [48, 95, -24],
                        [97, 98, 77],
                        [99, 99, 233],
                        [100, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 234],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 235],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 101, -32],
                        [102, 102, 236],
                        [103, 107, 77],
                        [108, 108, 237],
                        [109, 40869, -110],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 238],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 116, -108],
                        [117, 117, 239],
                        [118, 40869, -108],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 77],
                        [98, 98, 240],
                        [99, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 108, -36],
                        [109, 109, 241],
                        [110, 40869, -117],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 242],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 243],
                        [98, 116, 77],
                        [117, 117, 244],
                        [118, 40869, -108],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 245],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 97, -131],
                        [98, 98, 246],
                        [99, 40869, -131],
                      ],
                      [
                        [48, 76, -112],
                        [77, 77, 247],
                        [78, 40869, -112],
                      ],
                      [
                        [48, 108, -36],
                        [109, 109, 248],
                        [110, 40869, -117],
                      ],
                      [
                        [48, 76, -112],
                        [77, 77, 249],
                        [78, 40869, -112],
                      ],
                      [
                        [0, 65535, -8],
                      ],
                      [
                        [9, 32, -16],
                      ],
                      [
                        [0, 46, -62],
                        [47, 47, 250],
                        [48, 65535, 140],
                      ],
                      [
                        [0, 46, -62],
                        [47, 47, 251],
                        [48, 65535, 140],
                      ],
                      [
                        [47, 47, 252],
                      ],
                      [
                        [0, 65535, -63],
                      ],
                      [
                      ],
                      [
                        [10, 10, 253],
                      ],
                      [
                        [48, 57, 146],
                      ],
                      [
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [33, 46, -97],
                        [47, 47, 254],
                        [48, 64, -97],
                        [65, 90, 255],
                        [95, 95, 193],
                        [97, 122, 256],
                        [126, 12294, -97],
                        [12295, 12295, 257],
                        [12296, 12320, 196],
                        [12321, 12329, 258],
                        [12330, 19967, 196],
                        [19968, 40869, 259],
                        [40870, 65519, -97],
                      ],
                      [
                      ],
                      [
                        [33, 33, 260],
                        [34, 34, 172],
                        [36, 36, 261],
                        [37, 37, 262],
                        [38, 38, 263],
                        [39, 39, 264],
                        [40, 40, 265],
                        [41, 41, 266],
                        [42, 42, 267],
                        [43, 43, 268],
                        [44, 44, 269],
                        [45, 45, 270],
                        [46, 46, 271],
                        [47, 47, 272],
                        [48, 57, 273],
                        [58, 58, 274],
                        [59, 59, 275],
                        [61, 61, 276],
                        [63, 63, 277],
                        [64, 64, 278],
                        [65, 90, 279],
                        [95, 95, 280],
                        [97, 122, 281],
                        [126, 126, 282],
                        [160, 12294, 283],
                        [12295, 12295, 284],
                        [12296, 12320, 283],
                        [12321, 12329, 285],
                        [12330, 19967, 283],
                        [19968, 40869, 286],
                        [40870, 55295, 283],
                        [63744, 64975, 287],
                        [65008, 65519, 288],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [48, 57, 289],
                        [65, 70, 290],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 33, 291],
                        [34, 35, -97],
                        [36, 36, 292],
                        [37, 37, 293],
                        [38, 38, 294],
                        [39, 39, 295],
                        [40, 40, 296],
                        [41, 41, 297],
                        [42, 42, 298],
                        [43, 43, 299],
                        [44, 44, 300],
                        [45, 45, 301],
                        [46, 46, 302],
                        [47, 47, 303],
                        [48, 57, 304],
                        [58, 58, 305],
                        [59, 59, 306],
                        [61, 61, 307],
                        [63, 63, 190],
                        [64, 64, 308],
                        [65, 90, 309],
                        [95, 95, 310],
                        [97, 122, 311],
                        [126, 126, 312],
                        [160, 12294, 313],
                        [12295, 12295, 314],
                        [12296, 12320, 313],
                        [12321, 12329, 315],
                        [12330, 19967, 313],
                        [19968, 40869, 316],
                        [40870, 55295, 313],
                        [63744, 64975, 317],
                        [65008, 65519, 318],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 33, 319],
                        [34, 35, -97],
                        [36, 36, 320],
                        [37, 37, 321],
                        [38, 38, 322],
                        [39, 39, 323],
                        [40, 40, 324],
                        [41, 41, 325],
                        [42, 42, 326],
                        [43, 43, 327],
                        [44, 44, 328],
                        [45, 45, 329],
                        [46, 46, 330],
                        [47, 47, 331],
                        [48, 57, 332],
                        [58, 58, 333],
                        [59, 59, 334],
                        [61, 61, 335],
                        [63, 63, 336],
                        [64, 64, 337],
                        [65, 90, 338],
                        [95, 95, 339],
                        [97, 122, 340],
                        [126, 126, 341],
                        [160, 12294, 342],
                        [12295, 12295, 343],
                        [12296, 12320, 342],
                        [12321, 12329, 344],
                        [12330, 19967, 342],
                        [19968, 40869, 345],
                        [40870, 55295, 342],
                        [57344, 63743, 346],
                        [63744, 64975, 347],
                        [65008, 65519, 348],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 42, -97],
                        [43, 43, 349],
                        [44, 44, 182],
                        [45, 45, 350],
                        [46, 46, 351],
                        [47, 47, 254],
                        [48, 57, 352],
                        [58, 58, 353],
                        [59, 64, -97],
                        [65, 90, 354],
                        [95, 95, 193],
                        [97, 122, 355],
                        [126, 12294, -97],
                        [12295, 12295, 356],
                        [12296, 12320, 196],
                        [12321, 12329, 357],
                        [12330, 19967, 196],
                        [19968, 40869, 358],
                        [40870, 65519, -97],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -194],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -194],
                      ],
                      [
                        [33, 65519, -194],
                      ],
                      [
                        [33, 65519, -194],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [48, 57, 202],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 116, -108],
                        [117, 117, 359],
                        [118, 40869, -108],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 360],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 361],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 362],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 108, -36],
                        [109, 109, 363],
                        [110, 40869, -117],
                      ],
                      [
                        [48, 98, -125],
                        [99, 99, 364],
                        [100, 40869, -125],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 365],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 366],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 57, 73],
                        [65, 77, 74],
                        [78, 78, 367],
                        [79, 90, 74],
                        [92, 109, -28],
                        [110, 110, 368],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 369],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 370],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 371],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 372],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 373],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 107, -110],
                        [108, 108, 374],
                        [109, 40869, -110],
                      ],
                      [
                        [48, 57, 73],
                        [65, 85, 74],
                        [86, 86, 375],
                        [87, 90, 74],
                        [92, 40869, -24],
                      ],
                      [
                        [48, 107, -110],
                        [108, 108, 376],
                        [109, 110, 77],
                        [111, 111, 377],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 378],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 379],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 380],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 97, -131],
                        [98, 98, 381],
                        [99, 40869, -131],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 382],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 57, 73],
                        [65, 69, 74],
                        [70, 70, 383],
                        [71, 90, 74],
                        [92, 40869, -24],
                      ],
                      [
                        [48, 95, -24],
                        [97, 120, 77],
                        [121, 121, 384],
                        [122, 40869, -42],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 385],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 386],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 103, -42],
                        [104, 104, 387],
                        [105, 122, 77],
                        [183, 40869, -24],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 388],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 98, -125],
                        [99, 99, 389],
                        [100, 40869, -125],
                      ],
                      [
                        [48, 107, -110],
                        [108, 108, 390],
                        [109, 40869, -110],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 391],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 392],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 393],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 57, 73],
                        [65, 66, 74],
                        [67, 67, 394],
                        [68, 81, 74],
                        [82, 82, 395],
                        [83, 90, 74],
                        [92, 40869, -24],
                      ],
                      [
                        [48, 108, -36],
                        [109, 109, 396],
                        [110, 40869, -117],
                      ],
                      [
                        [48, 102, -34],
                        [103, 103, 397],
                        [104, 40869, -119],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 398],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 399],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 400],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 57, 73],
                        [65, 82, 74],
                        [83, 83, 401],
                        [84, 90, 74],
                        [92, 40869, -24],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 402],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 107, -110],
                        [108, 108, 403],
                        [109, 40869, -110],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 404],
                        [102, 40869, -31],
                      ],
                      [
                        [0, 65535, -142],
                      ],
                      [
                        [47, 47, 252],
                      ],
                      [
                        [0, 65535, -62],
                      ],
                      [
                      ],
                      [
                        [33, 33, 405],
                        [34, 35, -97],
                        [36, 36, 406],
                        [37, 37, 407],
                        [38, 38, 408],
                        [39, 39, 409],
                        [40, 40, 410],
                        [41, 41, 411],
                        [42, 42, 412],
                        [43, 43, 413],
                        [44, 44, 414],
                        [45, 45, 415],
                        [46, 46, 416],
                        [47, 47, 254],
                        [48, 57, 417],
                        [58, 58, 418],
                        [59, 59, 419],
                        [61, 61, 420],
                        [63, 63, 190],
                        [64, 64, 421],
                        [65, 90, 422],
                        [95, 95, 423],
                        [97, 122, 424],
                        [126, 126, 425],
                        [160, 12294, 426],
                        [12295, 12295, 427],
                        [12296, 12320, 426],
                        [12321, 12329, 428],
                        [12330, 19967, 426],
                        [19968, 40869, 429],
                        [40870, 55295, 426],
                        [63744, 64975, 430],
                        [65008, 65519, 431],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [48, 57, 432],
                        [65, 70, 433],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [48, 57, 434],
                        [65, 70, 435],
                      ],
                      [
                        [48, 70, -291],
                      ],
                      [
                        [33, 46, -187],
                        [47, 47, 436],
                        [48, 65519, -187],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [48, 57, 437],
                        [65, 70, 438],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 33, 439],
                        [34, 35, -97],
                        [36, 36, 440],
                        [37, 37, 441],
                        [38, 38, 442],
                        [39, 39, 443],
                        [40, 40, 444],
                        [41, 41, 445],
                        [42, 42, 446],
                        [43, 43, 447],
                        [44, 44, 448],
                        [45, 45, 449],
                        [46, 46, 450],
                        [47, 47, 451],
                        [48, 48, 452],
                        [49, 49, 453],
                        [50, 50, 454],
                        [51, 57, 455],
                        [58, 58, 456],
                        [59, 59, 457],
                        [61, 61, 458],
                        [63, 63, 190],
                        [64, 64, 459],
                        [65, 90, 460],
                        [91, 91, 461],
                        [95, 95, 462],
                        [97, 122, 463],
                        [126, 126, 464],
                        [160, 12294, 465],
                        [12295, 12295, 466],
                        [12296, 12320, 465],
                        [12321, 12329, 467],
                        [12330, 19967, 465],
                        [19968, 40869, 468],
                        [40870, 55295, 465],
                        [63744, 64975, 469],
                        [65008, 65519, 470],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [48, 57, 471],
                        [65, 70, 472],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -194],
                      ],
                      [
                        [33, 65519, -194],
                      ],
                      [
                        [33, 65519, -194],
                      ],
                      [
                        [33, 65519, -194],
                      ],
                      [
                        [33, 33, 473],
                        [34, 34, 172],
                        [35, 35, 474],
                        [36, 36, 475],
                        [37, 37, 476],
                        [38, 38, 477],
                        [39, 39, 478],
                        [40, 40, 479],
                        [41, 41, 480],
                        [42, 42, 481],
                        [43, 43, 482],
                        [44, 44, 483],
                        [45, 45, 484],
                        [46, 46, 485],
                        [47, 47, 486],
                        [48, 57, 487],
                        [58, 58, 488],
                        [59, 59, 489],
                        [61, 61, 490],
                        [63, 63, 491],
                        [64, 64, 492],
                        [65, 90, 493],
                        [95, 95, 494],
                        [97, 122, 495],
                        [126, 126, 496],
                        [160, 12294, 497],
                        [12295, 12295, 498],
                        [12296, 12320, 497],
                        [12321, 12329, 499],
                        [12330, 19967, 497],
                        [19968, 40869, 500],
                        [40870, 55295, 497],
                        [63744, 64975, 501],
                        [65008, 65519, 502],
                      ],
                      [
                        [33, 65519, -194],
                      ],
                      [
                        [33, 65519, -194],
                      ],
                      [
                        [33, 65519, -194],
                      ],
                      [
                        [33, 65519, -194],
                      ],
                      [
                        [33, 65519, -194],
                      ],
                      [
                        [48, 108, -36],
                        [109, 109, 503],
                        [110, 40869, -117],
                      ],
                      [
                        [48, 108, -36],
                        [109, 109, 504],
                        [110, 40869, -117],
                      ],
                      [
                        [48, 97, -131],
                        [98, 98, 505],
                        [99, 40869, -131],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 506],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 507],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 508],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 509],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 98, -125],
                        [99, 99, 510],
                        [100, 40869, -125],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 511],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 101, -32],
                        [102, 102, 512],
                        [103, 40869, -105],
                      ],
                      [
                        [48, 95, -24],
                        [97, 117, 77],
                        [118, 118, 513],
                        [119, 40869, -116],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 514],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 515],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 107, -110],
                        [108, 108, 516],
                        [109, 40869, -110],
                      ],
                      [
                        [48, 99, -99],
                        [100, 100, 517],
                        [101, 40869, -99],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 518],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 519],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 520],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 521],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 522],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 523],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 524],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 525],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 116, -108],
                        [117, 117, 526],
                        [118, 40869, -108],
                      ],
                      [
                        [48, 111, -102],
                        [112, 112, 527],
                        [113, 40869, -102],
                      ],
                      [
                        [48, 107, -110],
                        [108, 108, 528],
                        [109, 40869, -110],
                      ],
                      [
                        [48, 99, -99],
                        [100, 100, 529],
                        [101, 40869, -99],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 530],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 98, -125],
                        [99, 99, 531],
                        [100, 40869, -125],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 532],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 533],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 534],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 535],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 98, -125],
                        [99, 99, 536],
                        [100, 40869, -125],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 537],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 538],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 539],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 540],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 541],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 76, -112],
                        [77, 77, 542],
                        [78, 82, 74],
                        [83, 83, 543],
                        [84, 40869, -248],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 544],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 99, -99],
                        [100, 100, 545],
                        [101, 40869, -99],
                      ],
                      [
                        [48, 85, -221],
                        [86, 86, 546],
                        [87, 40869, -221],
                      ],
                      [
                        [48, 99, -99],
                        [100, 100, 547],
                        [101, 40869, -99],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [48, 57, 548],
                        [65, 70, 549],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [48, 57, 550],
                        [65, 70, 551],
                      ],
                      [
                        [48, 70, -434],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 65519, -173],
                      ],
                      [
                        [33, 33, 552],
                        [34, 35, -97],
                        [36, 36, 553],
                        [37, 37, 554],
                        [38, 38, 555],
                        [39, 39, 556],
                        [40, 40, 557],
                        [41, 41, 558],
                        [42, 42, 559],
                        [43, 43, 560],
                        [44, 44, 561],
                        [45, 45, 562],
                        [46, 46, 563],
                        [47, 47, 436],
                        [48, 57, 564],
                        [58, 58, 565],
                        [59, 59, 566],
                        [61, 61, 567],
                        [63, 63, 190],
                        [64, 64, 568],
                        [65, 90, 569],
                        [95, 95, 570],
                        [97, 122, 571],
                        [126, 126, 572],
                        [160, 12294, 573],
                        [12295, 12295, 574],
                        [12296, 12320, 573],
                        [12321, 12329, 575],
                        [12330, 19967, 573],
                        [19968, 40869, 576],
                        [40870, 55295, 573],
                        [63744, 64975, 577],
                        [65008, 65519, 578],
                      ],
                      [
                        [48, 57, 579],
                        [65, 70, 580],
                      ],
                      [
                        [48, 70, -439],
                      ],
                      [
                        [33, 46, -305],
                        [47, 47, 436],
                        [48, 57, 581],
                        [58, 58, 582],
                        [59, 64, -305],
                        [65, 90, 583],
                        [95, 95, 462],
                        [97, 122, 584],
                        [126, 12294, -305],
                        [12295, 12295, 585],
                        [12296, 12320, 465],
                        [12321, 12329, 586],
                        [12330, 19967, 465],
                        [19968, 40869, 587],
                        [40870, 65519, -305],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [48, 57, 588],
                        [65, 70, 589],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 33, 590],
                        [34, 35, -97],
                        [36, 36, 591],
                        [37, 37, 592],
                        [38, 38, 593],
                        [39, 39, 594],
                        [40, 40, 595],
                        [41, 41, 596],
                        [42, 42, 597],
                        [43, 43, 598],
                        [44, 44, 599],
                        [45, 45, 600],
                        [46, 46, 601],
                        [47, 47, 602],
                        [48, 57, 603],
                        [58, 58, 604],
                        [59, 59, 605],
                        [61, 61, 606],
                        [63, 63, 190],
                        [64, 64, 607],
                        [65, 90, 608],
                        [95, 95, 609],
                        [97, 122, 610],
                        [126, 126, 611],
                        [160, 12294, 612],
                        [12295, 12295, 613],
                        [12296, 12320, 612],
                        [12321, 12329, 614],
                        [12330, 19967, 612],
                        [19968, 40869, 615],
                        [40870, 55295, 612],
                        [63744, 64975, 616],
                        [65008, 65519, 617],
                      ],
                      [
                        [33, 44, -305],
                        [45, 45, 618],
                        [46, 46, 619],
                        [47, 47, 451],
                        [48, 57, 620],
                        [58, 64, -305],
                        [65, 90, 621],
                        [95, 95, 462],
                        [97, 122, 622],
                        [126, 12294, -305],
                        [12295, 12295, 623],
                        [12296, 12320, 465],
                        [12321, 12329, 624],
                        [12330, 19967, 465],
                        [19968, 40869, 625],
                        [40870, 65519, -305],
                      ],
                      [
                        [33, 47, -454],
                        [48, 57, 626],
                        [58, 65519, -454],
                      ],
                      [
                        [33, 47, -454],
                        [48, 52, 627],
                        [53, 53, 628],
                        [54, 57, 629],
                        [58, 65519, -454],
                      ],
                      [
                        [33, 47, -454],
                        [48, 57, 629],
                        [58, 65519, -454],
                      ],
                      [
                        [33, 47, -305],
                        [48, 57, 630],
                        [58, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 46, -438],
                        [47, 47, 451],
                        [48, 48, 631],
                        [49, 49, 632],
                        [50, 50, 633],
                        [51, 57, 634],
                        [58, 58, 635],
                        [59, 64, -438],
                        [65, 90, 636],
                        [91, 91, 461],
                        [95, 95, 570],
                        [97, 122, 637],
                        [126, 12294, -438],
                        [12295, 12295, 638],
                        [12296, 12320, 573],
                        [12321, 12329, 639],
                        [12330, 19967, 573],
                        [19968, 40869, 640],
                        [40870, 65519, -438],
                      ],
                      [
                        [33, 45, -454],
                        [46, 46, 641],
                        [47, 65519, -454],
                      ],
                      [
                        [48, 57, 642],
                        [58, 58, 643],
                        [65, 70, 644],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -462],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -462],
                      ],
                      [
                        [33, 65519, -462],
                      ],
                      [
                        [33, 65519, -462],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [48, 57, 645],
                        [65, 70, 646],
                      ],
                      [
                        [48, 70, -473],
                      ],
                      [
                        [33, 46, -355],
                        [47, 47, 647],
                        [48, 65519, -355],
                      ],
                      [
                        [33, 33, 648],
                        [34, 34, 172],
                        [36, 36, 649],
                        [37, 37, 650],
                        [38, 38, 651],
                        [39, 39, 652],
                        [40, 40, 653],
                        [41, 41, 654],
                        [42, 42, 655],
                        [43, 43, 656],
                        [44, 44, 657],
                        [45, 45, 658],
                        [46, 46, 659],
                        [47, 47, 660],
                        [48, 57, 661],
                        [58, 58, 662],
                        [59, 59, 663],
                        [61, 61, 664],
                        [63, 63, 665],
                        [64, 64, 666],
                        [65, 90, 667],
                        [95, 95, 668],
                        [97, 122, 669],
                        [126, 126, 670],
                        [160, 12294, 671],
                        [12295, 12295, 672],
                        [12296, 12320, 671],
                        [12321, 12329, 673],
                        [12330, 19967, 671],
                        [19968, 40869, 674],
                        [40870, 55295, 671],
                        [63744, 64975, 675],
                        [65008, 65519, 676],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [48, 57, 677],
                        [65, 70, 678],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 33, 679],
                        [34, 35, -355],
                        [36, 36, 680],
                        [37, 37, 681],
                        [38, 38, 682],
                        [39, 39, 683],
                        [40, 40, 684],
                        [41, 41, 685],
                        [42, 42, 686],
                        [43, 43, 687],
                        [44, 44, 688],
                        [45, 45, 689],
                        [46, 46, 690],
                        [47, 47, 691],
                        [48, 57, 692],
                        [58, 58, 693],
                        [59, 59, 694],
                        [61, 61, 695],
                        [63, 63, 491],
                        [64, 64, 696],
                        [65, 90, 697],
                        [95, 95, 698],
                        [97, 122, 699],
                        [126, 126, 700],
                        [160, 12294, 701],
                        [12295, 12295, 702],
                        [12296, 12320, 701],
                        [12321, 12329, 703],
                        [12330, 19967, 701],
                        [19968, 40869, 704],
                        [40870, 55295, 701],
                        [63744, 64975, 705],
                        [65008, 65519, 706],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 33, 707],
                        [34, 35, -355],
                        [36, 36, 708],
                        [37, 37, 709],
                        [38, 38, 710],
                        [39, 39, 711],
                        [40, 40, 712],
                        [41, 41, 713],
                        [42, 42, 714],
                        [43, 43, 715],
                        [44, 44, 716],
                        [45, 45, 717],
                        [46, 46, 718],
                        [47, 47, 719],
                        [48, 57, 720],
                        [58, 58, 721],
                        [59, 59, 722],
                        [61, 61, 723],
                        [63, 63, 724],
                        [64, 64, 725],
                        [65, 90, 726],
                        [95, 95, 727],
                        [97, 122, 728],
                        [126, 126, 729],
                        [160, 12294, 730],
                        [12295, 12295, 731],
                        [12296, 12320, 730],
                        [12321, 12329, 732],
                        [12330, 19967, 730],
                        [19968, 40869, 733],
                        [40870, 55295, 730],
                        [57344, 63743, 734],
                        [63744, 64975, 735],
                        [65008, 65519, 736],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [48, 111, -102],
                        [112, 112, 737],
                        [113, 40869, -102],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 738],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 739],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 740],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 111, -102],
                        [112, 112, 741],
                        [113, 40869, -102],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 742],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 743],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 744],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 111, -102],
                        [112, 112, 745],
                        [113, 40869, -102],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 746],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 747],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 107, -110],
                        [108, 108, 748],
                        [109, 40869, -110],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 749],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 107, -110],
                        [108, 108, 750],
                        [109, 40869, -110],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 751],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 752],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 753],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 101, -32],
                        [102, 102, 754],
                        [103, 40869, -105],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 755],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 756],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 111, -102],
                        [112, 112, 757],
                        [113, 40869, -102],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 758],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 759],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 760],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 761],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 762],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 763],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 764],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 95, -24],
                        [97, 119, 77],
                        [120, 120, 765],
                        [121, 40869, -28],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 766],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 99, -99],
                        [100, 100, 767],
                        [101, 40869, -99],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 768],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 769],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 107, -110],
                        [108, 108, 770],
                        [109, 40869, -110],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 771],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 772],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 773],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 774],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 775],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 776],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 777],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 778],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 779],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 57, 780],
                        [65, 70, 781],
                      ],
                      [
                        [48, 70, -550],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -175],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [48, 57, 782],
                        [65, 70, 783],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -293],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [48, 57, 784],
                        [65, 70, 785],
                      ],
                      [
                        [48, 70, -590],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [48, 57, 786],
                        [65, 70, 787],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 33, 788],
                        [34, 35, -97],
                        [36, 36, 789],
                        [37, 37, 790],
                        [38, 38, 791],
                        [39, 39, 792],
                        [40, 40, 793],
                        [41, 41, 794],
                        [42, 42, 795],
                        [43, 43, 796],
                        [44, 44, 797],
                        [45, 45, 798],
                        [46, 46, 799],
                        [47, 47, 602],
                        [48, 57, 800],
                        [58, 58, 801],
                        [59, 59, 802],
                        [61, 61, 803],
                        [63, 63, 190],
                        [64, 64, 804],
                        [65, 90, 805],
                        [95, 95, 806],
                        [97, 122, 807],
                        [126, 126, 808],
                        [160, 12294, 809],
                        [12295, 12295, 810],
                        [12296, 12320, 809],
                        [12321, 12329, 811],
                        [12330, 19967, 809],
                        [19968, 40869, 812],
                        [40870, 55295, 809],
                        [63744, 64975, 813],
                        [65008, 65519, 814],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 45, -454],
                        [46, 47, -441],
                        [48, 57, 620],
                        [58, 64, -441],
                        [65, 65519, -454],
                      ],
                      [
                        [33, 47, -305],
                        [48, 48, 815],
                        [49, 49, 816],
                        [50, 50, 817],
                        [51, 57, 818],
                        [58, 64, -305],
                        [65, 90, 819],
                        [95, 95, 462],
                        [97, 122, 820],
                        [126, 12294, -305],
                        [12295, 12295, 821],
                        [12296, 12320, 465],
                        [12321, 12329, 822],
                        [12330, 19967, 465],
                        [19968, 40869, 823],
                        [40870, 65519, -305],
                      ],
                      [
                        [33, 65519, -462],
                      ],
                      [
                        [33, 65519, -462],
                      ],
                      [
                        [33, 65519, -462],
                      ],
                      [
                        [33, 65519, -462],
                      ],
                      [
                        [33, 65519, -462],
                      ],
                      [
                        [33, 65519, -462],
                      ],
                      [
                        [33, 47, -454],
                        [48, 57, 824],
                        [58, 65519, -454],
                      ],
                      [
                        [33, 47, -454],
                        [48, 57, 825],
                        [58, 65519, -454],
                      ],
                      [
                        [33, 47, -454],
                        [48, 53, 826],
                        [54, 57, 620],
                        [58, 65519, -454],
                      ],
                      [
                        [33, 65519, -454],
                      ],
                      [
                        [33, 65519, -458],
                      ],
                      [
                        [33, 44, -438],
                        [45, 45, 827],
                        [46, 46, 828],
                        [47, 47, 451],
                        [48, 57, 829],
                        [58, 64, -461],
                        [65, 90, 830],
                        [95, 95, 570],
                        [97, 122, 831],
                        [126, 12294, -438],
                        [12295, 12295, 832],
                        [12296, 12320, 573],
                        [12321, 12329, 833],
                        [12330, 19967, 573],
                        [19968, 40869, 834],
                        [40870, 65519, -438],
                      ],
                      [
                        [33, 47, -633],
                        [48, 57, 835],
                        [58, 65519, -633],
                      ],
                      [
                        [33, 47, -633],
                        [48, 52, 836],
                        [53, 53, 837],
                        [54, 57, 838],
                        [58, 65519, -633],
                      ],
                      [
                        [33, 47, -633],
                        [48, 57, 838],
                        [58, 65519, -633],
                      ],
                      [
                        [33, 47, -461],
                        [48, 57, 839],
                        [58, 65519, -438],
                      ],
                      [
                        [33, 45, -633],
                        [46, 46, 840],
                        [47, 65519, -633],
                      ],
                      [
                        [33, 65519, -638],
                      ],
                      [
                        [33, 65519, -638],
                      ],
                      [
                        [33, 65519, -638],
                      ],
                      [
                        [33, 65519, -638],
                      ],
                      [
                        [33, 47, -305],
                        [48, 57, 841],
                        [58, 65519, -621],
                      ],
                      [
                        [48, 57, 842],
                        [58, 58, 843],
                        [65, 70, 844],
                      ],
                      [
                        [58, 58, 845],
                      ],
                      [
                        [48, 70, -644],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 65519, -192],
                      ],
                      [
                        [33, 33, 846],
                        [34, 35, -355],
                        [36, 36, 847],
                        [37, 37, 848],
                        [38, 38, 849],
                        [39, 39, 850],
                        [40, 40, 851],
                        [41, 41, 852],
                        [42, 42, 853],
                        [43, 43, 854],
                        [44, 44, 855],
                        [45, 45, 856],
                        [46, 46, 857],
                        [47, 47, 647],
                        [48, 57, 858],
                        [58, 58, 859],
                        [59, 59, 860],
                        [61, 61, 861],
                        [63, 63, 491],
                        [64, 64, 862],
                        [65, 90, 863],
                        [95, 95, 864],
                        [97, 122, 865],
                        [126, 126, 866],
                        [160, 12294, 867],
                        [12295, 12295, 868],
                        [12296, 12320, 867],
                        [12321, 12329, 869],
                        [12330, 19967, 867],
                        [19968, 40869, 870],
                        [40870, 55295, 867],
                        [63744, 64975, 871],
                        [65008, 65519, 872],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [48, 57, 873],
                        [65, 70, 874],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [48, 57, 875],
                        [65, 70, 876],
                      ],
                      [
                        [48, 70, -679],
                      ],
                      [
                        [33, 46, -488],
                        [47, 47, 877],
                        [48, 65519, -488],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [48, 57, 878],
                        [65, 70, 879],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 33, 880],
                        [34, 35, -355],
                        [36, 36, 881],
                        [37, 37, 882],
                        [38, 38, 883],
                        [39, 39, 884],
                        [40, 40, 885],
                        [41, 41, 886],
                        [42, 42, 887],
                        [43, 43, 888],
                        [44, 44, 889],
                        [45, 45, 890],
                        [46, 46, 891],
                        [47, 47, 892],
                        [48, 48, 893],
                        [49, 49, 894],
                        [50, 50, 895],
                        [51, 57, 896],
                        [58, 58, 897],
                        [59, 59, 898],
                        [61, 61, 899],
                        [63, 63, 491],
                        [64, 64, 900],
                        [65, 90, 901],
                        [91, 91, 902],
                        [95, 95, 903],
                        [97, 122, 904],
                        [126, 126, 905],
                        [160, 12294, 906],
                        [12295, 12295, 907],
                        [12296, 12320, 906],
                        [12321, 12329, 908],
                        [12330, 19967, 906],
                        [19968, 40869, 909],
                        [40870, 55295, 906],
                        [63744, 64975, 910],
                        [65008, 65519, 911],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [48, 57, 912],
                        [65, 70, 913],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 914],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 107, -110],
                        [108, 108, 915],
                        [109, 40869, -110],
                      ],
                      [
                        [48, 102, -34],
                        [103, 103, 916],
                        [104, 40869, -119],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 917],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 918],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 99, -99],
                        [100, 100, 919],
                        [101, 40869, -99],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 69, -231],
                        [70, 70, 920],
                        [71, 40869, -231],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 107, -110],
                        [108, 108, 921],
                        [109, 40869, -110],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 922],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 116, -108],
                        [117, 117, 923],
                        [118, 40869, -108],
                      ],
                      [
                        [48, 99, -99],
                        [100, 100, 924],
                        [101, 114, 77],
                        [115, 115, 925],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 926],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 98, -125],
                        [99, 99, 927],
                        [100, 40869, -125],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 928],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 929],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 57, 73],
                        [65, 78, 74],
                        [79, 79, 930],
                        [80, 90, 74],
                        [92, 40869, -24],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 931],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 98, -125],
                        [99, 99, 932],
                        [100, 40869, -125],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 102, -34],
                        [103, 103, 933],
                        [104, 40869, -119],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 934],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 935],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 936],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 99, -99],
                        [100, 100, 937],
                        [101, 40869, -99],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 938],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 939],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 85, -221],
                        [86, 86, 940],
                        [87, 40869, -221],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 98, -125],
                        [99, 99, 941],
                        [100, 40869, -125],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 942],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 943],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 944],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 99, -99],
                        [100, 100, 945],
                        [101, 40869, -99],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 946],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 117, -371],
                        [118, 118, 947],
                        [119, 40869, -116],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 948],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 949],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 950],
                        [98, 40869, -35],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [33, 65519, -256],
                      ],
                      [
                        [48, 57, 951],
                        [65, 70, 952],
                      ],
                      [
                        [48, 70, -784],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [33, 65519, -441],
                      ],
                      [
                        [48, 57, 953],
                        [65, 70, 954],
                      ],
                      [
                        [48, 70, -788],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [48, 57, 955],
                        [65, 70, 956],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 44, -305],
                        [45, 45, 957],
                        [46, 46, 958],
                        [47, 47, 451],
                        [48, 57, 959],
                        [58, 64, -305],
                        [65, 90, 960],
                        [95, 95, 462],
                        [97, 122, 961],
                        [126, 12294, -305],
                        [12295, 12295, 962],
                        [12296, 12320, 465],
                        [12321, 12329, 963],
                        [12330, 19967, 465],
                        [19968, 40869, 964],
                        [40870, 65519, -305],
                      ],
                      [
                        [33, 47, -817],
                        [48, 57, 965],
                        [58, 65519, -817],
                      ],
                      [
                        [33, 47, -817],
                        [48, 52, 966],
                        [53, 53, 967],
                        [54, 57, 968],
                        [58, 65519, -817],
                      ],
                      [
                        [33, 47, -817],
                        [48, 57, 968],
                        [58, 65519, -817],
                      ],
                      [
                        [33, 45, -817],
                        [46, 47, -462],
                        [48, 65519, -817],
                      ],
                      [
                        [33, 65519, -821],
                      ],
                      [
                        [33, 65519, -821],
                      ],
                      [
                        [33, 65519, -821],
                      ],
                      [
                        [33, 65519, -821],
                      ],
                      [
                        [33, 65519, -454],
                      ],
                      [
                        [33, 65519, -454],
                      ],
                      [
                        [33, 65519, -454],
                      ],
                      [
                        [33, 45, -633],
                        [46, 47, -438],
                        [48, 57, 829],
                        [58, 64, -438],
                        [65, 65519, -633],
                      ],
                      [
                        [33, 47, -461],
                        [48, 48, 969],
                        [49, 49, 970],
                        [50, 50, 971],
                        [51, 57, 972],
                        [58, 64, -461],
                        [65, 90, 973],
                        [95, 95, 570],
                        [97, 122, 974],
                        [126, 12294, -438],
                        [12295, 12295, 975],
                        [12296, 12320, 573],
                        [12321, 12329, 976],
                        [12330, 19967, 573],
                        [19968, 40869, 977],
                        [40870, 65519, -438],
                      ],
                      [
                        [33, 65519, -638],
                      ],
                      [
                        [33, 65519, -638],
                      ],
                      [
                        [33, 65519, -638],
                      ],
                      [
                        [33, 65519, -638],
                      ],
                      [
                        [33, 65519, -638],
                      ],
                      [
                        [33, 65519, -638],
                      ],
                      [
                        [33, 47, -633],
                        [48, 57, 978],
                        [58, 65519, -633],
                      ],
                      [
                        [33, 47, -633],
                        [48, 57, 979],
                        [58, 65519, -633],
                      ],
                      [
                        [33, 47, -633],
                        [48, 53, 980],
                        [54, 57, 829],
                        [58, 65519, -633],
                      ],
                      [
                        [33, 65519, -633],
                      ],
                      [
                        [33, 65519, -637],
                      ],
                      [
                        [33, 47, -461],
                        [48, 57, 981],
                        [58, 65519, -830],
                      ],
                      [
                        [33, 65519, -821],
                      ],
                      [
                        [48, 57, 982],
                        [58, 58, 843],
                        [65, 70, 983],
                      ],
                      [
                        [48, 57, 642],
                        [58, 58, 845],
                        [65, 70, 644],
                      ],
                      [
                        [48, 70, -844],
                      ],
                      [
                        [48, 48, 984],
                        [49, 49, 985],
                        [50, 50, 986],
                        [51, 57, 987],
                        [65, 70, 988],
                        [93, 93, 989],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [48, 57, 990],
                        [65, 70, 991],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [48, 57, 992],
                        [65, 70, 993],
                      ],
                      [
                        [48, 70, -875],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 65519, -475],
                      ],
                      [
                        [33, 33, 994],
                        [34, 35, -355],
                        [36, 36, 995],
                        [37, 37, 996],
                        [38, 38, 997],
                        [39, 39, 998],
                        [40, 40, 999],
                        [41, 41, 1000],
                        [42, 42, 1001],
                        [43, 43, 1002],
                        [44, 44, 1003],
                        [45, 45, 1004],
                        [46, 46, 1005],
                        [47, 47, 877],
                        [48, 57, 1006],
                        [58, 58, 1007],
                        [59, 59, 1008],
                        [61, 61, 1009],
                        [63, 63, 491],
                        [64, 64, 1010],
                        [65, 90, 1011],
                        [95, 95, 1012],
                        [97, 122, 1013],
                        [126, 126, 1014],
                        [160, 12294, 1015],
                        [12295, 12295, 1016],
                        [12296, 12320, 1015],
                        [12321, 12329, 1017],
                        [12330, 19967, 1015],
                        [19968, 40869, 1018],
                        [40870, 55295, 1015],
                        [63744, 64975, 1019],
                        [65008, 65519, 1020],
                      ],
                      [
                        [48, 57, 1021],
                        [65, 70, 1022],
                      ],
                      [
                        [48, 70, -880],
                      ],
                      [
                        [33, 46, -693],
                        [47, 47, 877],
                        [48, 57, 1023],
                        [58, 58, 1024],
                        [59, 64, -693],
                        [65, 90, 1025],
                        [95, 95, 903],
                        [97, 122, 1026],
                        [126, 12294, -693],
                        [12295, 12295, 1027],
                        [12296, 12320, 906],
                        [12321, 12329, 1028],
                        [12330, 19967, 906],
                        [19968, 40869, 1029],
                        [40870, 65519, -693],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [48, 57, 1030],
                        [65, 70, 1031],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 33, 1032],
                        [34, 35, -355],
                        [36, 36, 1033],
                        [37, 37, 1034],
                        [38, 38, 1035],
                        [39, 39, 1036],
                        [40, 40, 1037],
                        [41, 41, 1038],
                        [42, 42, 1039],
                        [43, 43, 1040],
                        [44, 44, 1041],
                        [45, 45, 1042],
                        [46, 46, 1043],
                        [47, 47, 1044],
                        [48, 57, 1045],
                        [58, 58, 1046],
                        [59, 59, 1047],
                        [61, 61, 1048],
                        [63, 63, 491],
                        [64, 64, 1049],
                        [65, 90, 1050],
                        [95, 95, 1051],
                        [97, 122, 1052],
                        [126, 126, 1053],
                        [160, 12294, 1054],
                        [12295, 12295, 1055],
                        [12296, 12320, 1054],
                        [12321, 12329, 1056],
                        [12330, 19967, 1054],
                        [19968, 40869, 1057],
                        [40870, 55295, 1054],
                        [63744, 64975, 1058],
                        [65008, 65519, 1059],
                      ],
                      [
                        [33, 44, -693],
                        [45, 45, 1060],
                        [46, 46, 1061],
                        [47, 47, 892],
                        [48, 57, 1062],
                        [58, 64, -693],
                        [65, 90, 1063],
                        [95, 95, 903],
                        [97, 122, 1064],
                        [126, 12294, -693],
                        [12295, 12295, 1065],
                        [12296, 12320, 906],
                        [12321, 12329, 1066],
                        [12330, 19967, 906],
                        [19968, 40869, 1067],
                        [40870, 65519, -693],
                      ],
                      [
                        [33, 47, -895],
                        [48, 57, 1068],
                        [58, 65519, -895],
                      ],
                      [
                        [33, 47, -895],
                        [48, 52, 1069],
                        [53, 53, 1070],
                        [54, 57, 1071],
                        [58, 65519, -895],
                      ],
                      [
                        [33, 47, -895],
                        [48, 57, 1071],
                        [58, 65519, -895],
                      ],
                      [
                        [33, 47, -693],
                        [48, 57, 1072],
                        [58, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 46, -879],
                        [47, 47, 892],
                        [48, 48, 1073],
                        [49, 49, 1074],
                        [50, 50, 1075],
                        [51, 57, 1076],
                        [58, 58, 1077],
                        [59, 64, -879],
                        [65, 90, 1078],
                        [91, 91, 902],
                        [95, 95, 1012],
                        [97, 122, 1079],
                        [126, 12294, -879],
                        [12295, 12295, 1080],
                        [12296, 12320, 1015],
                        [12321, 12329, 1081],
                        [12330, 19967, 1015],
                        [19968, 40869, 1082],
                        [40870, 65519, -879],
                      ],
                      [
                        [33, 45, -895],
                        [46, 46, 1083],
                        [47, 65519, -895],
                      ],
                      [
                        [48, 57, 1084],
                        [58, 58, 1085],
                        [65, 70, 1086],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -903],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -903],
                      ],
                      [
                        [33, 65519, -903],
                      ],
                      [
                        [33, 65519, -903],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [48, 57, 1087],
                        [65, 70, 1088],
                      ],
                      [
                        [48, 70, -914],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1089],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1090],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 1091],
                        [115, 40869, -39],
                      ],
                      [
                        [32, 32, 1092],
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 57, 73],
                        [65, 65, 74],
                        [66, 66, 1093],
                        [67, 90, 74],
                        [92, 40869, -24],
                      ],
                      [
                        [48, 116, -108],
                        [117, 117, 1094],
                        [118, 40869, -108],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1095],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1096],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1097],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 65, -921],
                        [66, 66, 1098],
                        [67, 40869, -921],
                      ],
                      [
                        [48, 83, -122],
                        [84, 84, 1099],
                        [85, 40869, -122],
                      ],
                      [
                        [48, 78, -758],
                        [79, 79, 1100],
                        [80, 40869, -758],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1101],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 98, -125],
                        [99, 99, 1102],
                        [100, 40869, -125],
                      ],
                      [
                        [48, 78, -758],
                        [79, 79, 1103],
                        [80, 40869, -758],
                      ],
                      [
                        [48, 101, -32],
                        [102, 102, 1104],
                        [103, 40869, -105],
                      ],
                      [
                        [48, 98, -125],
                        [99, 99, 1105],
                        [100, 40869, -125],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1106],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 120, -232],
                        [121, 121, 1107],
                        [122, 40869, -42],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1108],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 1109],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 99, -99],
                        [100, 100, 1110],
                        [101, 40869, -99],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1111],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 117, -371],
                        [118, 118, 1112],
                        [119, 40869, -116],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 1113],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 1114],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1115],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1116],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1117],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1118],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1119],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 117, -371],
                        [118, 118, 1120],
                        [119, 40869, -116],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1121],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1122],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1123],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1124],
                        [117, 40869, -123],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -438],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [33, 65519, -453],
                      ],
                      [
                        [48, 57, 1125],
                        [65, 70, 1126],
                      ],
                      [
                        [48, 70, -957],
                      ],
                      [
                        [33, 45, -817],
                        [46, 47, -441],
                        [48, 57, 959],
                        [58, 64, -441],
                        [65, 65519, -817],
                      ],
                      [
                        [33, 47, -305],
                        [48, 48, 1127],
                        [49, 49, 1128],
                        [50, 50, 1129],
                        [51, 57, 1130],
                        [58, 65519, -621],
                      ],
                      [
                        [33, 65519, -821],
                      ],
                      [
                        [33, 65519, -821],
                      ],
                      [
                        [33, 65519, -821],
                      ],
                      [
                        [33, 65519, -821],
                      ],
                      [
                        [33, 65519, -821],
                      ],
                      [
                        [33, 65519, -821],
                      ],
                      [
                        [33, 47, -817],
                        [48, 57, 1131],
                        [58, 65519, -817],
                      ],
                      [
                        [33, 47, -817],
                        [48, 57, 1132],
                        [58, 65519, -817],
                      ],
                      [
                        [33, 47, -817],
                        [48, 53, 1133],
                        [54, 57, 959],
                        [58, 65519, -817],
                      ],
                      [
                        [33, 65519, -817],
                      ],
                      [
                        [33, 44, -438],
                        [45, 45, 1134],
                        [46, 46, 1135],
                        [47, 47, 451],
                        [48, 57, 1136],
                        [58, 64, -461],
                        [65, 90, 1137],
                        [95, 95, 570],
                        [97, 122, 1138],
                        [126, 12294, -438],
                        [12295, 12295, 1139],
                        [12296, 12320, 573],
                        [12321, 12329, 1140],
                        [12330, 19967, 573],
                        [19968, 40869, 1141],
                        [40870, 65519, -438],
                      ],
                      [
                        [33, 47, -971],
                        [48, 57, 1142],
                        [58, 65519, -971],
                      ],
                      [
                        [33, 47, -971],
                        [48, 52, 1143],
                        [53, 53, 1144],
                        [54, 57, 1145],
                        [58, 65519, -971],
                      ],
                      [
                        [33, 47, -971],
                        [48, 57, 1145],
                        [58, 65519, -971],
                      ],
                      [
                        [33, 45, -971],
                        [46, 47, -638],
                        [48, 65519, -971],
                      ],
                      [
                        [33, 65519, -975],
                      ],
                      [
                        [33, 65519, -975],
                      ],
                      [
                        [33, 65519, -975],
                      ],
                      [
                        [33, 65519, -975],
                      ],
                      [
                        [33, 65519, -633],
                      ],
                      [
                        [33, 65519, -633],
                      ],
                      [
                        [33, 65519, -633],
                      ],
                      [
                        [33, 65519, -975],
                      ],
                      [
                        [48, 57, 1146],
                        [58, 58, 843],
                        [65, 70, 1147],
                      ],
                      [
                        [48, 70, -984],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 57, 1149],
                        [58, 58, 1150],
                        [65, 70, 1151],
                        [93, 93, 989],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 57, 1152],
                        [58, 93, -986],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 52, 1153],
                        [53, 53, 1154],
                        [54, 57, 1155],
                        [58, 93, -986],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 57, 1155],
                        [58, 93, -986],
                      ],
                      [
                        [48, 93, -986],
                      ],
                      [
                        [34, 35, -97],
                        [47, 47, 1156],
                        [58, 58, 1157],
                        [63, 63, 190],
                      ],
                      [
                        [48, 57, 1158],
                        [65, 70, 1159],
                      ],
                      [
                        [48, 70, -992],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -476],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [48, 57, 1160],
                        [65, 70, 1161],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -681],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [48, 57, 1162],
                        [65, 70, 1163],
                      ],
                      [
                        [48, 70, -1032],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [48, 57, 1164],
                        [65, 70, 1165],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 33, 1166],
                        [34, 35, -355],
                        [36, 36, 1167],
                        [37, 37, 1168],
                        [38, 38, 1169],
                        [39, 39, 1170],
                        [40, 40, 1171],
                        [41, 41, 1172],
                        [42, 42, 1173],
                        [43, 43, 1174],
                        [44, 44, 1175],
                        [45, 45, 1176],
                        [46, 46, 1177],
                        [47, 47, 1044],
                        [48, 57, 1178],
                        [58, 58, 1179],
                        [59, 59, 1180],
                        [61, 61, 1181],
                        [63, 63, 491],
                        [64, 64, 1182],
                        [65, 90, 1183],
                        [95, 95, 1184],
                        [97, 122, 1185],
                        [126, 126, 1186],
                        [160, 12294, 1187],
                        [12295, 12295, 1188],
                        [12296, 12320, 1187],
                        [12321, 12329, 1189],
                        [12330, 19967, 1187],
                        [19968, 40869, 1190],
                        [40870, 55295, 1187],
                        [63744, 64975, 1191],
                        [65008, 65519, 1192],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 45, -895],
                        [46, 47, -882],
                        [48, 57, 1062],
                        [58, 64, -882],
                        [65, 65519, -895],
                      ],
                      [
                        [33, 47, -693],
                        [48, 48, 1193],
                        [49, 49, 1194],
                        [50, 50, 1195],
                        [51, 57, 1196],
                        [58, 64, -693],
                        [65, 90, 1197],
                        [95, 95, 903],
                        [97, 122, 1198],
                        [126, 12294, -693],
                        [12295, 12295, 1199],
                        [12296, 12320, 906],
                        [12321, 12329, 1200],
                        [12330, 19967, 906],
                        [19968, 40869, 1201],
                        [40870, 65519, -693],
                      ],
                      [
                        [33, 65519, -903],
                      ],
                      [
                        [33, 65519, -903],
                      ],
                      [
                        [33, 65519, -903],
                      ],
                      [
                        [33, 65519, -903],
                      ],
                      [
                        [33, 65519, -903],
                      ],
                      [
                        [33, 65519, -903],
                      ],
                      [
                        [33, 47, -895],
                        [48, 57, 1202],
                        [58, 65519, -895],
                      ],
                      [
                        [33, 47, -895],
                        [48, 57, 1203],
                        [58, 65519, -895],
                      ],
                      [
                        [33, 47, -895],
                        [48, 53, 1204],
                        [54, 57, 1062],
                        [58, 65519, -895],
                      ],
                      [
                        [33, 65519, -895],
                      ],
                      [
                        [33, 65519, -899],
                      ],
                      [
                        [33, 44, -879],
                        [45, 45, 1205],
                        [46, 46, 1206],
                        [47, 47, 892],
                        [48, 57, 1207],
                        [58, 64, -902],
                        [65, 90, 1208],
                        [95, 95, 1012],
                        [97, 122, 1209],
                        [126, 12294, -879],
                        [12295, 12295, 1210],
                        [12296, 12320, 1015],
                        [12321, 12329, 1211],
                        [12330, 19967, 1015],
                        [19968, 40869, 1212],
                        [40870, 65519, -879],
                      ],
                      [
                        [33, 47, -1075],
                        [48, 57, 1213],
                        [58, 65519, -1075],
                      ],
                      [
                        [33, 47, -1075],
                        [48, 52, 1214],
                        [53, 53, 1215],
                        [54, 57, 1216],
                        [58, 65519, -1075],
                      ],
                      [
                        [33, 47, -1075],
                        [48, 57, 1216],
                        [58, 65519, -1075],
                      ],
                      [
                        [33, 47, -902],
                        [48, 57, 1217],
                        [58, 65519, -879],
                      ],
                      [
                        [33, 45, -1075],
                        [46, 46, 1218],
                        [47, 65519, -1075],
                      ],
                      [
                        [33, 65519, -1080],
                      ],
                      [
                        [33, 65519, -1080],
                      ],
                      [
                        [33, 65519, -1080],
                      ],
                      [
                        [33, 65519, -1080],
                      ],
                      [
                        [33, 47, -693],
                        [48, 57, 1219],
                        [58, 65519, -1063],
                      ],
                      [
                        [48, 57, 1220],
                        [58, 58, 1221],
                        [65, 70, 1222],
                      ],
                      [
                        [58, 58, 1223],
                      ],
                      [
                        [48, 70, -1086],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [33, 65519, -493],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 1224],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1225],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 1226],
                        [98, 40869, -35],
                      ],
                      [
                        [0, 65535, -63],
                      ],
                      [
                        [48, 120, -232],
                        [121, 121, 1227],
                        [122, 40869, -42],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 1228],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 1229],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 1230],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 120, -232],
                        [121, 121, 1231],
                        [122, 40869, -42],
                      ],
                      [
                        [48, 120, -232],
                        [121, 121, 1232],
                        [122, 40869, -42],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 1233],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1234],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 101, -32],
                        [102, 102, 1235],
                        [103, 40869, -105],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1236],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1237],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 1238],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 1239],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1240],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1241],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1242],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 57, 73],
                        [65, 72, 74],
                        [73, 73, 1243],
                        [74, 90, 74],
                        [92, 40869, -24],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 1244],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 111, -102],
                        [112, 112, 1245],
                        [113, 40869, -102],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1246],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 98, -125],
                        [99, 99, 1247],
                        [100, 40869, -125],
                      ],
                      [
                        [48, 117, -371],
                        [118, 118, 1248],
                        [119, 40869, -116],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 1249],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1250],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 98, -125],
                        [99, 99, 1251],
                        [100, 40869, -125],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 1252],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 1253],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 1254],
                        [112, 40869, -30],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 65519, -604],
                      ],
                      [
                        [33, 45, -817],
                        [46, 46, 1255],
                        [47, 65519, -817],
                      ],
                      [
                        [33, 47, -1129],
                        [48, 57, 1256],
                        [58, 65519, -817],
                      ],
                      [
                        [33, 47, -1129],
                        [48, 52, 1257],
                        [53, 53, 1258],
                        [54, 57, 1259],
                        [58, 65519, -817],
                      ],
                      [
                        [33, 47, -1129],
                        [48, 57, 1259],
                        [58, 65519, -817],
                      ],
                      [
                        [33, 65519, -817],
                      ],
                      [
                        [33, 65519, -817],
                      ],
                      [
                        [33, 65519, -817],
                      ],
                      [
                        [33, 45, -971],
                        [46, 47, -438],
                        [48, 57, 1136],
                        [58, 64, -438],
                        [65, 65519, -971],
                      ],
                      [
                        [33, 47, -461],
                        [48, 48, 1260],
                        [49, 49, 1261],
                        [50, 50, 1262],
                        [51, 57, 1263],
                        [58, 65519, -830],
                      ],
                      [
                        [33, 65519, -975],
                      ],
                      [
                        [33, 65519, -975],
                      ],
                      [
                        [33, 65519, -975],
                      ],
                      [
                        [33, 65519, -975],
                      ],
                      [
                        [33, 65519, -975],
                      ],
                      [
                        [33, 65519, -975],
                      ],
                      [
                        [33, 47, -971],
                        [48, 57, 1264],
                        [58, 65519, -971],
                      ],
                      [
                        [33, 47, -971],
                        [48, 57, 1265],
                        [58, 65519, -971],
                      ],
                      [
                        [33, 47, -971],
                        [48, 53, 1266],
                        [54, 57, 1136],
                        [58, 65519, -971],
                      ],
                      [
                        [33, 65519, -971],
                      ],
                      [
                        [58, 58, 843],
                      ],
                      [
                        [58, 58, 843],
                      ],
                      [
                        [48, 48, 1267],
                        [49, 49, 1268],
                        [50, 50, 1269],
                        [51, 57, 1270],
                      ],
                      [
                        [48, 57, 1271],
                        [58, 58, 1150],
                        [65, 70, 1272],
                        [93, 93, 989],
                      ],
                      [
                        [48, 48, 1273],
                        [49, 49, 1274],
                        [50, 50, 1275],
                        [51, 57, 1276],
                        [65, 70, 1277],
                      ],
                      [
                        [48, 93, -1151],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 57, 1278],
                        [58, 93, -1151],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 57, 1279],
                        [58, 93, -1151],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 53, 1280],
                        [54, 57, 1271],
                        [58, 93, -1151],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 93, -1151],
                      ],
                      [
                        [33, 33, 1281],
                        [34, 35, -97],
                        [36, 36, 1282],
                        [37, 37, 1283],
                        [38, 38, 1284],
                        [39, 39, 1285],
                        [40, 40, 1286],
                        [41, 41, 1287],
                        [42, 42, 1288],
                        [43, 43, 1289],
                        [44, 44, 1290],
                        [45, 45, 1291],
                        [46, 46, 1292],
                        [47, 47, 1293],
                        [48, 57, 1294],
                        [58, 58, 1295],
                        [59, 59, 1296],
                        [61, 61, 1297],
                        [63, 63, 190],
                        [64, 64, 1298],
                        [65, 90, 1299],
                        [95, 95, 1300],
                        [97, 122, 1301],
                        [126, 126, 1302],
                        [160, 12294, 1303],
                        [12295, 12295, 1304],
                        [12296, 12320, 1303],
                        [12321, 12329, 1305],
                        [12330, 19967, 1303],
                        [19968, 40869, 1306],
                        [40870, 55295, 1303],
                        [63744, 64975, 1307],
                        [65008, 65519, 1308],
                      ],
                      [
                        [34, 47, -991],
                        [48, 57, 1309],
                        [63, 63, 190],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [33, 65519, -649],
                      ],
                      [
                        [48, 57, 1310],
                        [65, 70, 1311],
                      ],
                      [
                        [48, 70, -1162],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [33, 65519, -882],
                      ],
                      [
                        [48, 57, 1312],
                        [65, 70, 1313],
                      ],
                      [
                        [48, 70, -1166],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [48, 57, 1314],
                        [65, 70, 1315],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 44, -693],
                        [45, 45, 1316],
                        [46, 46, 1317],
                        [47, 47, 892],
                        [48, 57, 1318],
                        [58, 64, -693],
                        [65, 90, 1319],
                        [95, 95, 903],
                        [97, 122, 1320],
                        [126, 12294, -693],
                        [12295, 12295, 1321],
                        [12296, 12320, 906],
                        [12321, 12329, 1322],
                        [12330, 19967, 906],
                        [19968, 40869, 1323],
                        [40870, 65519, -693],
                      ],
                      [
                        [33, 47, -1195],
                        [48, 57, 1324],
                        [58, 65519, -1195],
                      ],
                      [
                        [33, 47, -1195],
                        [48, 52, 1325],
                        [53, 53, 1326],
                        [54, 57, 1327],
                        [58, 65519, -1195],
                      ],
                      [
                        [33, 47, -1195],
                        [48, 57, 1327],
                        [58, 65519, -1195],
                      ],
                      [
                        [33, 45, -1195],
                        [46, 47, -903],
                        [48, 65519, -1195],
                      ],
                      [
                        [33, 65519, -1199],
                      ],
                      [
                        [33, 65519, -1199],
                      ],
                      [
                        [33, 65519, -1199],
                      ],
                      [
                        [33, 65519, -1199],
                      ],
                      [
                        [33, 65519, -895],
                      ],
                      [
                        [33, 65519, -895],
                      ],
                      [
                        [33, 65519, -895],
                      ],
                      [
                        [33, 45, -1075],
                        [46, 47, -879],
                        [48, 57, 1207],
                        [58, 64, -879],
                        [65, 65519, -1075],
                      ],
                      [
                        [33, 47, -902],
                        [48, 48, 1328],
                        [49, 49, 1329],
                        [50, 50, 1330],
                        [51, 57, 1331],
                        [58, 64, -902],
                        [65, 90, 1332],
                        [95, 95, 1012],
                        [97, 122, 1333],
                        [126, 12294, -879],
                        [12295, 12295, 1334],
                        [12296, 12320, 1015],
                        [12321, 12329, 1335],
                        [12330, 19967, 1015],
                        [19968, 40869, 1336],
                        [40870, 65519, -879],
                      ],
                      [
                        [33, 65519, -1080],
                      ],
                      [
                        [33, 65519, -1080],
                      ],
                      [
                        [33, 65519, -1080],
                      ],
                      [
                        [33, 65519, -1080],
                      ],
                      [
                        [33, 65519, -1080],
                      ],
                      [
                        [33, 65519, -1080],
                      ],
                      [
                        [33, 47, -1075],
                        [48, 57, 1337],
                        [58, 65519, -1075],
                      ],
                      [
                        [33, 47, -1075],
                        [48, 57, 1338],
                        [58, 65519, -1075],
                      ],
                      [
                        [33, 47, -1075],
                        [48, 53, 1339],
                        [54, 57, 1207],
                        [58, 65519, -1075],
                      ],
                      [
                        [33, 65519, -1075],
                      ],
                      [
                        [33, 65519, -1079],
                      ],
                      [
                        [33, 47, -902],
                        [48, 57, 1340],
                        [58, 65519, -1208],
                      ],
                      [
                        [33, 65519, -1199],
                      ],
                      [
                        [48, 57, 1341],
                        [58, 58, 1221],
                        [65, 70, 1342],
                      ],
                      [
                        [48, 57, 1084],
                        [58, 58, 1223],
                        [65, 70, 1086],
                      ],
                      [
                        [48, 70, -1222],
                      ],
                      [
                        [48, 48, 1343],
                        [49, 49, 1344],
                        [50, 50, 1345],
                        [51, 57, 1346],
                        [65, 70, 1347],
                        [93, 93, 1348],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 1349],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 120, -232],
                        [121, 121, 1350],
                        [122, 40869, -42],
                      ],
                      [
                        [48, 111, -102],
                        [112, 112, 1351],
                        [113, 40869, -102],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 98, -125],
                        [99, 99, 1352],
                        [100, 40869, -125],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1353],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 1354],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 111, -102],
                        [112, 112, 1355],
                        [113, 40869, -102],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1356],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 1357],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 1358],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1359],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1360],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1361],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 1362],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1363],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1364],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 1365],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1366],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1367],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 98, -125],
                        [99, 99, 1368],
                        [100, 40869, -125],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1369],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 1370],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 1371],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 1372],
                        [115, 40869, -39],
                      ],
                      [
                        [33, 47, -305],
                        [48, 48, 1373],
                        [49, 49, 1374],
                        [50, 50, 1375],
                        [51, 57, 1376],
                        [58, 65519, -621],
                      ],
                      [
                        [33, 47, -1129],
                        [48, 57, 1377],
                        [58, 65519, -817],
                      ],
                      [
                        [33, 47, -1129],
                        [48, 57, 1378],
                        [58, 65519, -817],
                      ],
                      [
                        [33, 47, -1129],
                        [48, 53, 1379],
                        [54, 65519, -969],
                      ],
                      [
                        [33, 65519, -1129],
                      ],
                      [
                        [33, 45, -971],
                        [46, 46, 1380],
                        [47, 65519, -971],
                      ],
                      [
                        [33, 47, -1262],
                        [48, 57, 1381],
                        [58, 65519, -971],
                      ],
                      [
                        [33, 47, -1262],
                        [48, 52, 1382],
                        [53, 53, 1383],
                        [54, 57, 1384],
                        [58, 65519, -971],
                      ],
                      [
                        [33, 47, -1262],
                        [48, 57, 1384],
                        [58, 65519, -971],
                      ],
                      [
                        [33, 65519, -971],
                      ],
                      [
                        [33, 65519, -971],
                      ],
                      [
                        [33, 65519, -971],
                      ],
                      [
                        [46, 46, 1385],
                      ],
                      [
                        [46, 46, 1385],
                        [48, 57, 1386],
                      ],
                      [
                        [46, 46, 1385],
                        [48, 52, 1387],
                        [53, 53, 1388],
                        [54, 57, 1389],
                      ],
                      [
                        [46, 46, 1385],
                        [48, 57, 1389],
                      ],
                      [
                        [48, 57, 1390],
                        [58, 58, 1150],
                        [65, 70, 1391],
                        [93, 93, 989],
                      ],
                      [
                        [48, 93, -1273],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 57, 1392],
                        [58, 58, 1150],
                        [65, 70, 1393],
                        [93, 93, 989],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 57, 1394],
                        [58, 93, -1275],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 52, 1395],
                        [53, 53, 1396],
                        [54, 57, 1397],
                        [58, 93, -1275],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 57, 1397],
                        [58, 93, -1275],
                      ],
                      [
                        [48, 93, -1275],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 93, -1273],
                      ],
                      [
                        [46, 93, -1280],
                      ],
                      [
                        [46, 93, -1280],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [48, 57, 1398],
                        [65, 70, 1399],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 33, 1400],
                        [34, 35, -97],
                        [36, 36, 1401],
                        [37, 37, 1402],
                        [38, 38, 1403],
                        [39, 39, 1404],
                        [40, 40, 1405],
                        [41, 41, 1406],
                        [42, 42, 1407],
                        [43, 43, 1408],
                        [44, 44, 1409],
                        [45, 45, 1410],
                        [46, 46, 1411],
                        [47, 47, 1293],
                        [48, 57, 1412],
                        [58, 58, 1413],
                        [59, 59, 1414],
                        [61, 61, 1415],
                        [63, 63, 190],
                        [64, 64, 1416],
                        [65, 90, 1417],
                        [95, 95, 1418],
                        [97, 122, 1419],
                        [126, 126, 1420],
                        [160, 12294, 1421],
                        [12295, 12295, 1422],
                        [12296, 12320, 1421],
                        [12321, 12329, 1423],
                        [12330, 19967, 1421],
                        [19968, 40869, 1424],
                        [40870, 55295, 1421],
                        [63744, 64975, 1425],
                        [65008, 65519, 1426],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [34, 63, -1159],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -879],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [33, 65519, -894],
                      ],
                      [
                        [48, 57, 1427],
                        [65, 70, 1428],
                      ],
                      [
                        [48, 70, -1316],
                      ],
                      [
                        [33, 45, -1195],
                        [46, 47, -882],
                        [48, 57, 1318],
                        [58, 64, -882],
                        [65, 65519, -1195],
                      ],
                      [
                        [33, 47, -693],
                        [48, 48, 1429],
                        [49, 49, 1430],
                        [50, 50, 1431],
                        [51, 57, 1432],
                        [58, 65519, -1063],
                      ],
                      [
                        [33, 65519, -1199],
                      ],
                      [
                        [33, 65519, -1199],
                      ],
                      [
                        [33, 65519, -1199],
                      ],
                      [
                        [33, 65519, -1199],
                      ],
                      [
                        [33, 65519, -1199],
                      ],
                      [
                        [33, 65519, -1199],
                      ],
                      [
                        [33, 47, -1195],
                        [48, 57, 1433],
                        [58, 65519, -1195],
                      ],
                      [
                        [33, 47, -1195],
                        [48, 57, 1434],
                        [58, 65519, -1195],
                      ],
                      [
                        [33, 47, -1195],
                        [48, 53, 1435],
                        [54, 57, 1318],
                        [58, 65519, -1195],
                      ],
                      [
                        [33, 65519, -1195],
                      ],
                      [
                        [33, 44, -879],
                        [45, 45, 1436],
                        [46, 46, 1437],
                        [47, 47, 892],
                        [48, 57, 1438],
                        [58, 64, -902],
                        [65, 90, 1439],
                        [95, 95, 1012],
                        [97, 122, 1440],
                        [126, 12294, -879],
                        [12295, 12295, 1441],
                        [12296, 12320, 1015],
                        [12321, 12329, 1442],
                        [12330, 19967, 1015],
                        [19968, 40869, 1443],
                        [40870, 65519, -879],
                      ],
                      [
                        [33, 47, -1330],
                        [48, 57, 1444],
                        [58, 65519, -1330],
                      ],
                      [
                        [33, 47, -1330],
                        [48, 52, 1445],
                        [53, 53, 1446],
                        [54, 57, 1447],
                        [58, 65519, -1330],
                      ],
                      [
                        [33, 47, -1330],
                        [48, 57, 1447],
                        [58, 65519, -1330],
                      ],
                      [
                        [33, 45, -1330],
                        [46, 47, -1080],
                        [48, 65519, -1330],
                      ],
                      [
                        [33, 65519, -1334],
                      ],
                      [
                        [33, 65519, -1334],
                      ],
                      [
                        [33, 65519, -1334],
                      ],
                      [
                        [33, 65519, -1334],
                      ],
                      [
                        [33, 65519, -1075],
                      ],
                      [
                        [33, 65519, -1075],
                      ],
                      [
                        [33, 65519, -1075],
                      ],
                      [
                        [33, 65519, -1334],
                      ],
                      [
                        [48, 57, 1448],
                        [58, 58, 1221],
                        [65, 70, 1449],
                      ],
                      [
                        [48, 70, -1343],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 57, 1451],
                        [58, 58, 1452],
                        [65, 70, 1453],
                        [93, 93, 1348],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 57, 1454],
                        [58, 93, -1345],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 52, 1455],
                        [53, 53, 1456],
                        [54, 57, 1457],
                        [58, 93, -1345],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 57, 1457],
                        [58, 93, -1345],
                      ],
                      [
                        [48, 93, -1345],
                      ],
                      [
                        [34, 34, 172],
                        [35, 35, 1458],
                        [47, 47, 1459],
                        [58, 58, 1460],
                        [63, 63, 1461],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 103, -42],
                        [104, 104, 1462],
                        [105, 40869, -235],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1463],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1464],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 1465],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 1466],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1467],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1468],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 1469],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 1470],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 1471],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 78, -758],
                        [79, 79, 1472],
                        [80, 40869, -758],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 1473],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 1474],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1475],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1476],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [33, 65519, -821],
                      ],
                      [
                        [33, 47, -821],
                        [48, 57, 1477],
                        [58, 65519, -817],
                      ],
                      [
                        [33, 47, -821],
                        [48, 52, 1478],
                        [53, 53, 1479],
                        [54, 57, 1480],
                        [58, 65519, -817],
                      ],
                      [
                        [33, 47, -821],
                        [48, 57, 1480],
                        [58, 65519, -817],
                      ],
                      [
                        [33, 65519, -1129],
                      ],
                      [
                        [33, 65519, -1129],
                      ],
                      [
                        [33, 65519, -1129],
                      ],
                      [
                        [33, 47, -461],
                        [48, 48, 1481],
                        [49, 49, 1482],
                        [50, 50, 1483],
                        [51, 57, 1484],
                        [58, 65519, -830],
                      ],
                      [
                        [33, 47, -1262],
                        [48, 57, 1485],
                        [58, 65519, -971],
                      ],
                      [
                        [33, 47, -1262],
                        [48, 57, 1486],
                        [58, 65519, -971],
                      ],
                      [
                        [33, 47, -1262],
                        [48, 53, 1487],
                        [54, 65519, -1146],
                      ],
                      [
                        [33, 65519, -1262],
                      ],
                      [
                        [48, 48, 1488],
                        [49, 49, 1489],
                        [50, 50, 1490],
                        [51, 57, 1491],
                      ],
                      [
                        [46, 46, 1385],
                        [48, 57, 1492],
                      ],
                      [
                        [46, 46, 1385],
                        [48, 57, 1493],
                      ],
                      [
                        [46, 46, 1385],
                        [48, 53, 1494],
                      ],
                      [
                        [46, 46, 1385],
                      ],
                      [
                        [58, 58, 1150],
                        [93, 93, 989],
                      ],
                      [
                        [58, 93, -1392],
                      ],
                      [
                        [48, 57, 1495],
                        [58, 58, 1150],
                        [65, 70, 1496],
                        [93, 93, 989],
                      ],
                      [
                        [48, 93, -1394],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 57, 1497],
                        [58, 93, -1394],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 57, 1498],
                        [58, 93, -1394],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 53, 1499],
                        [54, 57, 1495],
                        [58, 93, -1394],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 93, -1394],
                      ],
                      [
                        [48, 57, 1500],
                        [65, 70, 1501],
                      ],
                      [
                        [48, 70, -1400],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [48, 57, 1502],
                        [65, 70, 1503],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 65519, -1046],
                      ],
                      [
                        [33, 45, -1195],
                        [46, 46, 1504],
                        [47, 65519, -1195],
                      ],
                      [
                        [33, 47, -1431],
                        [48, 57, 1505],
                        [58, 65519, -1195],
                      ],
                      [
                        [33, 47, -1431],
                        [48, 52, 1506],
                        [53, 53, 1507],
                        [54, 57, 1508],
                        [58, 65519, -1195],
                      ],
                      [
                        [33, 47, -1431],
                        [48, 57, 1508],
                        [58, 65519, -1195],
                      ],
                      [
                        [33, 65519, -1195],
                      ],
                      [
                        [33, 65519, -1195],
                      ],
                      [
                        [33, 65519, -1195],
                      ],
                      [
                        [33, 45, -1330],
                        [46, 47, -879],
                        [48, 57, 1438],
                        [58, 64, -879],
                        [65, 65519, -1330],
                      ],
                      [
                        [33, 47, -902],
                        [48, 48, 1509],
                        [49, 49, 1510],
                        [50, 50, 1511],
                        [51, 57, 1512],
                        [58, 65519, -1208],
                      ],
                      [
                        [33, 65519, -1334],
                      ],
                      [
                        [33, 65519, -1334],
                      ],
                      [
                        [33, 65519, -1334],
                      ],
                      [
                        [33, 65519, -1334],
                      ],
                      [
                        [33, 65519, -1334],
                      ],
                      [
                        [33, 65519, -1334],
                      ],
                      [
                        [33, 47, -1330],
                        [48, 57, 1513],
                        [58, 65519, -1330],
                      ],
                      [
                        [33, 47, -1330],
                        [48, 57, 1514],
                        [58, 65519, -1330],
                      ],
                      [
                        [33, 47, -1330],
                        [48, 53, 1515],
                        [54, 57, 1438],
                        [58, 65519, -1330],
                      ],
                      [
                        [33, 65519, -1330],
                      ],
                      [
                        [58, 58, 1221],
                      ],
                      [
                        [58, 58, 1221],
                      ],
                      [
                        [48, 48, 1516],
                        [49, 49, 1517],
                        [50, 50, 1518],
                        [51, 57, 1519],
                      ],
                      [
                        [48, 57, 1520],
                        [58, 58, 1452],
                        [65, 70, 1521],
                        [93, 93, 1348],
                      ],
                      [
                        [48, 48, 1522],
                        [49, 49, 1523],
                        [50, 50, 1524],
                        [51, 57, 1525],
                        [65, 70, 1526],
                      ],
                      [
                        [48, 93, -1453],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 57, 1527],
                        [58, 93, -1453],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 57, 1528],
                        [58, 93, -1453],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 53, 1529],
                        [54, 57, 1520],
                        [58, 93, -1453],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 93, -1453],
                      ],
                      [
                        [33, 33, 1530],
                        [34, 34, 172],
                        [36, 36, 1531],
                        [37, 37, 1532],
                        [38, 38, 1533],
                        [39, 39, 1534],
                        [40, 40, 1535],
                        [41, 41, 1536],
                        [42, 42, 1537],
                        [43, 43, 1538],
                        [44, 44, 1539],
                        [45, 45, 1540],
                        [46, 46, 1541],
                        [47, 47, 1542],
                        [48, 57, 1543],
                        [58, 58, 1544],
                        [59, 59, 1545],
                        [61, 61, 1546],
                        [63, 63, 1547],
                        [64, 64, 1548],
                        [65, 90, 1549],
                        [95, 95, 1550],
                        [97, 122, 1551],
                        [126, 126, 1552],
                        [160, 12294, 1553],
                        [12295, 12295, 1554],
                        [12296, 12320, 1553],
                        [12321, 12329, 1555],
                        [12330, 19967, 1553],
                        [19968, 40869, 1556],
                        [40870, 55295, 1553],
                        [63744, 64975, 1557],
                        [65008, 65519, 1558],
                      ],
                      [
                        [33, 33, 1559],
                        [34, 35, -1350],
                        [36, 36, 1560],
                        [37, 37, 1561],
                        [38, 38, 1562],
                        [39, 39, 1563],
                        [40, 40, 1564],
                        [41, 41, 1565],
                        [42, 42, 1566],
                        [43, 43, 1567],
                        [44, 44, 1568],
                        [45, 45, 1569],
                        [46, 46, 1570],
                        [47, 47, 1571],
                        [48, 57, 1572],
                        [58, 58, 1573],
                        [59, 59, 1574],
                        [61, 61, 1575],
                        [63, 63, 1461],
                        [64, 64, 1576],
                        [65, 90, 1577],
                        [95, 95, 1578],
                        [97, 122, 1579],
                        [126, 126, 1580],
                        [160, 12294, 1581],
                        [12295, 12295, 1582],
                        [12296, 12320, 1581],
                        [12321, 12329, 1583],
                        [12330, 19967, 1581],
                        [19968, 40869, 1584],
                        [40870, 55295, 1581],
                        [63744, 64975, 1585],
                        [65008, 65519, 1586],
                      ],
                      [
                        [34, 47, -1350],
                        [48, 57, 1587],
                        [63, 63, 1461],
                      ],
                      [
                        [33, 33, 1588],
                        [34, 35, -1350],
                        [36, 36, 1589],
                        [37, 37, 1590],
                        [38, 38, 1591],
                        [39, 39, 1592],
                        [40, 40, 1593],
                        [41, 41, 1594],
                        [42, 42, 1595],
                        [43, 43, 1596],
                        [44, 44, 1597],
                        [45, 45, 1598],
                        [46, 46, 1599],
                        [47, 47, 1600],
                        [48, 57, 1601],
                        [58, 58, 1602],
                        [59, 59, 1603],
                        [61, 61, 1604],
                        [63, 63, 1605],
                        [64, 64, 1606],
                        [65, 90, 1607],
                        [95, 95, 1608],
                        [97, 122, 1609],
                        [126, 126, 1610],
                        [160, 12294, 1611],
                        [12295, 12295, 1612],
                        [12296, 12320, 1611],
                        [12321, 12329, 1613],
                        [12330, 19967, 1611],
                        [19968, 40869, 1614],
                        [40870, 55295, 1611],
                        [57344, 63743, 1615],
                        [63744, 64975, 1616],
                        [65008, 65519, 1617],
                      ],
                      [
                        [48, 120, -232],
                        [121, 121, 1618],
                        [122, 40869, -42],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1619],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 107, -110],
                        [108, 108, 1620],
                        [109, 40869, -110],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 1621],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 1622],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 1623],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 1624],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1625],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 97, -131],
                        [98, 98, 1626],
                        [99, 40869, -131],
                      ],
                      [
                        [48, 101, -32],
                        [102, 102, 1627],
                        [103, 40869, -105],
                      ],
                      [
                        [48, 78, -758],
                        [79, 79, 1628],
                        [80, 40869, -758],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 1629],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [33, 47, -821],
                        [48, 57, 1630],
                        [58, 65519, -817],
                      ],
                      [
                        [33, 47, -821],
                        [48, 57, 1631],
                        [58, 65519, -817],
                      ],
                      [
                        [33, 47, -821],
                        [48, 53, 1632],
                        [54, 65519, -969],
                      ],
                      [
                        [33, 65519, -821],
                      ],
                      [
                        [33, 65519, -975],
                      ],
                      [
                        [33, 47, -975],
                        [48, 57, 1633],
                        [58, 65519, -971],
                      ],
                      [
                        [33, 47, -975],
                        [48, 52, 1634],
                        [53, 53, 1635],
                        [54, 57, 1636],
                        [58, 65519, -971],
                      ],
                      [
                        [33, 47, -975],
                        [48, 57, 1636],
                        [58, 65519, -971],
                      ],
                      [
                        [33, 65519, -1262],
                      ],
                      [
                        [33, 65519, -1262],
                      ],
                      [
                        [33, 65519, -1262],
                      ],
                      [
                        [46, 46, 1637],
                      ],
                      [
                        [46, 46, 1637],
                        [48, 57, 1638],
                      ],
                      [
                        [46, 46, 1637],
                        [48, 52, 1639],
                        [53, 53, 1640],
                        [54, 57, 1641],
                      ],
                      [
                        [46, 46, 1637],
                        [48, 57, 1641],
                      ],
                      [
                        [46, 46, 1385],
                      ],
                      [
                        [46, 46, 1385],
                      ],
                      [
                        [46, 46, 1385],
                      ],
                      [
                        [48, 57, 1642],
                        [58, 58, 1150],
                        [65, 70, 1643],
                        [93, 93, 989],
                      ],
                      [
                        [48, 93, -1497],
                      ],
                      [
                        [46, 46, 1148],
                        [48, 93, -1497],
                      ],
                      [
                        [46, 93, -1499],
                      ],
                      [
                        [46, 93, -1499],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [33, 65519, -1158],
                      ],
                      [
                        [48, 57, 1644],
                        [65, 70, 1645],
                      ],
                      [
                        [48, 70, -1504],
                      ],
                      [
                        [33, 47, -693],
                        [48, 48, 1646],
                        [49, 49, 1647],
                        [50, 50, 1648],
                        [51, 57, 1649],
                        [58, 65519, -1063],
                      ],
                      [
                        [33, 47, -1431],
                        [48, 57, 1650],
                        [58, 65519, -1195],
                      ],
                      [
                        [33, 47, -1431],
                        [48, 57, 1651],
                        [58, 65519, -1195],
                      ],
                      [
                        [33, 47, -1431],
                        [48, 53, 1652],
                        [54, 65519, -1328],
                      ],
                      [
                        [33, 65519, -1431],
                      ],
                      [
                        [33, 45, -1330],
                        [46, 46, 1653],
                        [47, 65519, -1330],
                      ],
                      [
                        [33, 47, -1511],
                        [48, 57, 1654],
                        [58, 65519, -1330],
                      ],
                      [
                        [33, 47, -1511],
                        [48, 52, 1655],
                        [53, 53, 1656],
                        [54, 57, 1657],
                        [58, 65519, -1330],
                      ],
                      [
                        [33, 47, -1511],
                        [48, 57, 1657],
                        [58, 65519, -1330],
                      ],
                      [
                        [33, 65519, -1330],
                      ],
                      [
                        [33, 65519, -1330],
                      ],
                      [
                        [33, 65519, -1330],
                      ],
                      [
                        [46, 46, 1658],
                      ],
                      [
                        [46, 46, 1658],
                        [48, 57, 1659],
                      ],
                      [
                        [46, 46, 1658],
                        [48, 52, 1660],
                        [53, 53, 1661],
                        [54, 57, 1662],
                      ],
                      [
                        [46, 46, 1658],
                        [48, 57, 1662],
                      ],
                      [
                        [48, 57, 1663],
                        [58, 58, 1452],
                        [65, 70, 1664],
                        [93, 93, 1348],
                      ],
                      [
                        [48, 93, -1522],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 57, 1665],
                        [58, 58, 1452],
                        [65, 70, 1666],
                        [93, 93, 1348],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 57, 1667],
                        [58, 93, -1524],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 52, 1668],
                        [53, 53, 1669],
                        [54, 57, 1670],
                        [58, 93, -1524],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 57, 1670],
                        [58, 93, -1524],
                      ],
                      [
                        [48, 93, -1524],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 93, -1522],
                      ],
                      [
                        [46, 93, -1529],
                      ],
                      [
                        [46, 93, -1529],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [48, 57, 1671],
                        [65, 70, 1672],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [48, 57, 1673],
                        [65, 70, 1674],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 33, 1675],
                        [34, 35, -1350],
                        [36, 36, 1676],
                        [37, 37, 1677],
                        [38, 38, 1678],
                        [39, 39, 1679],
                        [40, 40, 1680],
                        [41, 41, 1681],
                        [42, 42, 1682],
                        [43, 43, 1683],
                        [44, 44, 1684],
                        [45, 45, 1685],
                        [46, 46, 1686],
                        [47, 47, 1571],
                        [48, 57, 1687],
                        [58, 58, 1688],
                        [59, 59, 1689],
                        [61, 61, 1690],
                        [63, 63, 1461],
                        [64, 64, 1691],
                        [65, 90, 1692],
                        [95, 95, 1693],
                        [97, 122, 1694],
                        [126, 126, 1695],
                        [160, 12294, 1696],
                        [12295, 12295, 1697],
                        [12296, 12320, 1696],
                        [12321, 12329, 1698],
                        [12330, 19967, 1696],
                        [19968, 40869, 1699],
                        [40870, 55295, 1696],
                        [63744, 64975, 1700],
                        [65008, 65519, 1701],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [34, 63, -1462],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [48, 57, 1702],
                        [65, 70, 1703],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 1704],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 1705],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 107, -110],
                        [108, 108, 1706],
                        [109, 40869, -110],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 1707],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 1708],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 1709],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 107, -110],
                        [108, 108, 1710],
                        [109, 40869, -110],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 101, -32],
                        [102, 102, 1711],
                        [103, 40869, -105],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [33, 65519, -821],
                      ],
                      [
                        [33, 65519, -821],
                      ],
                      [
                        [33, 65519, -821],
                      ],
                      [
                        [33, 47, -975],
                        [48, 57, 1712],
                        [58, 65519, -971],
                      ],
                      [
                        [33, 47, -975],
                        [48, 57, 1713],
                        [58, 65519, -971],
                      ],
                      [
                        [33, 47, -975],
                        [48, 53, 1714],
                        [54, 65519, -1146],
                      ],
                      [
                        [33, 65519, -975],
                      ],
                      [
                        [48, 48, 1715],
                        [49, 49, 1716],
                        [50, 50, 1717],
                        [51, 57, 1718],
                      ],
                      [
                        [46, 46, 1637],
                        [48, 57, 1719],
                      ],
                      [
                        [46, 46, 1637],
                        [48, 57, 1720],
                      ],
                      [
                        [46, 46, 1637],
                        [48, 53, 1721],
                      ],
                      [
                        [46, 46, 1637],
                      ],
                      [
                        [58, 93, -1392],
                      ],
                      [
                        [58, 93, -1392],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1295],
                      ],
                      [
                        [33, 65519, -1199],
                      ],
                      [
                        [33, 47, -1199],
                        [48, 57, 1722],
                        [58, 65519, -1195],
                      ],
                      [
                        [33, 47, -1199],
                        [48, 52, 1723],
                        [53, 53, 1724],
                        [54, 57, 1725],
                        [58, 65519, -1195],
                      ],
                      [
                        [33, 47, -1199],
                        [48, 57, 1725],
                        [58, 65519, -1195],
                      ],
                      [
                        [33, 65519, -1431],
                      ],
                      [
                        [33, 65519, -1431],
                      ],
                      [
                        [33, 65519, -1431],
                      ],
                      [
                        [33, 47, -902],
                        [48, 48, 1726],
                        [49, 49, 1727],
                        [50, 50, 1728],
                        [51, 57, 1729],
                        [58, 65519, -1208],
                      ],
                      [
                        [33, 47, -1511],
                        [48, 57, 1730],
                        [58, 65519, -1330],
                      ],
                      [
                        [33, 47, -1511],
                        [48, 57, 1731],
                        [58, 65519, -1330],
                      ],
                      [
                        [33, 47, -1511],
                        [48, 53, 1732],
                        [54, 65519, -1448],
                      ],
                      [
                        [33, 65519, -1511],
                      ],
                      [
                        [48, 48, 1733],
                        [49, 49, 1734],
                        [50, 50, 1735],
                        [51, 57, 1736],
                      ],
                      [
                        [46, 46, 1658],
                        [48, 57, 1737],
                      ],
                      [
                        [46, 46, 1658],
                        [48, 57, 1738],
                      ],
                      [
                        [46, 46, 1658],
                        [48, 53, 1739],
                      ],
                      [
                        [46, 46, 1658],
                      ],
                      [
                        [58, 58, 1452],
                        [93, 93, 1348],
                      ],
                      [
                        [58, 93, -1665],
                      ],
                      [
                        [48, 57, 1740],
                        [58, 58, 1452],
                        [65, 70, 1741],
                        [93, 93, 1348],
                      ],
                      [
                        [48, 93, -1667],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 57, 1742],
                        [58, 93, -1667],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 57, 1743],
                        [58, 93, -1667],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 53, 1744],
                        [54, 57, 1740],
                        [58, 93, -1667],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 93, -1667],
                      ],
                      [
                        [48, 57, 1745],
                        [65, 70, 1746],
                      ],
                      [
                        [48, 70, -1673],
                      ],
                      [
                        [48, 57, 1747],
                        [65, 70, 1748],
                      ],
                      [
                        [48, 70, -1675],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [48, 57, 1749],
                        [65, 70, 1750],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [48, 57, 1751],
                        [65, 70, 1752],
                      ],
                      [
                        [48, 70, -1704],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 1753],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 102, -34],
                        [103, 103, 1754],
                        [104, 40869, -119],
                      ],
                      [
                        [48, 57, 73],
                        [65, 79, 74],
                        [80, 80, 1755],
                        [81, 90, 74],
                        [92, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 109, -28],
                        [110, 110, 1756],
                        [111, 40869, -36],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1757],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [33, 65519, -975],
                      ],
                      [
                        [33, 65519, -975],
                      ],
                      [
                        [33, 65519, -975],
                      ],
                      [
                        [93, 93, 989],
                      ],
                      [
                        [48, 57, 1758],
                        [93, 93, 989],
                      ],
                      [
                        [48, 52, 1759],
                        [53, 53, 1760],
                        [54, 57, 1761],
                        [93, 93, 989],
                      ],
                      [
                        [48, 57, 1761],
                        [93, 93, 989],
                      ],
                      [
                        [46, 46, 1637],
                      ],
                      [
                        [46, 46, 1637],
                      ],
                      [
                        [46, 46, 1637],
                      ],
                      [
                        [33, 47, -1199],
                        [48, 57, 1762],
                        [58, 65519, -1195],
                      ],
                      [
                        [33, 47, -1199],
                        [48, 57, 1763],
                        [58, 65519, -1195],
                      ],
                      [
                        [33, 47, -1199],
                        [48, 53, 1764],
                        [54, 65519, -1328],
                      ],
                      [
                        [33, 65519, -1199],
                      ],
                      [
                        [33, 65519, -1334],
                      ],
                      [
                        [33, 47, -1334],
                        [48, 57, 1765],
                        [58, 65519, -1330],
                      ],
                      [
                        [33, 47, -1334],
                        [48, 52, 1766],
                        [53, 53, 1767],
                        [54, 57, 1768],
                        [58, 65519, -1330],
                      ],
                      [
                        [33, 47, -1334],
                        [48, 57, 1768],
                        [58, 65519, -1330],
                      ],
                      [
                        [33, 65519, -1511],
                      ],
                      [
                        [33, 65519, -1511],
                      ],
                      [
                        [33, 65519, -1511],
                      ],
                      [
                        [46, 46, 1769],
                      ],
                      [
                        [46, 46, 1769],
                        [48, 57, 1770],
                      ],
                      [
                        [46, 46, 1769],
                        [48, 52, 1771],
                        [53, 53, 1772],
                        [54, 57, 1773],
                      ],
                      [
                        [46, 46, 1769],
                        [48, 57, 1773],
                      ],
                      [
                        [46, 46, 1658],
                      ],
                      [
                        [46, 46, 1658],
                      ],
                      [
                        [46, 46, 1658],
                      ],
                      [
                        [48, 57, 1774],
                        [58, 58, 1452],
                        [65, 70, 1775],
                        [93, 93, 1348],
                      ],
                      [
                        [48, 93, -1742],
                      ],
                      [
                        [46, 46, 1450],
                        [48, 93, -1742],
                      ],
                      [
                        [46, 93, -1744],
                      ],
                      [
                        [46, 93, -1744],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1460],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [33, 65519, -1461],
                      ],
                      [
                        [48, 57, 1776],
                        [65, 70, 1777],
                      ],
                      [
                        [48, 70, -1751],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [33, 65519, -1463],
                      ],
                      [
                        [48, 95, -24],
                        [97, 97, 1778],
                        [98, 40869, -35],
                      ],
                      [
                        [48, 120, -232],
                        [121, 121, 1779],
                        [122, 40869, -42],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 1780],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 98, -125],
                        [99, 99, 1781],
                        [100, 40869, -125],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 1782],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 57, 1783],
                        [93, 93, 989],
                      ],
                      [
                        [48, 57, 1784],
                        [93, 93, 989],
                      ],
                      [
                        [48, 53, 1785],
                        [93, 93, 989],
                      ],
                      [
                        [93, 93, 989],
                      ],
                      [
                        [33, 65519, -1199],
                      ],
                      [
                        [33, 65519, -1199],
                      ],
                      [
                        [33, 65519, -1199],
                      ],
                      [
                        [33, 47, -1334],
                        [48, 57, 1786],
                        [58, 65519, -1330],
                      ],
                      [
                        [33, 47, -1334],
                        [48, 57, 1787],
                        [58, 65519, -1330],
                      ],
                      [
                        [33, 47, -1334],
                        [48, 53, 1788],
                        [54, 65519, -1448],
                      ],
                      [
                        [33, 65519, -1334],
                      ],
                      [
                        [48, 48, 1789],
                        [49, 49, 1790],
                        [50, 50, 1791],
                        [51, 57, 1792],
                      ],
                      [
                        [46, 46, 1769],
                        [48, 57, 1793],
                      ],
                      [
                        [46, 46, 1769],
                        [48, 57, 1794],
                      ],
                      [
                        [46, 46, 1769],
                        [48, 53, 1795],
                      ],
                      [
                        [46, 46, 1769],
                      ],
                      [
                        [58, 93, -1665],
                      ],
                      [
                        [58, 93, -1665],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [33, 65519, -1573],
                      ],
                      [
                        [48, 107, -110],
                        [108, 108, 1796],
                        [109, 40869, -110],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 1797],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1798],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [93, 93, 989],
                      ],
                      [
                        [93, 93, 989],
                      ],
                      [
                        [93, 93, 989],
                      ],
                      [
                        [33, 65519, -1334],
                      ],
                      [
                        [33, 65519, -1334],
                      ],
                      [
                        [33, 65519, -1334],
                      ],
                      [
                        [93, 93, 1348],
                      ],
                      [
                        [48, 57, 1799],
                        [93, 93, 1348],
                      ],
                      [
                        [48, 52, 1800],
                        [53, 53, 1801],
                        [54, 57, 1802],
                        [93, 93, 1348],
                      ],
                      [
                        [48, 57, 1802],
                        [93, 93, 1348],
                      ],
                      [
                        [46, 46, 1769],
                      ],
                      [
                        [46, 46, 1769],
                      ],
                      [
                        [46, 46, 1769],
                      ],
                      [
                        [48, 79, -1708],
                        [80, 80, 1803],
                        [81, 40869, -1708],
                      ],
                      [
                        [48, 111, -102],
                        [112, 112, 1804],
                        [113, 40869, -102],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 57, 1805],
                        [93, 93, 1348],
                      ],
                      [
                        [48, 57, 1806],
                        [93, 93, 1348],
                      ],
                      [
                        [48, 53, 1807],
                        [93, 93, 1348],
                      ],
                      [
                        [93, 93, 1348],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 1808],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1809],
                        [102, 40869, -31],
                      ],
                      [
                        [93, 93, 1348],
                      ],
                      [
                        [93, 93, 1348],
                      ],
                      [
                        [93, 93, 1348],
                      ],
                      [
                        [48, 110, -40],
                        [111, 111, 1810],
                        [112, 40869, -30],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 1811],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 111, -102],
                        [112, 112, 1812],
                        [113, 40869, -102],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1813],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1814],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1815],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 113, -111],
                        [114, 114, 1816],
                        [115, 40869, -39],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1817],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 115, -123],
                        [116, 116, 1818],
                        [117, 40869, -123],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 1819],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 104, -101],
                        [105, 105, 1820],
                        [106, 40869, -101],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                      [
                        [48, 100, -31],
                        [101, 101, 1821],
                        [102, 40869, -31],
                      ],
                      [
                        [48, 114, -44],
                        [115, 115, 1822],
                        [116, 40869, -44],
                      ],
                      [
                        [48, 40869, -24],
                      ],
                    ],
                  ] 
                
accept_table = [
                 [
                   -1, 0, 0, 0, 0, -1, -1, 10, 4, 5, 31, 29, 2, 30, -1, 32, 77, -1, 24, 27, 23, -1, 81, 6, 7, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 8, 9, 81, 81, 81, 0, 17, 28, -1, 79, -1, 13, 3, 3, 3, 3, -1, -1, -1, 16, 14, 26, 25, 74, 74, 74, 74, 74, 74, 81, 81, -1, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, -1, 75, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 12, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, -1, 3, -1, -1, -1, -1, 1, 1, 78, 15, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, -1, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, 11, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 18, 81, 18, 51, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 42, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 22, 81, 81, 81, 81, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 34, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 21, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 81, 81, 81, 81, 81, 39, 81, 40, 81, 19, 20, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 52, 81, 81, 81, 81, 81, 81, 81, 81, 62, 81, 81, 81, 66, 81, 81, 81, 81, 81, 81, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 81, 81, 81, 37, 81, 81, 81, 81, 81, 81, 13, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 81, 81, -1, 81, 81, 81, 81, 43, 81, 81, 81, 46, 81, 81, 49, 81, 81, 53, 81, 81, 81, 81, 81, 59, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 81, 81, 38, 81, 81, 81, 14, 81, 81, 47, 48, 50, 81, 81, 81, 81, 81, 58, 81, 81, 81, 81, 65, 81, 81, 81, 81, 81, 81, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 35, 81, 81, 15, 41, 81, 81, 81, 54, 81, 81, 81, 81, 81, 81, 81, 67, 81, 81, 70, 71, 81, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 81, 44, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 69, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, 81, 81, 81, 81, 81, 57, 81, 81, 63, 81, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 81, 81, 55, 56, 81, 81, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 81, 81, 81, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 45, 81, 81, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 81, 60, -1, -1, -1, -1, 81, 81, -1, -1, -1, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 51, 81, 81, 40, 
                 ],
               ]
             
class Lexer(object):
    def __init__(self, source):
        if isinstance(source, type('String')):
            self.reader = PushbackReader(open(source, "r"))
        else:
            self.reader = PushbackReader(source)

        self.token = None
        self.state = STATE_INITIAL
        self.line = 0
        self.pos = 0
        self.cr = False
        self.eof = False
        self.text = StringBuffer()

    def filter(self):
        pass

    def peek(self):
        while(self.token == None):
            self.token = self.getToken()
            self.filter()
        return self.token

    def next(self):
        while (self.token == None):
            self.token = self.getToken()
            self.filter()

        result = self.token
        self.token = None
        return result

    def getToken(self):
        dfa_state = 0

        start_pos = self.pos
        start_line = self.line

        accept_state = -1
        accept_token = -1
        accept_length = -1
        accept_pos = -1
        accept_line = -1
        gotoTable = lexer_gotoTable[self.state]
        accept = accept_table[self.state]
        text = self.text
        text.clear()

        while 1:
            c = self.getChar()

            if(c != -1):
                if (c == 10):
                    if(self.cr):
                        self.cr = False
                    else:
                        self.line = self.line + 1
                        self.pos = 0
                elif (c == 13):
                    self.line = self.line + 1
                    self.pos = 0
                    self.cr = True
                else:
                    self.pos = self.pos + 1
                    self.cr = False

                text.append(chr(c))
                
                while 1:
                    if (dfa_state < -1):
                        oldState = (-2 -dfa_state)
                    else:
                        oldState = dfa_state

                    dfa_state = -1

                    tmp1 =  gotoTable[oldState]
                    low = 0
                    high = len(tmp1) - 1

                    while (low <= high):
                        middle = (low + high) // 2
                        tmp2 = tmp1[middle]

                        if(c < tmp2[0]):
                            high = middle - 1
                        elif (c > tmp2[1]):
                            low = middle + 1
                        else:
                            dfa_state = tmp2[2]
                            break
                    if (dfa_state >= -1):
                    	break
            else:
                dfa_state = -1

            if (dfa_state >= 0):
                if (accept[dfa_state] != -1):
                    accept_state = dfa_state
                    accept_token = accept[dfa_state]
                    accept_length = len(text)
                    accept_pos = self.pos
                    accept_line = self.line
            else:
                if (accept_state != -1):
                    if (accept_token >= 0 and accept_token <= 81):
                    	token = accept_tokens[accept_token](start_line + 1, start_pos + 1)
                    	if token.getText() == None:
                            token.setText(self.getText(accept_length))
                    	
                    	self.pushBack(accept_length)
                    	self.pos = accept_pos
                    	self.line = accept_line
                      
                    	return token
                else:
                    if (len(text) > 0):
                        print("LexerException")
                        print(" => start_line",str(start_line))
                        print(" => start_pos",str(start_pos))
                        print(" => text",str(text))
                        raise LexerException("[" + str(start_line + 1) + "," + str(start_pos + 1) + "]" +" Unknown token: " + str(text))
                    else:
                        return EOF(start_line + 1, start_pos + 1)

    def getChar(self):
        if (self.eof):
            return -1
        c = self.reader.read()
        
        if (c == ""):
            result = -1
        else:
            result = ord(c)

        if(result == -1):
            self.eof = True

        return result

    def pushBack(self, acceptLength):
        text = self.text
        length = len(text)
        for i in range(length - 1, acceptLength - 1, -1):
            self.eof = False
            self.reader.unread(text.charAt(i))

    def unread(self, token):
        text = token.getText()
        length = len(text)

        for i in range(length-1, -1, -1):
            self.eof = False
            self.reader.unread(text[i])

        self.pos = token.getPos() - 1
        self.line = token.getLine() - 1

    def getText(self, acceptLength):
        sb = StringBuffer()
        text = self.text
        for i in range(acceptLength):
            sb.append(text.charAt(i))

        return str(sb)

############################# parser.py #############################################

class ParserException(Exception):
    def __init__(self, token, value):
        self.value = value
        self.token = token

    def getToken(self):
        return self.token

    def __str__(self):
        return self.value
        
class State(object):
    def __init__(self, state, nodes):
        self.state = state
        self.nodes = nodes

# parser actions
ACTION_SHIFT = 0
ACTION_REDUCE = 1
ACTION_ACCEPT = 2
ACTION_ERROR = 3
        
def new0(self):
    nodeList = list()
    listNode4 = list()
    pwsmlNode1 = AWsml(None,None,listNode4)
    nodeList.append(pwsmlNode1)
    return nodeList, 0

def new1(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    pwsmlvariantNode2 = nodeArrayList1[0]
    pwsmlNode1 = AWsml(pwsmlvariantNode2,None,listNode4)
    nodeList.append(pwsmlNode1)
    return nodeList, 0

def new2(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    pnamespaceNode3 = nodeArrayList1[0]
    pwsmlNode1 = AWsml(None,pnamespaceNode3,listNode4)
    nodeList.append(pwsmlNode1)
    return nodeList, 0

def new3(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    pwsmlvariantNode2 = nodeArrayList1[0]
    pnamespaceNode3 = nodeArrayList2[0]
    pwsmlNode1 = AWsml(pwsmlvariantNode2,pnamespaceNode3,listNode4)
    nodeList.append(pwsmlNode1)
    return nodeList, 0

def new4(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode4 = nodeArrayList1[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pwsmlNode1 = AWsml(None,None,listNode5)
    nodeList.append(pwsmlNode1)
    return nodeList, 0

def new5(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    pwsmlvariantNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pwsmlNode1 = AWsml(pwsmlvariantNode2,None,listNode5)
    nodeList.append(pwsmlNode1)
    return nodeList, 0

def new6(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    pnamespaceNode3 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pwsmlNode1 = AWsml(None,pnamespaceNode3,listNode5)
    nodeList.append(pwsmlNode1)
    return nodeList, 0

def new7(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    pwsmlvariantNode2 = nodeArrayList1[0]
    pnamespaceNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pwsmlNode1 = AWsml(pwsmlvariantNode2,pnamespaceNode3,listNode5)
    nodeList.append(pwsmlNode1)
    return nodeList, 0

def new8(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttwsmlvariantNode2 = nodeArrayList1[0]
    tfulliriNode3 = nodeArrayList2[0]
    pwsmlvariantNode1 = AWsmlvariant(ttwsmlvariantNode2,tfulliriNode3)
    nodeList.append(pwsmlvariantNode1)
    return nodeList, 1

def new9(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttnamespaceNode2 = nodeArrayList1[0]
    pprefixdefinitionlistNode3 = nodeArrayList2[0]
    pnamespaceNode1 = ANamespace(ttnamespaceNode2,pprefixdefinitionlistNode3)
    nodeList.append(pnamespaceNode1)
    return nodeList, 2

def new10(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttsharedvariableNode2 = nodeArrayList1[0]
    pvariablelistNode3 = nodeArrayList2[0]
    psharedvardefNode1 = ASharedvardef(ttsharedvariableNode2,pvariablelistNode3)
    nodeList.append(psharedvardefNode1)
    return nodeList, 3

def new11(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode6 = list()
    ttcapabilityNode2 = nodeArrayList1[0]
    pcapabilityNode1 = ACapability(ttcapabilityNode2,None,listNode4,None,listNode6)
    nodeList.append(pcapabilityNode1)
    return nodeList, 4

def new12(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode6 = list()
    ttcapabilityNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pcapabilityNode1 = ACapability(ttcapabilityNode2,pidNode3,listNode4,None,listNode6)
    nodeList.append(pcapabilityNode1)
    return nodeList, 4

def new13(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode7 = list()
    ttcapabilityNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pcapabilityNode1 = ACapability(ttcapabilityNode2,None,listNode5,None,listNode7)
    nodeList.append(pcapabilityNode1)
    return nodeList, 4

def new14(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode7 = list()
    ttcapabilityNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pcapabilityNode1 = ACapability(ttcapabilityNode2,pidNode3,listNode5,None,listNode7)
    nodeList.append(pcapabilityNode1)
    return nodeList, 4

def new15(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode6 = list()
    ttcapabilityNode2 = nodeArrayList1[0]
    psharedvardefNode5 = nodeArrayList2[0]
    pcapabilityNode1 = ACapability(ttcapabilityNode2,None,listNode4,psharedvardefNode5,listNode6)
    nodeList.append(pcapabilityNode1)
    return nodeList, 4

def new16(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode6 = list()
    ttcapabilityNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psharedvardefNode5 = nodeArrayList3[0]
    pcapabilityNode1 = ACapability(ttcapabilityNode2,pidNode3,listNode4,psharedvardefNode5,listNode6)
    nodeList.append(pcapabilityNode1)
    return nodeList, 4

def new17(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode7 = list()
    ttcapabilityNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psharedvardefNode6 = nodeArrayList3[0]
    pcapabilityNode1 = ACapability(ttcapabilityNode2,None,listNode5,psharedvardefNode6,listNode7)
    nodeList.append(pcapabilityNode1)
    return nodeList, 4

def new18(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode7 = list()
    ttcapabilityNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psharedvardefNode6 = nodeArrayList4[0]
    pcapabilityNode1 = ACapability(ttcapabilityNode2,pidNode3,listNode5,psharedvardefNode6,listNode7)
    nodeList.append(pcapabilityNode1)
    return nodeList, 4

def new19(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode7 = list()
    ttcapabilityNode2 = nodeArrayList1[0]
    listNode6 = nodeArrayList2[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pcapabilityNode1 = ACapability(ttcapabilityNode2,None,listNode4,None,listNode7)
    nodeList.append(pcapabilityNode1)
    return nodeList, 4

def new20(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode7 = list()
    ttcapabilityNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode6 = nodeArrayList3[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pcapabilityNode1 = ACapability(ttcapabilityNode2,pidNode3,listNode4,None,listNode7)
    nodeList.append(pcapabilityNode1)
    return nodeList, 4

def new21(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode8 = list()
    ttcapabilityNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    listNode7 = nodeArrayList3[0]
    if (listNode7 != None):
        listNode8.extend(listNode7)
    pcapabilityNode1 = ACapability(ttcapabilityNode2,None,listNode5,None,listNode8)
    nodeList.append(pcapabilityNode1)
    return nodeList, 4

def new22(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode8 = list()
    ttcapabilityNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    listNode7 = nodeArrayList4[0]
    if (listNode7 != None):
        listNode8.extend(listNode7)
    pcapabilityNode1 = ACapability(ttcapabilityNode2,pidNode3,listNode5,None,listNode8)
    nodeList.append(pcapabilityNode1)
    return nodeList, 4

def new23(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode7 = list()
    ttcapabilityNode2 = nodeArrayList1[0]
    psharedvardefNode5 = nodeArrayList2[0]
    listNode6 = nodeArrayList3[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pcapabilityNode1 = ACapability(ttcapabilityNode2,None,listNode4,psharedvardefNode5,listNode7)
    nodeList.append(pcapabilityNode1)
    return nodeList, 4

def new24(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode7 = list()
    ttcapabilityNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psharedvardefNode5 = nodeArrayList3[0]
    listNode6 = nodeArrayList4[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pcapabilityNode1 = ACapability(ttcapabilityNode2,pidNode3,listNode4,psharedvardefNode5,listNode7)
    nodeList.append(pcapabilityNode1)
    return nodeList, 4

def new25(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode8 = list()
    ttcapabilityNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psharedvardefNode6 = nodeArrayList3[0]
    listNode7 = nodeArrayList4[0]
    if (listNode7 != None):
        listNode8.extend(listNode7)
    pcapabilityNode1 = ACapability(ttcapabilityNode2,None,listNode5,psharedvardefNode6,listNode8)
    nodeList.append(pcapabilityNode1)
    return nodeList, 4

def new26(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode8 = list()
    ttcapabilityNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psharedvardefNode6 = nodeArrayList4[0]
    listNode7 = nodeArrayList5[0]
    if (listNode7 != None):
        listNode8.extend(listNode7)
    pcapabilityNode1 = ACapability(ttcapabilityNode2,pidNode3,listNode5,psharedvardefNode6,listNode8)
    nodeList.append(pcapabilityNode1)
    return nodeList, 4

def new27(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode6 = list()
    ttgoalNode2 = nodeArrayList1[0]
    pgoalNode1 = AGoal(ttgoalNode2,None,listNode4,None,listNode6)
    nodeList.append(pgoalNode1)
    return nodeList, 5

def new28(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode6 = list()
    ttgoalNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pgoalNode1 = AGoal(ttgoalNode2,pidNode3,listNode4,None,listNode6)
    nodeList.append(pgoalNode1)
    return nodeList, 5

def new29(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode7 = list()
    ttgoalNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pgoalNode1 = AGoal(ttgoalNode2,None,listNode5,None,listNode7)
    nodeList.append(pgoalNode1)
    return nodeList, 5

def new30(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode7 = list()
    ttgoalNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pgoalNode1 = AGoal(ttgoalNode2,pidNode3,listNode5,None,listNode7)
    nodeList.append(pgoalNode1)
    return nodeList, 5

def new31(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode6 = list()
    ttgoalNode2 = nodeArrayList1[0]
    pcapabilityNode5 = nodeArrayList2[0]
    pgoalNode1 = AGoal(ttgoalNode2,None,listNode4,pcapabilityNode5,listNode6)
    nodeList.append(pgoalNode1)
    return nodeList, 5

def new32(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode6 = list()
    ttgoalNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pcapabilityNode5 = nodeArrayList3[0]
    pgoalNode1 = AGoal(ttgoalNode2,pidNode3,listNode4,pcapabilityNode5,listNode6)
    nodeList.append(pgoalNode1)
    return nodeList, 5

def new33(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode7 = list()
    ttgoalNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pcapabilityNode6 = nodeArrayList3[0]
    pgoalNode1 = AGoal(ttgoalNode2,None,listNode5,pcapabilityNode6,listNode7)
    nodeList.append(pgoalNode1)
    return nodeList, 5

def new34(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode7 = list()
    ttgoalNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pcapabilityNode6 = nodeArrayList4[0]
    pgoalNode1 = AGoal(ttgoalNode2,pidNode3,listNode5,pcapabilityNode6,listNode7)
    nodeList.append(pgoalNode1)
    return nodeList, 5

def new35(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode7 = list()
    ttgoalNode2 = nodeArrayList1[0]
    listNode6 = nodeArrayList2[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pgoalNode1 = AGoal(ttgoalNode2,None,listNode4,None,listNode7)
    nodeList.append(pgoalNode1)
    return nodeList, 5

def new36(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode7 = list()
    ttgoalNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode6 = nodeArrayList3[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pgoalNode1 = AGoal(ttgoalNode2,pidNode3,listNode4,None,listNode7)
    nodeList.append(pgoalNode1)
    return nodeList, 5

def new37(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode8 = list()
    ttgoalNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    listNode7 = nodeArrayList3[0]
    if (listNode7 != None):
        listNode8.extend(listNode7)
    pgoalNode1 = AGoal(ttgoalNode2,None,listNode5,None,listNode8)
    nodeList.append(pgoalNode1)
    return nodeList, 5

def new38(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode8 = list()
    ttgoalNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    listNode7 = nodeArrayList4[0]
    if (listNode7 != None):
        listNode8.extend(listNode7)
    pgoalNode1 = AGoal(ttgoalNode2,pidNode3,listNode5,None,listNode8)
    nodeList.append(pgoalNode1)
    return nodeList, 5

def new39(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode7 = list()
    ttgoalNode2 = nodeArrayList1[0]
    pcapabilityNode5 = nodeArrayList2[0]
    listNode6 = nodeArrayList3[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pgoalNode1 = AGoal(ttgoalNode2,None,listNode4,pcapabilityNode5,listNode7)
    nodeList.append(pgoalNode1)
    return nodeList, 5

def new40(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode7 = list()
    ttgoalNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pcapabilityNode5 = nodeArrayList3[0]
    listNode6 = nodeArrayList4[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pgoalNode1 = AGoal(ttgoalNode2,pidNode3,listNode4,pcapabilityNode5,listNode7)
    nodeList.append(pgoalNode1)
    return nodeList, 5

def new41(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode8 = list()
    ttgoalNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pcapabilityNode6 = nodeArrayList3[0]
    listNode7 = nodeArrayList4[0]
    if (listNode7 != None):
        listNode8.extend(listNode7)
    pgoalNode1 = AGoal(ttgoalNode2,None,listNode5,pcapabilityNode6,listNode8)
    nodeList.append(pgoalNode1)
    return nodeList, 5

def new42(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode8 = list()
    ttgoalNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pcapabilityNode6 = nodeArrayList4[0]
    listNode7 = nodeArrayList5[0]
    if (listNode7 != None):
        listNode8.extend(listNode7)
    pgoalNode1 = AGoal(ttgoalNode2,pidNode3,listNode5,pcapabilityNode6,listNode8)
    nodeList.append(pgoalNode1)
    return nodeList, 5

def new43(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode6 = list()
    ttwebserviceNode2 = nodeArrayList1[0]
    pwebserviceNode1 = AWebservice(ttwebserviceNode2,None,listNode4,None,listNode6)
    nodeList.append(pwebserviceNode1)
    return nodeList, 6

def new44(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode6 = list()
    ttwebserviceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pwebserviceNode1 = AWebservice(ttwebserviceNode2,pidNode3,listNode4,None,listNode6)
    nodeList.append(pwebserviceNode1)
    return nodeList, 6

def new45(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode7 = list()
    ttwebserviceNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pwebserviceNode1 = AWebservice(ttwebserviceNode2,None,listNode5,None,listNode7)
    nodeList.append(pwebserviceNode1)
    return nodeList, 6

def new46(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode7 = list()
    ttwebserviceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pwebserviceNode1 = AWebservice(ttwebserviceNode2,pidNode3,listNode5,None,listNode7)
    nodeList.append(pwebserviceNode1)
    return nodeList, 6

def new47(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode6 = list()
    ttwebserviceNode2 = nodeArrayList1[0]
    pcapabilityNode5 = nodeArrayList2[0]
    pwebserviceNode1 = AWebservice(ttwebserviceNode2,None,listNode4,pcapabilityNode5,listNode6)
    nodeList.append(pwebserviceNode1)
    return nodeList, 6

def new48(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode6 = list()
    ttwebserviceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pcapabilityNode5 = nodeArrayList3[0]
    pwebserviceNode1 = AWebservice(ttwebserviceNode2,pidNode3,listNode4,pcapabilityNode5,listNode6)
    nodeList.append(pwebserviceNode1)
    return nodeList, 6

def new49(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode7 = list()
    ttwebserviceNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pcapabilityNode6 = nodeArrayList3[0]
    pwebserviceNode1 = AWebservice(ttwebserviceNode2,None,listNode5,pcapabilityNode6,listNode7)
    nodeList.append(pwebserviceNode1)
    return nodeList, 6

def new50(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode7 = list()
    ttwebserviceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pcapabilityNode6 = nodeArrayList4[0]
    pwebserviceNode1 = AWebservice(ttwebserviceNode2,pidNode3,listNode5,pcapabilityNode6,listNode7)
    nodeList.append(pwebserviceNode1)
    return nodeList, 6

def new51(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode7 = list()
    ttwebserviceNode2 = nodeArrayList1[0]
    listNode6 = nodeArrayList2[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pwebserviceNode1 = AWebservice(ttwebserviceNode2,None,listNode4,None,listNode7)
    nodeList.append(pwebserviceNode1)
    return nodeList, 6

def new52(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode7 = list()
    ttwebserviceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode6 = nodeArrayList3[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pwebserviceNode1 = AWebservice(ttwebserviceNode2,pidNode3,listNode4,None,listNode7)
    nodeList.append(pwebserviceNode1)
    return nodeList, 6

def new53(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode8 = list()
    ttwebserviceNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    listNode7 = nodeArrayList3[0]
    if (listNode7 != None):
        listNode8.extend(listNode7)
    pwebserviceNode1 = AWebservice(ttwebserviceNode2,None,listNode5,None,listNode8)
    nodeList.append(pwebserviceNode1)
    return nodeList, 6

def new54(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode8 = list()
    ttwebserviceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    listNode7 = nodeArrayList4[0]
    if (listNode7 != None):
        listNode8.extend(listNode7)
    pwebserviceNode1 = AWebservice(ttwebserviceNode2,pidNode3,listNode5,None,listNode8)
    nodeList.append(pwebserviceNode1)
    return nodeList, 6

def new55(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode7 = list()
    ttwebserviceNode2 = nodeArrayList1[0]
    pcapabilityNode5 = nodeArrayList2[0]
    listNode6 = nodeArrayList3[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pwebserviceNode1 = AWebservice(ttwebserviceNode2,None,listNode4,pcapabilityNode5,listNode7)
    nodeList.append(pwebserviceNode1)
    return nodeList, 6

def new56(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode7 = list()
    ttwebserviceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pcapabilityNode5 = nodeArrayList3[0]
    listNode6 = nodeArrayList4[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pwebserviceNode1 = AWebservice(ttwebserviceNode2,pidNode3,listNode4,pcapabilityNode5,listNode7)
    nodeList.append(pwebserviceNode1)
    return nodeList, 6

def new57(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode8 = list()
    ttwebserviceNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pcapabilityNode6 = nodeArrayList3[0]
    listNode7 = nodeArrayList4[0]
    if (listNode7 != None):
        listNode8.extend(listNode7)
    pwebserviceNode1 = AWebservice(ttwebserviceNode2,None,listNode5,pcapabilityNode6,listNode8)
    nodeList.append(pwebserviceNode1)
    return nodeList, 6

def new58(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode8 = list()
    ttwebserviceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pcapabilityNode6 = nodeArrayList4[0]
    listNode7 = nodeArrayList5[0]
    if (listNode7 != None):
        listNode8.extend(listNode7)
    pwebserviceNode1 = AWebservice(ttwebserviceNode2,pidNode3,listNode5,pcapabilityNode6,listNode8)
    nodeList.append(pwebserviceNode1)
    return nodeList, 6

def new59(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pgoalNode2 = nodeArrayList1[0]
    pdefinitionNode1 = AGoalDefinition(pgoalNode2)
    nodeList.append(pdefinitionNode1)
    return nodeList, 7

def new60(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pontologyNode2 = nodeArrayList1[0]
    pdefinitionNode1 = AOntologyDefinition(pontologyNode2)
    nodeList.append(pdefinitionNode1)
    return nodeList, 7

def new61(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pwebserviceNode2 = nodeArrayList1[0]
    pdefinitionNode1 = AWebserviceDefinition(pwebserviceNode2)
    nodeList.append(pdefinitionNode1)
    return nodeList, 7

def new62(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pmediatorNode2 = nodeArrayList1[0]
    pdefinitionNode1 = AMediatorDefinition(pmediatorNode2)
    nodeList.append(pdefinitionNode1)
    return nodeList, 7

def new63(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tfulliriNode2 = nodeArrayList1[0]
    pprefixdefinitionlistNode1 = ADefaultnsPrefixdefinitionlist(tfulliriNode2)
    nodeList.append(pprefixdefinitionlistNode1)
    return nodeList, 8

def new64(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    tlbraceNode2 = nodeArrayList1[0]
    pprefixdefinitionNode3 = nodeArrayList2[0]
    trbraceNode5 = nodeArrayList3[0]
    pprefixdefinitionlistNode1 = APrefixdefinitionlistPrefixdefinitionlist(tlbraceNode2,pprefixdefinitionNode3,listNode4,trbraceNode5)
    nodeList.append(pprefixdefinitionlistNode1)
    return nodeList, 8

def new65(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    tlbraceNode2 = nodeArrayList1[0]
    pprefixdefinitionNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    trbraceNode6 = nodeArrayList4[0]
    pprefixdefinitionlistNode1 = APrefixdefinitionlistPrefixdefinitionlist(tlbraceNode2,pprefixdefinitionNode3,listNode5,trbraceNode6)
    nodeList.append(pprefixdefinitionlistNode1)
    return nodeList, 8

def new66(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tnameNode2 = nodeArrayList1[0]
    tfulliriNode3 = nodeArrayList2[0]
    pprefixdefinitionNode1 = ANamespacedefPrefixdefinition(tnameNode2,tfulliriNode3)
    nodeList.append(pprefixdefinitionNode1)
    return nodeList, 9

def new67(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tfulliriNode2 = nodeArrayList1[0]
    pprefixdefinitionNode1 = ADefaultPrefixdefinition(tfulliriNode2)
    nodeList.append(pprefixdefinitionNode1)
    return nodeList, 9

def new68(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tcommaNode2 = nodeArrayList1[0]
    pprefixdefinitionNode3 = nodeArrayList2[0]
    pmoreprefixdefinitionsNode1 = AMoreprefixdefinitions(tcommaNode2,pprefixdefinitionNode3)
    nodeList.append(pmoreprefixdefinitionsNode1)
    return nodeList, 10

def new69(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pnfpNode2 = nodeArrayList1[0]
    pheaderNode1 = ANfpHeader(pnfpNode2)
    nodeList.append(pheaderNode1)
    return nodeList, 11

def new70(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pusesmediatorNode2 = nodeArrayList1[0]
    pheaderNode1 = AUsesmediatorHeader(pusesmediatorNode2)
    nodeList.append(pheaderNode1)
    return nodeList, 11

def new71(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pimportsontologyNode2 = nodeArrayList1[0]
    pheaderNode1 = AImportsontologyHeader(pimportsontologyNode2)
    nodeList.append(pheaderNode1)
    return nodeList, 11

def new72(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttusemediatorNode2 = nodeArrayList1[0]
    pidlistNode3 = nodeArrayList2[0]
    pusesmediatorNode1 = AUsesmediator(ttusemediatorNode2,pidlistNode3)
    nodeList.append(pusesmediatorNode1)
    return nodeList, 12

def new73(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttimportontologyNode2 = nodeArrayList1[0]
    pidlistNode3 = nodeArrayList2[0]
    pimportsontologyNode1 = AImportsontology(ttimportontologyNode2,pidlistNode3)
    nodeList.append(pimportsontologyNode1)
    return nodeList, 13

def new74(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    ttnfpNode2 = nodeArrayList1[0]
    ttendnfpNode4 = nodeArrayList2[0]
    pnfpNode1 = ANfp(ttnfpNode2,listNode3,ttendnfpNode4)
    nodeList.append(pnfpNode1)
    return nodeList, 14

def new75(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttnfpNode2 = nodeArrayList1[0]
    listNode3 = nodeArrayList2[0]
    if (listNode3 != None):
        listNode4.extend(listNode3)
    ttendnfpNode5 = nodeArrayList3[0]
    pnfpNode1 = ANfp(ttnfpNode2,listNode4,ttendnfpNode5)
    nodeList.append(pnfpNode1)
    return nodeList, 14

def new76(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    poomediatorNode2 = nodeArrayList1[0]
    pmediatorNode1 = AOomediatorMediator(poomediatorNode2)
    nodeList.append(pmediatorNode1)
    return nodeList, 15

def new77(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pggmediatorNode2 = nodeArrayList1[0]
    pmediatorNode1 = AGgmediatorMediator(pggmediatorNode2)
    nodeList.append(pmediatorNode1)
    return nodeList, 15

def new78(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pwgmediatorNode2 = nodeArrayList1[0]
    pmediatorNode1 = AWgmediatorMediator(pwgmediatorNode2)
    nodeList.append(pmediatorNode1)
    return nodeList, 15

def new79(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pwwmediatorNode2 = nodeArrayList1[0]
    pmediatorNode1 = AWwmediatorMediator(pwwmediatorNode2)
    nodeList.append(pmediatorNode1)
    return nodeList, 15

def new80(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,None,None,None,None,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new81(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,None,None,None,None,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new82(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pnfpNode4 = nodeArrayList2[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,pnfpNode4,None,None,None,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new83(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode4 = nodeArrayList3[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,pnfpNode4,None,None,None,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new84(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pimportsontologyNode5 = nodeArrayList2[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,None,pimportsontologyNode5,None,None,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new85(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pimportsontologyNode5 = nodeArrayList3[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,None,pimportsontologyNode5,None,None,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new86(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pnfpNode4 = nodeArrayList2[0]
    pimportsontologyNode5 = nodeArrayList3[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,pnfpNode4,pimportsontologyNode5,None,None,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new87(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode4 = nodeArrayList3[0]
    pimportsontologyNode5 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,pnfpNode4,pimportsontologyNode5,None,None,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new88(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    psourcesNode6 = nodeArrayList2[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,None,None,psourcesNode6,None,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new89(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourcesNode6 = nodeArrayList3[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,None,None,psourcesNode6,None,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new90(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pnfpNode4 = nodeArrayList2[0]
    psourcesNode6 = nodeArrayList3[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,pnfpNode4,None,psourcesNode6,None,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new91(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode4 = nodeArrayList3[0]
    psourcesNode6 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,pnfpNode4,None,psourcesNode6,None,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new92(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pimportsontologyNode5 = nodeArrayList2[0]
    psourcesNode6 = nodeArrayList3[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,None,pimportsontologyNode5,psourcesNode6,None,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new93(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pimportsontologyNode5 = nodeArrayList3[0]
    psourcesNode6 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,None,pimportsontologyNode5,psourcesNode6,None,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new94(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pnfpNode4 = nodeArrayList2[0]
    pimportsontologyNode5 = nodeArrayList3[0]
    psourcesNode6 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,pnfpNode4,pimportsontologyNode5,psourcesNode6,None,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new95(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode4 = nodeArrayList3[0]
    pimportsontologyNode5 = nodeArrayList4[0]
    psourcesNode6 = nodeArrayList5[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,pnfpNode4,pimportsontologyNode5,psourcesNode6,None,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new96(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    ptargetNode7 = nodeArrayList2[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,None,None,None,ptargetNode7,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new97(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    ptargetNode7 = nodeArrayList3[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,None,None,None,ptargetNode7,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new98(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pnfpNode4 = nodeArrayList2[0]
    ptargetNode7 = nodeArrayList3[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,pnfpNode4,None,None,ptargetNode7,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new99(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode4 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,pnfpNode4,None,None,ptargetNode7,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new100(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pimportsontologyNode5 = nodeArrayList2[0]
    ptargetNode7 = nodeArrayList3[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,None,pimportsontologyNode5,None,ptargetNode7,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new101(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pimportsontologyNode5 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,None,pimportsontologyNode5,None,ptargetNode7,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new102(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pnfpNode4 = nodeArrayList2[0]
    pimportsontologyNode5 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,pnfpNode4,pimportsontologyNode5,None,ptargetNode7,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new103(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode4 = nodeArrayList3[0]
    pimportsontologyNode5 = nodeArrayList4[0]
    ptargetNode7 = nodeArrayList5[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,pnfpNode4,pimportsontologyNode5,None,ptargetNode7,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new104(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    psourcesNode6 = nodeArrayList2[0]
    ptargetNode7 = nodeArrayList3[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,None,None,psourcesNode6,ptargetNode7,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new105(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourcesNode6 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,None,None,psourcesNode6,ptargetNode7,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new106(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pnfpNode4 = nodeArrayList2[0]
    psourcesNode6 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,pnfpNode4,None,psourcesNode6,ptargetNode7,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new107(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode4 = nodeArrayList3[0]
    psourcesNode6 = nodeArrayList4[0]
    ptargetNode7 = nodeArrayList5[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,pnfpNode4,None,psourcesNode6,ptargetNode7,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new108(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pimportsontologyNode5 = nodeArrayList2[0]
    psourcesNode6 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,None,pimportsontologyNode5,psourcesNode6,ptargetNode7,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new109(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pimportsontologyNode5 = nodeArrayList3[0]
    psourcesNode6 = nodeArrayList4[0]
    ptargetNode7 = nodeArrayList5[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,None,pimportsontologyNode5,psourcesNode6,ptargetNode7,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new110(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pnfpNode4 = nodeArrayList2[0]
    pimportsontologyNode5 = nodeArrayList3[0]
    psourcesNode6 = nodeArrayList4[0]
    ptargetNode7 = nodeArrayList5[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,pnfpNode4,pimportsontologyNode5,psourcesNode6,ptargetNode7,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new111(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode4 = nodeArrayList3[0]
    pimportsontologyNode5 = nodeArrayList4[0]
    psourcesNode6 = nodeArrayList5[0]
    ptargetNode7 = nodeArrayList6[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,pnfpNode4,pimportsontologyNode5,psourcesNode6,ptargetNode7,None)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new112(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    puseserviceNode8 = nodeArrayList2[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,None,None,None,None,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new113(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    puseserviceNode8 = nodeArrayList3[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,None,None,None,None,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new114(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pnfpNode4 = nodeArrayList2[0]
    puseserviceNode8 = nodeArrayList3[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,pnfpNode4,None,None,None,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new115(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode4 = nodeArrayList3[0]
    puseserviceNode8 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,pnfpNode4,None,None,None,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new116(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pimportsontologyNode5 = nodeArrayList2[0]
    puseserviceNode8 = nodeArrayList3[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,None,pimportsontologyNode5,None,None,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new117(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pimportsontologyNode5 = nodeArrayList3[0]
    puseserviceNode8 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,None,pimportsontologyNode5,None,None,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new118(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pnfpNode4 = nodeArrayList2[0]
    pimportsontologyNode5 = nodeArrayList3[0]
    puseserviceNode8 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,pnfpNode4,pimportsontologyNode5,None,None,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new119(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode4 = nodeArrayList3[0]
    pimportsontologyNode5 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,pnfpNode4,pimportsontologyNode5,None,None,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new120(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    psourcesNode6 = nodeArrayList2[0]
    puseserviceNode8 = nodeArrayList3[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,None,None,psourcesNode6,None,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new121(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourcesNode6 = nodeArrayList3[0]
    puseserviceNode8 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,None,None,psourcesNode6,None,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new122(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pnfpNode4 = nodeArrayList2[0]
    psourcesNode6 = nodeArrayList3[0]
    puseserviceNode8 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,pnfpNode4,None,psourcesNode6,None,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new123(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode4 = nodeArrayList3[0]
    psourcesNode6 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,pnfpNode4,None,psourcesNode6,None,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new124(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pimportsontologyNode5 = nodeArrayList2[0]
    psourcesNode6 = nodeArrayList3[0]
    puseserviceNode8 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,None,pimportsontologyNode5,psourcesNode6,None,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new125(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pimportsontologyNode5 = nodeArrayList3[0]
    psourcesNode6 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,None,pimportsontologyNode5,psourcesNode6,None,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new126(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pnfpNode4 = nodeArrayList2[0]
    pimportsontologyNode5 = nodeArrayList3[0]
    psourcesNode6 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,pnfpNode4,pimportsontologyNode5,psourcesNode6,None,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new127(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode4 = nodeArrayList3[0]
    pimportsontologyNode5 = nodeArrayList4[0]
    psourcesNode6 = nodeArrayList5[0]
    puseserviceNode8 = nodeArrayList6[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,pnfpNode4,pimportsontologyNode5,psourcesNode6,None,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new128(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    ptargetNode7 = nodeArrayList2[0]
    puseserviceNode8 = nodeArrayList3[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,None,None,None,ptargetNode7,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new129(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    ptargetNode7 = nodeArrayList3[0]
    puseserviceNode8 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,None,None,None,ptargetNode7,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new130(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pnfpNode4 = nodeArrayList2[0]
    ptargetNode7 = nodeArrayList3[0]
    puseserviceNode8 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,pnfpNode4,None,None,ptargetNode7,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new131(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode4 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,pnfpNode4,None,None,ptargetNode7,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new132(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pimportsontologyNode5 = nodeArrayList2[0]
    ptargetNode7 = nodeArrayList3[0]
    puseserviceNode8 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,None,pimportsontologyNode5,None,ptargetNode7,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new133(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pimportsontologyNode5 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,None,pimportsontologyNode5,None,ptargetNode7,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new134(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pnfpNode4 = nodeArrayList2[0]
    pimportsontologyNode5 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,pnfpNode4,pimportsontologyNode5,None,ptargetNode7,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new135(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode4 = nodeArrayList3[0]
    pimportsontologyNode5 = nodeArrayList4[0]
    ptargetNode7 = nodeArrayList5[0]
    puseserviceNode8 = nodeArrayList6[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,pnfpNode4,pimportsontologyNode5,None,ptargetNode7,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new136(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    psourcesNode6 = nodeArrayList2[0]
    ptargetNode7 = nodeArrayList3[0]
    puseserviceNode8 = nodeArrayList4[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,None,None,psourcesNode6,ptargetNode7,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new137(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourcesNode6 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,None,None,psourcesNode6,ptargetNode7,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new138(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pnfpNode4 = nodeArrayList2[0]
    psourcesNode6 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,pnfpNode4,None,psourcesNode6,ptargetNode7,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new139(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode4 = nodeArrayList3[0]
    psourcesNode6 = nodeArrayList4[0]
    ptargetNode7 = nodeArrayList5[0]
    puseserviceNode8 = nodeArrayList6[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,pnfpNode4,None,psourcesNode6,ptargetNode7,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new140(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pimportsontologyNode5 = nodeArrayList2[0]
    psourcesNode6 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,None,pimportsontologyNode5,psourcesNode6,ptargetNode7,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new141(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pimportsontologyNode5 = nodeArrayList3[0]
    psourcesNode6 = nodeArrayList4[0]
    ptargetNode7 = nodeArrayList5[0]
    puseserviceNode8 = nodeArrayList6[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,None,pimportsontologyNode5,psourcesNode6,ptargetNode7,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new142(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pnfpNode4 = nodeArrayList2[0]
    pimportsontologyNode5 = nodeArrayList3[0]
    psourcesNode6 = nodeArrayList4[0]
    ptargetNode7 = nodeArrayList5[0]
    puseserviceNode8 = nodeArrayList6[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,None,pnfpNode4,pimportsontologyNode5,psourcesNode6,ptargetNode7,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new143(self):
    nodeList = list()
    nodeArrayList7 = self.pop()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttoomediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode4 = nodeArrayList3[0]
    pimportsontologyNode5 = nodeArrayList4[0]
    psourcesNode6 = nodeArrayList5[0]
    ptargetNode7 = nodeArrayList6[0]
    puseserviceNode8 = nodeArrayList7[0]
    poomediatorNode1 = AOomediator(ttoomediatorNode2,pidNode3,pnfpNode4,pimportsontologyNode5,psourcesNode6,ptargetNode7,puseserviceNode8)
    nodeList.append(poomediatorNode1)
    return nodeList, 16

def new144(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,None,listNode4,None,None,None)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new145(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,pidNode3,listNode4,None,None,None)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new146(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,None,listNode5,None,None,None)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new147(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,pidNode3,listNode5,None,None,None)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new148(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    psourcesNode5 = nodeArrayList2[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,None,listNode4,psourcesNode5,None,None)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new149(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourcesNode5 = nodeArrayList3[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,pidNode3,listNode4,psourcesNode5,None,None)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new150(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourcesNode6 = nodeArrayList3[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,None,listNode5,psourcesNode6,None,None)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new151(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourcesNode6 = nodeArrayList4[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,pidNode3,listNode5,psourcesNode6,None,None)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new152(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    ptargetNode6 = nodeArrayList2[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,None,listNode4,None,ptargetNode6,None)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new153(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    ptargetNode6 = nodeArrayList3[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,pidNode3,listNode4,None,ptargetNode6,None)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new154(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    ptargetNode7 = nodeArrayList3[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,None,listNode5,None,ptargetNode7,None)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new155(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    ptargetNode7 = nodeArrayList4[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,pidNode3,listNode5,None,ptargetNode7,None)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new156(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    psourcesNode5 = nodeArrayList2[0]
    ptargetNode6 = nodeArrayList3[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,None,listNode4,psourcesNode5,ptargetNode6,None)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new157(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourcesNode5 = nodeArrayList3[0]
    ptargetNode6 = nodeArrayList4[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,pidNode3,listNode4,psourcesNode5,ptargetNode6,None)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new158(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourcesNode6 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,None,listNode5,psourcesNode6,ptargetNode7,None)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new159(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourcesNode6 = nodeArrayList4[0]
    ptargetNode7 = nodeArrayList5[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,pidNode3,listNode5,psourcesNode6,ptargetNode7,None)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new160(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    puseserviceNode7 = nodeArrayList2[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,None,listNode4,None,None,puseserviceNode7)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new161(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    puseserviceNode7 = nodeArrayList3[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,pidNode3,listNode4,None,None,puseserviceNode7)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new162(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    puseserviceNode8 = nodeArrayList3[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,None,listNode5,None,None,puseserviceNode8)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new163(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    puseserviceNode8 = nodeArrayList4[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,pidNode3,listNode5,None,None,puseserviceNode8)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new164(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    psourcesNode5 = nodeArrayList2[0]
    puseserviceNode7 = nodeArrayList3[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,None,listNode4,psourcesNode5,None,puseserviceNode7)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new165(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourcesNode5 = nodeArrayList3[0]
    puseserviceNode7 = nodeArrayList4[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,pidNode3,listNode4,psourcesNode5,None,puseserviceNode7)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new166(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourcesNode6 = nodeArrayList3[0]
    puseserviceNode8 = nodeArrayList4[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,None,listNode5,psourcesNode6,None,puseserviceNode8)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new167(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourcesNode6 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,pidNode3,listNode5,psourcesNode6,None,puseserviceNode8)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new168(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    ptargetNode6 = nodeArrayList2[0]
    puseserviceNode7 = nodeArrayList3[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,None,listNode4,None,ptargetNode6,puseserviceNode7)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new169(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    ptargetNode6 = nodeArrayList3[0]
    puseserviceNode7 = nodeArrayList4[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,pidNode3,listNode4,None,ptargetNode6,puseserviceNode7)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new170(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    ptargetNode7 = nodeArrayList3[0]
    puseserviceNode8 = nodeArrayList4[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,None,listNode5,None,ptargetNode7,puseserviceNode8)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new171(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    ptargetNode7 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,pidNode3,listNode5,None,ptargetNode7,puseserviceNode8)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new172(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    psourcesNode5 = nodeArrayList2[0]
    ptargetNode6 = nodeArrayList3[0]
    puseserviceNode7 = nodeArrayList4[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,None,listNode4,psourcesNode5,ptargetNode6,puseserviceNode7)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new173(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourcesNode5 = nodeArrayList3[0]
    ptargetNode6 = nodeArrayList4[0]
    puseserviceNode7 = nodeArrayList5[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,pidNode3,listNode4,psourcesNode5,ptargetNode6,puseserviceNode7)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new174(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourcesNode6 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,None,listNode5,psourcesNode6,ptargetNode7,puseserviceNode8)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new175(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttggmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourcesNode6 = nodeArrayList4[0]
    ptargetNode7 = nodeArrayList5[0]
    puseserviceNode8 = nodeArrayList6[0]
    pggmediatorNode1 = AGgmediator(ttggmediatorNode2,pidNode3,listNode5,psourcesNode6,ptargetNode7,puseserviceNode8)
    nodeList.append(pggmediatorNode1)
    return nodeList, 17

def new176(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,None,listNode4,None,None,None)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new177(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,pidNode3,listNode4,None,None,None)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new178(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,None,listNode5,None,None,None)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new179(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,pidNode3,listNode5,None,None,None)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new180(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    psourceNode5 = nodeArrayList2[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,None,listNode4,psourceNode5,None,None)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new181(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourceNode5 = nodeArrayList3[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,pidNode3,listNode4,psourceNode5,None,None)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new182(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourceNode6 = nodeArrayList3[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,None,listNode5,psourceNode6,None,None)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new183(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourceNode6 = nodeArrayList4[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,pidNode3,listNode5,psourceNode6,None,None)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new184(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    ptargetNode6 = nodeArrayList2[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,None,listNode4,None,ptargetNode6,None)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new185(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    ptargetNode6 = nodeArrayList3[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,pidNode3,listNode4,None,ptargetNode6,None)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new186(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    ptargetNode7 = nodeArrayList3[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,None,listNode5,None,ptargetNode7,None)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new187(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    ptargetNode7 = nodeArrayList4[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,pidNode3,listNode5,None,ptargetNode7,None)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new188(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    psourceNode5 = nodeArrayList2[0]
    ptargetNode6 = nodeArrayList3[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,None,listNode4,psourceNode5,ptargetNode6,None)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new189(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourceNode5 = nodeArrayList3[0]
    ptargetNode6 = nodeArrayList4[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,pidNode3,listNode4,psourceNode5,ptargetNode6,None)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new190(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourceNode6 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,None,listNode5,psourceNode6,ptargetNode7,None)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new191(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourceNode6 = nodeArrayList4[0]
    ptargetNode7 = nodeArrayList5[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,pidNode3,listNode5,psourceNode6,ptargetNode7,None)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new192(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    puseserviceNode7 = nodeArrayList2[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,None,listNode4,None,None,puseserviceNode7)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new193(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    puseserviceNode7 = nodeArrayList3[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,pidNode3,listNode4,None,None,puseserviceNode7)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new194(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    puseserviceNode8 = nodeArrayList3[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,None,listNode5,None,None,puseserviceNode8)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new195(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    puseserviceNode8 = nodeArrayList4[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,pidNode3,listNode5,None,None,puseserviceNode8)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new196(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    psourceNode5 = nodeArrayList2[0]
    puseserviceNode7 = nodeArrayList3[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,None,listNode4,psourceNode5,None,puseserviceNode7)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new197(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourceNode5 = nodeArrayList3[0]
    puseserviceNode7 = nodeArrayList4[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,pidNode3,listNode4,psourceNode5,None,puseserviceNode7)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new198(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourceNode6 = nodeArrayList3[0]
    puseserviceNode8 = nodeArrayList4[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,None,listNode5,psourceNode6,None,puseserviceNode8)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new199(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourceNode6 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,pidNode3,listNode5,psourceNode6,None,puseserviceNode8)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new200(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    ptargetNode6 = nodeArrayList2[0]
    puseserviceNode7 = nodeArrayList3[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,None,listNode4,None,ptargetNode6,puseserviceNode7)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new201(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    ptargetNode6 = nodeArrayList3[0]
    puseserviceNode7 = nodeArrayList4[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,pidNode3,listNode4,None,ptargetNode6,puseserviceNode7)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new202(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    ptargetNode7 = nodeArrayList3[0]
    puseserviceNode8 = nodeArrayList4[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,None,listNode5,None,ptargetNode7,puseserviceNode8)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new203(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    ptargetNode7 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,pidNode3,listNode5,None,ptargetNode7,puseserviceNode8)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new204(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    psourceNode5 = nodeArrayList2[0]
    ptargetNode6 = nodeArrayList3[0]
    puseserviceNode7 = nodeArrayList4[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,None,listNode4,psourceNode5,ptargetNode6,puseserviceNode7)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new205(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourceNode5 = nodeArrayList3[0]
    ptargetNode6 = nodeArrayList4[0]
    puseserviceNode7 = nodeArrayList5[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,pidNode3,listNode4,psourceNode5,ptargetNode6,puseserviceNode7)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new206(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourceNode6 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,None,listNode5,psourceNode6,ptargetNode7,puseserviceNode8)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new207(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwgmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourceNode6 = nodeArrayList4[0]
    ptargetNode7 = nodeArrayList5[0]
    puseserviceNode8 = nodeArrayList6[0]
    pwgmediatorNode1 = AWgmediator(ttwgmediatorNode2,pidNode3,listNode5,psourceNode6,ptargetNode7,puseserviceNode8)
    nodeList.append(pwgmediatorNode1)
    return nodeList, 18

def new208(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,None,listNode4,None,None,None)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new209(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,pidNode3,listNode4,None,None,None)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new210(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,None,listNode5,None,None,None)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new211(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,pidNode3,listNode5,None,None,None)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new212(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    psourceNode5 = nodeArrayList2[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,None,listNode4,psourceNode5,None,None)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new213(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourceNode5 = nodeArrayList3[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,pidNode3,listNode4,psourceNode5,None,None)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new214(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourceNode6 = nodeArrayList3[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,None,listNode5,psourceNode6,None,None)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new215(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourceNode6 = nodeArrayList4[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,pidNode3,listNode5,psourceNode6,None,None)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new216(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    ptargetNode6 = nodeArrayList2[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,None,listNode4,None,ptargetNode6,None)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new217(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    ptargetNode6 = nodeArrayList3[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,pidNode3,listNode4,None,ptargetNode6,None)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new218(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    ptargetNode7 = nodeArrayList3[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,None,listNode5,None,ptargetNode7,None)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new219(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    ptargetNode7 = nodeArrayList4[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,pidNode3,listNode5,None,ptargetNode7,None)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new220(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    psourceNode5 = nodeArrayList2[0]
    ptargetNode6 = nodeArrayList3[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,None,listNode4,psourceNode5,ptargetNode6,None)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new221(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourceNode5 = nodeArrayList3[0]
    ptargetNode6 = nodeArrayList4[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,pidNode3,listNode4,psourceNode5,ptargetNode6,None)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new222(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourceNode6 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,None,listNode5,psourceNode6,ptargetNode7,None)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new223(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourceNode6 = nodeArrayList4[0]
    ptargetNode7 = nodeArrayList5[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,pidNode3,listNode5,psourceNode6,ptargetNode7,None)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new224(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    puseserviceNode7 = nodeArrayList2[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,None,listNode4,None,None,puseserviceNode7)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new225(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    puseserviceNode7 = nodeArrayList3[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,pidNode3,listNode4,None,None,puseserviceNode7)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new226(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    puseserviceNode8 = nodeArrayList3[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,None,listNode5,None,None,puseserviceNode8)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new227(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    puseserviceNode8 = nodeArrayList4[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,pidNode3,listNode5,None,None,puseserviceNode8)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new228(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    psourceNode5 = nodeArrayList2[0]
    puseserviceNode7 = nodeArrayList3[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,None,listNode4,psourceNode5,None,puseserviceNode7)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new229(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourceNode5 = nodeArrayList3[0]
    puseserviceNode7 = nodeArrayList4[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,pidNode3,listNode4,psourceNode5,None,puseserviceNode7)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new230(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourceNode6 = nodeArrayList3[0]
    puseserviceNode8 = nodeArrayList4[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,None,listNode5,psourceNode6,None,puseserviceNode8)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new231(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourceNode6 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,pidNode3,listNode5,psourceNode6,None,puseserviceNode8)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new232(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    ptargetNode6 = nodeArrayList2[0]
    puseserviceNode7 = nodeArrayList3[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,None,listNode4,None,ptargetNode6,puseserviceNode7)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new233(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    ptargetNode6 = nodeArrayList3[0]
    puseserviceNode7 = nodeArrayList4[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,pidNode3,listNode4,None,ptargetNode6,puseserviceNode7)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new234(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    ptargetNode7 = nodeArrayList3[0]
    puseserviceNode8 = nodeArrayList4[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,None,listNode5,None,ptargetNode7,puseserviceNode8)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new235(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    ptargetNode7 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,pidNode3,listNode5,None,ptargetNode7,puseserviceNode8)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new236(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    psourceNode5 = nodeArrayList2[0]
    ptargetNode6 = nodeArrayList3[0]
    puseserviceNode7 = nodeArrayList4[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,None,listNode4,psourceNode5,ptargetNode6,puseserviceNode7)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new237(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourceNode5 = nodeArrayList3[0]
    ptargetNode6 = nodeArrayList4[0]
    puseserviceNode7 = nodeArrayList5[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,pidNode3,listNode4,psourceNode5,ptargetNode6,puseserviceNode7)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new238(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourceNode6 = nodeArrayList3[0]
    ptargetNode7 = nodeArrayList4[0]
    puseserviceNode8 = nodeArrayList5[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,None,listNode5,psourceNode6,ptargetNode7,puseserviceNode8)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new239(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttwwmediatorNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    psourceNode6 = nodeArrayList4[0]
    ptargetNode7 = nodeArrayList5[0]
    puseserviceNode8 = nodeArrayList6[0]
    pwwmediatorNode1 = AWwmediator(ttwwmediatorNode2,pidNode3,listNode5,psourceNode6,ptargetNode7,puseserviceNode8)
    nodeList.append(pwwmediatorNode1)
    return nodeList, 19

def new240(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttuseserviceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    puseserviceNode1 = AUseService(ttuseserviceNode2,pidNode3)
    nodeList.append(puseserviceNode1)
    return nodeList, 20

def new241(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttsourceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psourceNode1 = ASource(ttsourceNode2,pidNode3)
    nodeList.append(psourceNode1)
    return nodeList, 21

def new242(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttsourceNode2 = nodeArrayList1[0]
    tlbraceNode3 = nodeArrayList2[0]
    pidNode4 = nodeArrayList3[0]
    trbraceNode6 = nodeArrayList4[0]
    pmsourcesNode1 = AMsources(ttsourceNode2,tlbraceNode3,pidNode4,listNode5,trbraceNode6)
    nodeList.append(pmsourcesNode1)
    return nodeList, 22

def new243(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    ttsourceNode2 = nodeArrayList1[0]
    tlbraceNode3 = nodeArrayList2[0]
    pidNode4 = nodeArrayList3[0]
    listNode5 = nodeArrayList4[0]
    if (listNode5 != None):
        listNode6.extend(listNode5)
    trbraceNode7 = nodeArrayList5[0]
    pmsourcesNode1 = AMsources(ttsourceNode2,tlbraceNode3,pidNode4,listNode6,trbraceNode7)
    nodeList.append(pmsourcesNode1)
    return nodeList, 22

def new244(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    psourceNode2 = nodeArrayList1[0]
    psourcesNode1 = ASingleSources(psourceNode2)
    nodeList.append(psourcesNode1)
    return nodeList, 23

def new245(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pmsourcesNode2 = nodeArrayList1[0]
    psourcesNode1 = AMultipleSources(pmsourcesNode2)
    nodeList.append(psourcesNode1)
    return nodeList, 23

def new246(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tttargetNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    ptargetNode1 = ATarget(tttargetNode2,pidNode3)
    nodeList.append(ptargetNode1)
    return nodeList, 24

def new247(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttpreconditionNode2 = nodeArrayList1[0]
    paxiomdefinitionNode3 = nodeArrayList2[0]
    pprepostassoreffNode1 = APreconditionPrePostAssOrEff(ttpreconditionNode2,paxiomdefinitionNode3)
    nodeList.append(pprepostassoreffNode1)
    return nodeList, 25

def new248(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttpostconditionNode2 = nodeArrayList1[0]
    paxiomdefinitionNode3 = nodeArrayList2[0]
    pprepostassoreffNode1 = APostconditionPrePostAssOrEff(ttpostconditionNode2,paxiomdefinitionNode3)
    nodeList.append(pprepostassoreffNode1)
    return nodeList, 25

def new249(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttassumptionNode2 = nodeArrayList1[0]
    paxiomdefinitionNode3 = nodeArrayList2[0]
    pprepostassoreffNode1 = AAssumptionPrePostAssOrEff(ttassumptionNode2,paxiomdefinitionNode3)
    nodeList.append(pprepostassoreffNode1)
    return nodeList, 25

def new250(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tteffectNode2 = nodeArrayList1[0]
    paxiomdefinitionNode3 = nodeArrayList2[0]
    pprepostassoreffNode1 = AEffectPrePostAssOrEff(tteffectNode2,paxiomdefinitionNode3)
    nodeList.append(pprepostassoreffNode1)
    return nodeList, 25

def new251(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    tlbraceNode3 = nodeArrayList2[0]
    pidNode4 = nodeArrayList3[0]
    trbraceNode6 = nodeArrayList4[0]
    pminterfacesNode1 = AMinterfaces(ttinterfaceNode2,tlbraceNode3,pidNode4,listNode5,trbraceNode6)
    nodeList.append(pminterfacesNode1)
    return nodeList, 26

def new252(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    tlbraceNode3 = nodeArrayList2[0]
    pidNode4 = nodeArrayList3[0]
    listNode5 = nodeArrayList4[0]
    if (listNode5 != None):
        listNode6.extend(listNode5)
    trbraceNode7 = nodeArrayList5[0]
    pminterfacesNode1 = AMinterfaces(ttinterfaceNode2,tlbraceNode3,pidNode4,listNode6,trbraceNode7)
    nodeList.append(pminterfacesNode1)
    return nodeList, 26

def new253(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    pinterfaceNode1 = AInterface(ttinterfaceNode2,None,listNode4,None,None)
    nodeList.append(pinterfaceNode1)
    return nodeList, 27

def new254(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pinterfaceNode1 = AInterface(ttinterfaceNode2,pidNode3,listNode4,None,None)
    nodeList.append(pinterfaceNode1)
    return nodeList, 27

def new255(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pinterfaceNode1 = AInterface(ttinterfaceNode2,None,listNode5,None,None)
    nodeList.append(pinterfaceNode1)
    return nodeList, 27

def new256(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pinterfaceNode1 = AInterface(ttinterfaceNode2,pidNode3,listNode5,None,None)
    nodeList.append(pinterfaceNode1)
    return nodeList, 27

def new257(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    pchoreographyNode5 = nodeArrayList2[0]
    pinterfaceNode1 = AInterface(ttinterfaceNode2,None,listNode4,pchoreographyNode5,None)
    nodeList.append(pinterfaceNode1)
    return nodeList, 27

def new258(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pchoreographyNode5 = nodeArrayList3[0]
    pinterfaceNode1 = AInterface(ttinterfaceNode2,pidNode3,listNode4,pchoreographyNode5,None)
    nodeList.append(pinterfaceNode1)
    return nodeList, 27

def new259(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pchoreographyNode6 = nodeArrayList3[0]
    pinterfaceNode1 = AInterface(ttinterfaceNode2,None,listNode5,pchoreographyNode6,None)
    nodeList.append(pinterfaceNode1)
    return nodeList, 27

def new260(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pchoreographyNode6 = nodeArrayList4[0]
    pinterfaceNode1 = AInterface(ttinterfaceNode2,pidNode3,listNode5,pchoreographyNode6,None)
    nodeList.append(pinterfaceNode1)
    return nodeList, 27

def new261(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    porchestrationNode6 = nodeArrayList2[0]
    pinterfaceNode1 = AInterface(ttinterfaceNode2,None,listNode4,None,porchestrationNode6)
    nodeList.append(pinterfaceNode1)
    return nodeList, 27

def new262(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    porchestrationNode6 = nodeArrayList3[0]
    pinterfaceNode1 = AInterface(ttinterfaceNode2,pidNode3,listNode4,None,porchestrationNode6)
    nodeList.append(pinterfaceNode1)
    return nodeList, 27

def new263(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    porchestrationNode7 = nodeArrayList3[0]
    pinterfaceNode1 = AInterface(ttinterfaceNode2,None,listNode5,None,porchestrationNode7)
    nodeList.append(pinterfaceNode1)
    return nodeList, 27

def new264(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    porchestrationNode7 = nodeArrayList4[0]
    pinterfaceNode1 = AInterface(ttinterfaceNode2,pidNode3,listNode5,None,porchestrationNode7)
    nodeList.append(pinterfaceNode1)
    return nodeList, 27

def new265(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    pchoreographyNode5 = nodeArrayList2[0]
    porchestrationNode6 = nodeArrayList3[0]
    pinterfaceNode1 = AInterface(ttinterfaceNode2,None,listNode4,pchoreographyNode5,porchestrationNode6)
    nodeList.append(pinterfaceNode1)
    return nodeList, 27

def new266(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pchoreographyNode5 = nodeArrayList3[0]
    porchestrationNode6 = nodeArrayList4[0]
    pinterfaceNode1 = AInterface(ttinterfaceNode2,pidNode3,listNode4,pchoreographyNode5,porchestrationNode6)
    nodeList.append(pinterfaceNode1)
    return nodeList, 27

def new267(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pchoreographyNode6 = nodeArrayList3[0]
    porchestrationNode7 = nodeArrayList4[0]
    pinterfaceNode1 = AInterface(ttinterfaceNode2,None,listNode5,pchoreographyNode6,porchestrationNode7)
    nodeList.append(pinterfaceNode1)
    return nodeList, 27

def new268(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    ttinterfaceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pchoreographyNode6 = nodeArrayList4[0]
    porchestrationNode7 = nodeArrayList5[0]
    pinterfaceNode1 = AInterface(ttinterfaceNode2,pidNode3,listNode5,pchoreographyNode6,porchestrationNode7)
    nodeList.append(pinterfaceNode1)
    return nodeList, 27

def new269(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pinterfaceNode2 = nodeArrayList1[0]
    pinterfacesNode1 = ASingleInterfaces(pinterfaceNode2)
    nodeList.append(pinterfacesNode1)
    return nodeList, 28

def new270(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pminterfacesNode2 = nodeArrayList1[0]
    pinterfacesNode1 = AMultipleInterfaces(pminterfacesNode2)
    nodeList.append(pinterfacesNode1)
    return nodeList, 28

def new271(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttchoreographyNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pchoreographyNode1 = AChoreography(ttchoreographyNode2,pidNode3)
    nodeList.append(pchoreographyNode1)
    return nodeList, 29

def new272(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttorchestrationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    porchestrationNode1 = AOrchestration(ttorchestrationNode2,pidNode3)
    nodeList.append(porchestrationNode1)
    return nodeList, 30

def new273(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode5 = list()
    ttontologyNode2 = nodeArrayList1[0]
    pontologyNode1 = AOntology(ttontologyNode2,None,listNode4,listNode5)
    nodeList.append(pontologyNode1)
    return nodeList, 31

def new274(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode5 = list()
    ttontologyNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pontologyNode1 = AOntology(ttontologyNode2,pidNode3,listNode4,listNode5)
    nodeList.append(pontologyNode1)
    return nodeList, 31

def new275(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode6 = list()
    ttontologyNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pontologyNode1 = AOntology(ttontologyNode2,None,listNode5,listNode6)
    nodeList.append(pontologyNode1)
    return nodeList, 31

def new276(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode6 = list()
    ttontologyNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    pontologyNode1 = AOntology(ttontologyNode2,pidNode3,listNode5,listNode6)
    nodeList.append(pontologyNode1)
    return nodeList, 31

def new277(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode6 = list()
    ttontologyNode2 = nodeArrayList1[0]
    listNode5 = nodeArrayList2[0]
    if (listNode5 != None):
        listNode6.extend(listNode5)
    pontologyNode1 = AOntology(ttontologyNode2,None,listNode4,listNode6)
    nodeList.append(pontologyNode1)
    return nodeList, 31

def new278(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    listNode6 = list()
    ttontologyNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode5 = nodeArrayList3[0]
    if (listNode5 != None):
        listNode6.extend(listNode5)
    pontologyNode1 = AOntology(ttontologyNode2,pidNode3,listNode4,listNode6)
    nodeList.append(pontologyNode1)
    return nodeList, 31

def new279(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode7 = list()
    ttontologyNode2 = nodeArrayList1[0]
    listNode4 = nodeArrayList2[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    listNode6 = nodeArrayList3[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pontologyNode1 = AOntology(ttontologyNode2,None,listNode5,listNode7)
    nodeList.append(pontologyNode1)
    return nodeList, 31

def new280(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    listNode7 = list()
    ttontologyNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    listNode6 = nodeArrayList4[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pontologyNode1 = AOntology(ttontologyNode2,pidNode3,listNode5,listNode7)
    nodeList.append(pontologyNode1)
    return nodeList, 31

def new281(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pconceptNode2 = nodeArrayList1[0]
    pontologyelementNode1 = AConceptOntologyElement(pconceptNode2)
    nodeList.append(pontologyelementNode1)
    return nodeList, 32

def new282(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pinstanceNode2 = nodeArrayList1[0]
    pontologyelementNode1 = AInstanceOntologyElement(pinstanceNode2)
    nodeList.append(pontologyelementNode1)
    return nodeList, 32

def new283(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    prelationNode2 = nodeArrayList1[0]
    pontologyelementNode1 = ARelationOntologyElement(prelationNode2)
    nodeList.append(pontologyelementNode1)
    return nodeList, 32

def new284(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    prelationinstanceNode2 = nodeArrayList1[0]
    pontologyelementNode1 = ARelationinstanceOntologyElement(prelationinstanceNode2)
    nodeList.append(pontologyelementNode1)
    return nodeList, 32

def new285(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    paxiomNode2 = nodeArrayList1[0]
    pontologyelementNode1 = AAxiomOntologyElement(paxiomNode2)
    nodeList.append(pontologyelementNode1)
    return nodeList, 32

def new286(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    ttconceptNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pconceptNode1 = AConcept(ttconceptNode2,pidNode3,None,None,listNode6)
    nodeList.append(pconceptNode1)
    return nodeList, 33

def new287(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    ttconceptNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psuperconceptNode4 = nodeArrayList3[0]
    pconceptNode1 = AConcept(ttconceptNode2,pidNode3,psuperconceptNode4,None,listNode6)
    nodeList.append(pconceptNode1)
    return nodeList, 33

def new288(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    ttconceptNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode5 = nodeArrayList3[0]
    pconceptNode1 = AConcept(ttconceptNode2,pidNode3,None,pnfpNode5,listNode6)
    nodeList.append(pconceptNode1)
    return nodeList, 33

def new289(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    ttconceptNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psuperconceptNode4 = nodeArrayList3[0]
    pnfpNode5 = nodeArrayList4[0]
    pconceptNode1 = AConcept(ttconceptNode2,pidNode3,psuperconceptNode4,pnfpNode5,listNode6)
    nodeList.append(pconceptNode1)
    return nodeList, 33

def new290(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    ttconceptNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode6 = nodeArrayList3[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pconceptNode1 = AConcept(ttconceptNode2,pidNode3,None,None,listNode7)
    nodeList.append(pconceptNode1)
    return nodeList, 33

def new291(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    ttconceptNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psuperconceptNode4 = nodeArrayList3[0]
    listNode6 = nodeArrayList4[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pconceptNode1 = AConcept(ttconceptNode2,pidNode3,psuperconceptNode4,None,listNode7)
    nodeList.append(pconceptNode1)
    return nodeList, 33

def new292(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    ttconceptNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode5 = nodeArrayList3[0]
    listNode6 = nodeArrayList4[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pconceptNode1 = AConcept(ttconceptNode2,pidNode3,None,pnfpNode5,listNode7)
    nodeList.append(pconceptNode1)
    return nodeList, 33

def new293(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    ttconceptNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psuperconceptNode4 = nodeArrayList3[0]
    pnfpNode5 = nodeArrayList4[0]
    listNode6 = nodeArrayList5[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pconceptNode1 = AConcept(ttconceptNode2,pidNode3,psuperconceptNode4,pnfpNode5,listNode7)
    nodeList.append(pconceptNode1)
    return nodeList, 33

def new294(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttsubconceptNode2 = nodeArrayList1[0]
    pidlistNode3 = nodeArrayList2[0]
    psuperconceptNode1 = ASuperconcept(ttsubconceptNode2,pidlistNode3)
    nodeList.append(psuperconceptNode1)
    return nodeList, 34

def new295(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ttoftypeNode2 = nodeArrayList1[0]
    patttypeNode1 = AOpenWorldAttType(ttoftypeNode2)
    nodeList.append(patttypeNode1)
    return nodeList, 35

def new296(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ttimpliestypeNode2 = nodeArrayList1[0]
    patttypeNode1 = AClosedWorldAttType(ttimpliestypeNode2)
    nodeList.append(patttypeNode1)
    return nodeList, 35

def new297(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    pidNode2 = nodeArrayList1[0]
    patttypeNode4 = nodeArrayList2[0]
    pidlistNode6 = nodeArrayList3[0]
    pattributeNode1 = AAttribute(pidNode2,listNode3,patttypeNode4,None,pidlistNode6,None)
    nodeList.append(pattributeNode1)
    return nodeList, 36

def new298(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    pidNode2 = nodeArrayList1[0]
    listNode3 = nodeArrayList2[0]
    if (listNode3 != None):
        listNode4.extend(listNode3)
    patttypeNode5 = nodeArrayList3[0]
    pidlistNode7 = nodeArrayList4[0]
    pattributeNode1 = AAttribute(pidNode2,listNode4,patttypeNode5,None,pidlistNode7,None)
    nodeList.append(pattributeNode1)
    return nodeList, 36

def new299(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    pidNode2 = nodeArrayList1[0]
    patttypeNode4 = nodeArrayList2[0]
    pcardinalityNode5 = nodeArrayList3[0]
    pidlistNode6 = nodeArrayList4[0]
    pattributeNode1 = AAttribute(pidNode2,listNode3,patttypeNode4,pcardinalityNode5,pidlistNode6,None)
    nodeList.append(pattributeNode1)
    return nodeList, 36

def new300(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    pidNode2 = nodeArrayList1[0]
    listNode3 = nodeArrayList2[0]
    if (listNode3 != None):
        listNode4.extend(listNode3)
    patttypeNode5 = nodeArrayList3[0]
    pcardinalityNode6 = nodeArrayList4[0]
    pidlistNode7 = nodeArrayList5[0]
    pattributeNode1 = AAttribute(pidNode2,listNode4,patttypeNode5,pcardinalityNode6,pidlistNode7,None)
    nodeList.append(pattributeNode1)
    return nodeList, 36

def new301(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    pidNode2 = nodeArrayList1[0]
    patttypeNode4 = nodeArrayList2[0]
    pidlistNode6 = nodeArrayList3[0]
    pnfpNode7 = nodeArrayList4[0]
    pattributeNode1 = AAttribute(pidNode2,listNode3,patttypeNode4,None,pidlistNode6,pnfpNode7)
    nodeList.append(pattributeNode1)
    return nodeList, 36

def new302(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    pidNode2 = nodeArrayList1[0]
    listNode3 = nodeArrayList2[0]
    if (listNode3 != None):
        listNode4.extend(listNode3)
    patttypeNode5 = nodeArrayList3[0]
    pidlistNode7 = nodeArrayList4[0]
    pnfpNode8 = nodeArrayList5[0]
    pattributeNode1 = AAttribute(pidNode2,listNode4,patttypeNode5,None,pidlistNode7,pnfpNode8)
    nodeList.append(pattributeNode1)
    return nodeList, 36

def new303(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    pidNode2 = nodeArrayList1[0]
    patttypeNode4 = nodeArrayList2[0]
    pcardinalityNode5 = nodeArrayList3[0]
    pidlistNode6 = nodeArrayList4[0]
    pnfpNode7 = nodeArrayList5[0]
    pattributeNode1 = AAttribute(pidNode2,listNode3,patttypeNode4,pcardinalityNode5,pidlistNode6,pnfpNode7)
    nodeList.append(pattributeNode1)
    return nodeList, 36

def new304(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    pidNode2 = nodeArrayList1[0]
    listNode3 = nodeArrayList2[0]
    if (listNode3 != None):
        listNode4.extend(listNode3)
    patttypeNode5 = nodeArrayList3[0]
    pcardinalityNode6 = nodeArrayList4[0]
    pidlistNode7 = nodeArrayList5[0]
    pnfpNode8 = nodeArrayList6[0]
    pattributeNode1 = AAttribute(pidNode2,listNode4,patttypeNode5,pcardinalityNode6,pidlistNode7,pnfpNode8)
    nodeList.append(pattributeNode1)
    return nodeList, 36

def new305(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tlparNode2 = nodeArrayList1[0]
    tposintegerNode3 = nodeArrayList2[0]
    trparNode5 = nodeArrayList3[0]
    pcardinalityNode1 = ACardinality(tlparNode2,tposintegerNode3,None,trparNode5)
    nodeList.append(pcardinalityNode1)
    return nodeList, 37

def new306(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tlparNode2 = nodeArrayList1[0]
    tposintegerNode3 = nodeArrayList2[0]
    pcardinalitynumberNode4 = nodeArrayList3[0]
    trparNode5 = nodeArrayList4[0]
    pcardinalityNode1 = ACardinality(tlparNode2,tposintegerNode3,pcardinalitynumberNode4,trparNode5)
    nodeList.append(pcardinalityNode1)
    return nodeList, 37

def new307(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tposintegerNode2 = nodeArrayList1[0]
    pcardinalitynumberNode1 = AFiniteCardinalityCardinalityNumber(tposintegerNode2)
    nodeList.append(pcardinalitynumberNode1)
    return nodeList, 38

def new308(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tstarNode2 = nodeArrayList1[0]
    pcardinalitynumberNode1 = AInfiniteCardinalityCardinalityNumber(tstarNode2)
    nodeList.append(pcardinalitynumberNode1)
    return nodeList, 38

def new309(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tttransitiveNode2 = nodeArrayList1[0]
    pattributefeatureNode1 = ATransitiveAttributefeature(tttransitiveNode2)
    nodeList.append(pattributefeatureNode1)
    return nodeList, 39

def new310(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ttsymmetricNode2 = nodeArrayList1[0]
    pattributefeatureNode1 = ASymmetricAttributefeature(ttsymmetricNode2)
    nodeList.append(pattributefeatureNode1)
    return nodeList, 39

def new311(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttinverseofNode2 = nodeArrayList1[0]
    tlparNode3 = nodeArrayList2[0]
    pidNode4 = nodeArrayList3[0]
    trparNode5 = nodeArrayList4[0]
    pattributefeatureNode1 = AInverseAttributefeature(ttinverseofNode2,tlparNode3,pidNode4,trparNode5)
    nodeList.append(pattributefeatureNode1)
    return nodeList, 39

def new312(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ttreflexiveNode2 = nodeArrayList1[0]
    pattributefeatureNode1 = AReflexiveAttributefeature(ttreflexiveNode2)
    nodeList.append(pattributefeatureNode1)
    return nodeList, 39

def new313(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    ttinstanceNode2 = nodeArrayList1[0]
    pinstanceNode1 = AInstance(ttinstanceNode2,None,None,None,listNode6)
    nodeList.append(pinstanceNode1)
    return nodeList, 40

def new314(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    ttinstanceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pinstanceNode1 = AInstance(ttinstanceNode2,pidNode3,None,None,listNode6)
    nodeList.append(pinstanceNode1)
    return nodeList, 40

def new315(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    ttinstanceNode2 = nodeArrayList1[0]
    pmemberofNode4 = nodeArrayList2[0]
    pinstanceNode1 = AInstance(ttinstanceNode2,None,pmemberofNode4,None,listNode6)
    nodeList.append(pinstanceNode1)
    return nodeList, 40

def new316(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    ttinstanceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pmemberofNode4 = nodeArrayList3[0]
    pinstanceNode1 = AInstance(ttinstanceNode2,pidNode3,pmemberofNode4,None,listNode6)
    nodeList.append(pinstanceNode1)
    return nodeList, 40

def new317(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    ttinstanceNode2 = nodeArrayList1[0]
    pnfpNode5 = nodeArrayList2[0]
    pinstanceNode1 = AInstance(ttinstanceNode2,None,None,pnfpNode5,listNode6)
    nodeList.append(pinstanceNode1)
    return nodeList, 40

def new318(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    ttinstanceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode5 = nodeArrayList3[0]
    pinstanceNode1 = AInstance(ttinstanceNode2,pidNode3,None,pnfpNode5,listNode6)
    nodeList.append(pinstanceNode1)
    return nodeList, 40

def new319(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    ttinstanceNode2 = nodeArrayList1[0]
    pmemberofNode4 = nodeArrayList2[0]
    pnfpNode5 = nodeArrayList3[0]
    pinstanceNode1 = AInstance(ttinstanceNode2,None,pmemberofNode4,pnfpNode5,listNode6)
    nodeList.append(pinstanceNode1)
    return nodeList, 40

def new320(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode6 = list()
    ttinstanceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pmemberofNode4 = nodeArrayList3[0]
    pnfpNode5 = nodeArrayList4[0]
    pinstanceNode1 = AInstance(ttinstanceNode2,pidNode3,pmemberofNode4,pnfpNode5,listNode6)
    nodeList.append(pinstanceNode1)
    return nodeList, 40

def new321(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    ttinstanceNode2 = nodeArrayList1[0]
    listNode6 = nodeArrayList2[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pinstanceNode1 = AInstance(ttinstanceNode2,None,None,None,listNode7)
    nodeList.append(pinstanceNode1)
    return nodeList, 40

def new322(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    ttinstanceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode6 = nodeArrayList3[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pinstanceNode1 = AInstance(ttinstanceNode2,pidNode3,None,None,listNode7)
    nodeList.append(pinstanceNode1)
    return nodeList, 40

def new323(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    ttinstanceNode2 = nodeArrayList1[0]
    pmemberofNode4 = nodeArrayList2[0]
    listNode6 = nodeArrayList3[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pinstanceNode1 = AInstance(ttinstanceNode2,None,pmemberofNode4,None,listNode7)
    nodeList.append(pinstanceNode1)
    return nodeList, 40

def new324(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    ttinstanceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pmemberofNode4 = nodeArrayList3[0]
    listNode6 = nodeArrayList4[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pinstanceNode1 = AInstance(ttinstanceNode2,pidNode3,pmemberofNode4,None,listNode7)
    nodeList.append(pinstanceNode1)
    return nodeList, 40

def new325(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    ttinstanceNode2 = nodeArrayList1[0]
    pnfpNode5 = nodeArrayList2[0]
    listNode6 = nodeArrayList3[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pinstanceNode1 = AInstance(ttinstanceNode2,None,None,pnfpNode5,listNode7)
    nodeList.append(pinstanceNode1)
    return nodeList, 40

def new326(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    ttinstanceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode5 = nodeArrayList3[0]
    listNode6 = nodeArrayList4[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pinstanceNode1 = AInstance(ttinstanceNode2,pidNode3,None,pnfpNode5,listNode7)
    nodeList.append(pinstanceNode1)
    return nodeList, 40

def new327(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    ttinstanceNode2 = nodeArrayList1[0]
    pmemberofNode4 = nodeArrayList2[0]
    pnfpNode5 = nodeArrayList3[0]
    listNode6 = nodeArrayList4[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pinstanceNode1 = AInstance(ttinstanceNode2,None,pmemberofNode4,pnfpNode5,listNode7)
    nodeList.append(pinstanceNode1)
    return nodeList, 40

def new328(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    ttinstanceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pmemberofNode4 = nodeArrayList3[0]
    pnfpNode5 = nodeArrayList4[0]
    listNode6 = nodeArrayList5[0]
    if (listNode6 != None):
        listNode7.extend(listNode6)
    pinstanceNode1 = AInstance(ttinstanceNode2,pidNode3,pmemberofNode4,pnfpNode5,listNode7)
    nodeList.append(pinstanceNode1)
    return nodeList, 40

def new329(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttmemberofNode2 = nodeArrayList1[0]
    pidlistNode3 = nodeArrayList2[0]
    pmemberofNode1 = AMemberof(ttmemberofNode2,pidlistNode3)
    nodeList.append(pmemberofNode1)
    return nodeList, 41

def new330(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pidNode2 = nodeArrayList1[0]
    tthasvalueNode3 = nodeArrayList2[0]
    pvaluelistNode4 = nodeArrayList3[0]
    pattributevalueNode1 = AAttributevalue(pidNode2,tthasvalueNode3,pvaluelistNode4)
    nodeList.append(pattributevalueNode1)
    return nodeList, 42

def new331(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttrelationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    prelationNode1 = ARelation(ttrelationNode2,pidNode3,None,None,None,None)
    nodeList.append(prelationNode1)
    return nodeList, 43

def new332(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttrelationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    parityNode4 = nodeArrayList3[0]
    prelationNode1 = ARelation(ttrelationNode2,pidNode3,parityNode4,None,None,None)
    nodeList.append(prelationNode1)
    return nodeList, 43

def new333(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttrelationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pparamtypingNode5 = nodeArrayList3[0]
    prelationNode1 = ARelation(ttrelationNode2,pidNode3,None,pparamtypingNode5,None,None)
    nodeList.append(prelationNode1)
    return nodeList, 43

def new334(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttrelationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    parityNode4 = nodeArrayList3[0]
    pparamtypingNode5 = nodeArrayList4[0]
    prelationNode1 = ARelation(ttrelationNode2,pidNode3,parityNode4,pparamtypingNode5,None,None)
    nodeList.append(prelationNode1)
    return nodeList, 43

def new335(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttrelationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psuperrelationNode6 = nodeArrayList3[0]
    prelationNode1 = ARelation(ttrelationNode2,pidNode3,None,None,psuperrelationNode6,None)
    nodeList.append(prelationNode1)
    return nodeList, 43

def new336(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttrelationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    parityNode4 = nodeArrayList3[0]
    psuperrelationNode6 = nodeArrayList4[0]
    prelationNode1 = ARelation(ttrelationNode2,pidNode3,parityNode4,None,psuperrelationNode6,None)
    nodeList.append(prelationNode1)
    return nodeList, 43

def new337(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttrelationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pparamtypingNode5 = nodeArrayList3[0]
    psuperrelationNode6 = nodeArrayList4[0]
    prelationNode1 = ARelation(ttrelationNode2,pidNode3,None,pparamtypingNode5,psuperrelationNode6,None)
    nodeList.append(prelationNode1)
    return nodeList, 43

def new338(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttrelationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    parityNode4 = nodeArrayList3[0]
    pparamtypingNode5 = nodeArrayList4[0]
    psuperrelationNode6 = nodeArrayList5[0]
    prelationNode1 = ARelation(ttrelationNode2,pidNode3,parityNode4,pparamtypingNode5,psuperrelationNode6,None)
    nodeList.append(prelationNode1)
    return nodeList, 43

def new339(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttrelationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pnfpNode7 = nodeArrayList3[0]
    prelationNode1 = ARelation(ttrelationNode2,pidNode3,None,None,None,pnfpNode7)
    nodeList.append(prelationNode1)
    return nodeList, 43

def new340(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttrelationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    parityNode4 = nodeArrayList3[0]
    pnfpNode7 = nodeArrayList4[0]
    prelationNode1 = ARelation(ttrelationNode2,pidNode3,parityNode4,None,None,pnfpNode7)
    nodeList.append(prelationNode1)
    return nodeList, 43

def new341(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttrelationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pparamtypingNode5 = nodeArrayList3[0]
    pnfpNode7 = nodeArrayList4[0]
    prelationNode1 = ARelation(ttrelationNode2,pidNode3,None,pparamtypingNode5,None,pnfpNode7)
    nodeList.append(prelationNode1)
    return nodeList, 43

def new342(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttrelationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    parityNode4 = nodeArrayList3[0]
    pparamtypingNode5 = nodeArrayList4[0]
    pnfpNode7 = nodeArrayList5[0]
    prelationNode1 = ARelation(ttrelationNode2,pidNode3,parityNode4,pparamtypingNode5,None,pnfpNode7)
    nodeList.append(prelationNode1)
    return nodeList, 43

def new343(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttrelationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    psuperrelationNode6 = nodeArrayList3[0]
    pnfpNode7 = nodeArrayList4[0]
    prelationNode1 = ARelation(ttrelationNode2,pidNode3,None,None,psuperrelationNode6,pnfpNode7)
    nodeList.append(prelationNode1)
    return nodeList, 43

def new344(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttrelationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    parityNode4 = nodeArrayList3[0]
    psuperrelationNode6 = nodeArrayList4[0]
    pnfpNode7 = nodeArrayList5[0]
    prelationNode1 = ARelation(ttrelationNode2,pidNode3,parityNode4,None,psuperrelationNode6,pnfpNode7)
    nodeList.append(prelationNode1)
    return nodeList, 43

def new345(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttrelationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pparamtypingNode5 = nodeArrayList3[0]
    psuperrelationNode6 = nodeArrayList4[0]
    pnfpNode7 = nodeArrayList5[0]
    prelationNode1 = ARelation(ttrelationNode2,pidNode3,None,pparamtypingNode5,psuperrelationNode6,pnfpNode7)
    nodeList.append(prelationNode1)
    return nodeList, 43

def new346(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttrelationNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    parityNode4 = nodeArrayList3[0]
    pparamtypingNode5 = nodeArrayList4[0]
    psuperrelationNode6 = nodeArrayList5[0]
    pnfpNode7 = nodeArrayList6[0]
    prelationNode1 = ARelation(ttrelationNode2,pidNode3,parityNode4,pparamtypingNode5,psuperrelationNode6,pnfpNode7)
    nodeList.append(prelationNode1)
    return nodeList, 43

def new347(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    patttypeNode2 = nodeArrayList1[0]
    pidlistNode3 = nodeArrayList2[0]
    pparamtypeNode1 = AParamtype(patttypeNode2,pidlistNode3)
    nodeList.append(pparamtypeNode1)
    return nodeList, 44

def new348(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    tlparNode2 = nodeArrayList1[0]
    pparamtypeNode3 = nodeArrayList2[0]
    trparNode5 = nodeArrayList3[0]
    pparamtypingNode1 = AParamtyping(tlparNode2,pparamtypeNode3,listNode4,trparNode5)
    nodeList.append(pparamtypingNode1)
    return nodeList, 45

def new349(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    tlparNode2 = nodeArrayList1[0]
    pparamtypeNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    trparNode6 = nodeArrayList4[0]
    pparamtypingNode1 = AParamtyping(tlparNode2,pparamtypeNode3,listNode5,trparNode6)
    nodeList.append(pparamtypingNode1)
    return nodeList, 45

def new350(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tcommaNode2 = nodeArrayList1[0]
    pparamtypeNode3 = nodeArrayList2[0]
    pmoreparamtypeNode1 = AMoreparamtype(tcommaNode2,pparamtypeNode3)
    nodeList.append(pmoreparamtypeNode1)
    return nodeList, 46

def new351(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttsubrelationNode2 = nodeArrayList1[0]
    pidlistNode3 = nodeArrayList2[0]
    psuperrelationNode1 = ASuperrelation(ttsubrelationNode2,pidlistNode3)
    nodeList.append(psuperrelationNode1)
    return nodeList, 47

def new352(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tdivopNode2 = nodeArrayList1[0]
    tposintegerNode3 = nodeArrayList2[0]
    parityNode1 = AArity(tdivopNode2,tposintegerNode3)
    nodeList.append(parityNode1)
    return nodeList, 48

def new353(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    ttrelationinstanceNode2 = nodeArrayList1[0]
    pidNode4 = nodeArrayList2[0]
    tlparNode5 = nodeArrayList3[0]
    pvalueNode6 = nodeArrayList4[0]
    trparNode8 = nodeArrayList5[0]
    prelationinstanceNode1 = ARelationinstance(ttrelationinstanceNode2,None,pidNode4,tlparNode5,pvalueNode6,listNode7,trparNode8,None)
    nodeList.append(prelationinstanceNode1)
    return nodeList, 49

def new354(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    ttrelationinstanceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pidNode4 = nodeArrayList3[0]
    tlparNode5 = nodeArrayList4[0]
    pvalueNode6 = nodeArrayList5[0]
    trparNode8 = nodeArrayList6[0]
    prelationinstanceNode1 = ARelationinstance(ttrelationinstanceNode2,pidNode3,pidNode4,tlparNode5,pvalueNode6,listNode7,trparNode8,None)
    nodeList.append(prelationinstanceNode1)
    return nodeList, 49

def new355(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode8 = list()
    ttrelationinstanceNode2 = nodeArrayList1[0]
    pidNode4 = nodeArrayList2[0]
    tlparNode5 = nodeArrayList3[0]
    pvalueNode6 = nodeArrayList4[0]
    listNode7 = nodeArrayList5[0]
    if (listNode7 != None):
        listNode8.extend(listNode7)
    trparNode9 = nodeArrayList6[0]
    prelationinstanceNode1 = ARelationinstance(ttrelationinstanceNode2,None,pidNode4,tlparNode5,pvalueNode6,listNode8,trparNode9,None)
    nodeList.append(prelationinstanceNode1)
    return nodeList, 49

def new356(self):
    nodeList = list()
    nodeArrayList7 = self.pop()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode8 = list()
    ttrelationinstanceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pidNode4 = nodeArrayList3[0]
    tlparNode5 = nodeArrayList4[0]
    pvalueNode6 = nodeArrayList5[0]
    listNode7 = nodeArrayList6[0]
    if (listNode7 != None):
        listNode8.extend(listNode7)
    trparNode9 = nodeArrayList7[0]
    prelationinstanceNode1 = ARelationinstance(ttrelationinstanceNode2,pidNode3,pidNode4,tlparNode5,pvalueNode6,listNode8,trparNode9,None)
    nodeList.append(prelationinstanceNode1)
    return nodeList, 49

def new357(self):
    nodeList = list()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    ttrelationinstanceNode2 = nodeArrayList1[0]
    pidNode4 = nodeArrayList2[0]
    tlparNode5 = nodeArrayList3[0]
    pvalueNode6 = nodeArrayList4[0]
    trparNode8 = nodeArrayList5[0]
    pnfpNode9 = nodeArrayList6[0]
    prelationinstanceNode1 = ARelationinstance(ttrelationinstanceNode2,None,pidNode4,tlparNode5,pvalueNode6,listNode7,trparNode8,pnfpNode9)
    nodeList.append(prelationinstanceNode1)
    return nodeList, 49

def new358(self):
    nodeList = list()
    nodeArrayList7 = self.pop()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode7 = list()
    ttrelationinstanceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pidNode4 = nodeArrayList3[0]
    tlparNode5 = nodeArrayList4[0]
    pvalueNode6 = nodeArrayList5[0]
    trparNode8 = nodeArrayList6[0]
    pnfpNode9 = nodeArrayList7[0]
    prelationinstanceNode1 = ARelationinstance(ttrelationinstanceNode2,pidNode3,pidNode4,tlparNode5,pvalueNode6,listNode7,trparNode8,pnfpNode9)
    nodeList.append(prelationinstanceNode1)
    return nodeList, 49

def new359(self):
    nodeList = list()
    nodeArrayList7 = self.pop()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode8 = list()
    ttrelationinstanceNode2 = nodeArrayList1[0]
    pidNode4 = nodeArrayList2[0]
    tlparNode5 = nodeArrayList3[0]
    pvalueNode6 = nodeArrayList4[0]
    listNode7 = nodeArrayList5[0]
    if (listNode7 != None):
        listNode8.extend(listNode7)
    trparNode9 = nodeArrayList6[0]
    pnfpNode10 = nodeArrayList7[0]
    prelationinstanceNode1 = ARelationinstance(ttrelationinstanceNode2,None,pidNode4,tlparNode5,pvalueNode6,listNode8,trparNode9,pnfpNode10)
    nodeList.append(prelationinstanceNode1)
    return nodeList, 49

def new360(self):
    nodeList = list()
    nodeArrayList8 = self.pop()
    nodeArrayList7 = self.pop()
    nodeArrayList6 = self.pop()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode8 = list()
    ttrelationinstanceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pidNode4 = nodeArrayList3[0]
    tlparNode5 = nodeArrayList4[0]
    pvalueNode6 = nodeArrayList5[0]
    listNode7 = nodeArrayList6[0]
    if (listNode7 != None):
        listNode8.extend(listNode7)
    trparNode9 = nodeArrayList7[0]
    pnfpNode10 = nodeArrayList8[0]
    prelationinstanceNode1 = ARelationinstance(ttrelationinstanceNode2,pidNode3,pidNode4,tlparNode5,pvalueNode6,listNode8,trparNode9,pnfpNode10)
    nodeList.append(prelationinstanceNode1)
    return nodeList, 49

def new361(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttaxiomNode2 = nodeArrayList1[0]
    paxiomdefinitionNode3 = nodeArrayList2[0]
    paxiomNode1 = AAxiom(ttaxiomNode2,paxiomdefinitionNode3)
    nodeList.append(paxiomNode1)
    return nodeList, 50

def new362(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pidNode2 = nodeArrayList1[0]
    paxiomdefinitionNode1 = AUseAxiomAxiomdefinition(pidNode2)
    nodeList.append(paxiomdefinitionNode1)
    return nodeList, 51

def new363(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pnfpNode3 = nodeArrayList1[0]
    paxiomdefinitionNode1 = ANfpAxiomAxiomdefinition(None,pnfpNode3)
    nodeList.append(paxiomdefinitionNode1)
    return nodeList, 51

def new364(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pidNode2 = nodeArrayList1[0]
    pnfpNode3 = nodeArrayList2[0]
    paxiomdefinitionNode1 = ANfpAxiomAxiomdefinition(pidNode2,pnfpNode3)
    nodeList.append(paxiomdefinitionNode1)
    return nodeList, 51

def new365(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    plogdefinitionNode4 = nodeArrayList1[0]
    paxiomdefinitionNode1 = ADefinedAxiomAxiomdefinition(None,None,plogdefinitionNode4)
    nodeList.append(paxiomdefinitionNode1)
    return nodeList, 51

def new366(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pidNode2 = nodeArrayList1[0]
    plogdefinitionNode4 = nodeArrayList2[0]
    paxiomdefinitionNode1 = ADefinedAxiomAxiomdefinition(pidNode2,None,plogdefinitionNode4)
    nodeList.append(paxiomdefinitionNode1)
    return nodeList, 51

def new367(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pnfpNode3 = nodeArrayList1[0]
    plogdefinitionNode4 = nodeArrayList2[0]
    paxiomdefinitionNode1 = ADefinedAxiomAxiomdefinition(None,pnfpNode3,plogdefinitionNode4)
    nodeList.append(paxiomdefinitionNode1)
    return nodeList, 51

def new368(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pidNode2 = nodeArrayList1[0]
    pnfpNode3 = nodeArrayList2[0]
    plogdefinitionNode4 = nodeArrayList3[0]
    paxiomdefinitionNode1 = ADefinedAxiomAxiomdefinition(pidNode2,pnfpNode3,plogdefinitionNode4)
    nodeList.append(paxiomdefinitionNode1)
    return nodeList, 51

def new369(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    ttdefinedbyNode2 = nodeArrayList1[0]
    listNode3 = nodeArrayList2[0]
    if (listNode3 != None):
        listNode4.extend(listNode3)
    plogdefinitionNode1 = ALogDefinition(ttdefinedbyNode2,listNode4)
    nodeList.append(plogdefinitionNode1)
    return nodeList, 52

def new370(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pexprNode2 = nodeArrayList1[0]
    ttimpliedbylpNode3 = nodeArrayList2[0]
    pexprNode4 = nodeArrayList3[0]
    tendpointNode5 = nodeArrayList4[0]
    plogexprNode1 = ALpRuleLogExpr(pexprNode2,ttimpliedbylpNode3,pexprNode4,tendpointNode5)
    nodeList.append(plogexprNode1)
    return nodeList, 53

def new371(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttconstraintNode2 = nodeArrayList1[0]
    pexprNode3 = nodeArrayList2[0]
    tendpointNode4 = nodeArrayList3[0]
    plogexprNode1 = AConstraintLogExpr(ttconstraintNode2,pexprNode3,tendpointNode4)
    nodeList.append(plogexprNode1)
    return nodeList, 53

def new372(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pexprNode2 = nodeArrayList1[0]
    tendpointNode3 = nodeArrayList2[0]
    plogexprNode1 = AOtherExpressionLogExpr(pexprNode2,tendpointNode3)
    nodeList.append(plogexprNode1)
    return nodeList, 53

def new373(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pexprNode2 = nodeArrayList1[0]
    pimplyopNode3 = nodeArrayList2[0]
    pdisjunctionNode4 = nodeArrayList3[0]
    pexprNode1 = AImplicationExpr(pexprNode2,pimplyopNode3,pdisjunctionNode4)
    nodeList.append(pexprNode1)
    return nodeList, 54

def new374(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pdisjunctionNode2 = nodeArrayList1[0]
    pexprNode1 = ADisjunctionExpr(pdisjunctionNode2)
    nodeList.append(pexprNode1)
    return nodeList, 54

def new375(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pconjunctionNode2 = nodeArrayList1[0]
    pdisjunctionNode1 = AConjunctionDisjunction(pconjunctionNode2)
    nodeList.append(pdisjunctionNode1)
    return nodeList, 55

def new376(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pdisjunctionNode2 = nodeArrayList1[0]
    ttorNode3 = nodeArrayList2[0]
    pconjunctionNode4 = nodeArrayList3[0]
    pdisjunctionNode1 = ADisjunction(pdisjunctionNode2,ttorNode3,pconjunctionNode4)
    nodeList.append(pdisjunctionNode1)
    return nodeList, 55

def new377(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    psubexprNode2 = nodeArrayList1[0]
    pconjunctionNode1 = ASubexprConjunction(psubexprNode2)
    nodeList.append(pconjunctionNode1)
    return nodeList, 56

def new378(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pconjunctionNode2 = nodeArrayList1[0]
    ttandNode3 = nodeArrayList2[0]
    psubexprNode4 = nodeArrayList3[0]
    pconjunctionNode1 = AConjunction(pconjunctionNode2,ttandNode3,psubexprNode4)
    nodeList.append(pconjunctionNode1)
    return nodeList, 56

def new379(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ttnotNode2 = nodeArrayList1[0]
    psubexprNode3 = nodeArrayList2[0]
    psubexprNode1 = ANegatedSubexpr(ttnotNode2,psubexprNode3)
    nodeList.append(psubexprNode1)
    return nodeList, 57

def new380(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    psimpleNode2 = nodeArrayList1[0]
    psubexprNode1 = ASimpleSubexpr(psimpleNode2)
    nodeList.append(psubexprNode1)
    return nodeList, 57

def new381(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tlparNode2 = nodeArrayList1[0]
    pexprNode3 = nodeArrayList2[0]
    trparNode4 = nodeArrayList3[0]
    psubexprNode1 = AComplexSubexpr(tlparNode2,pexprNode3,trparNode4)
    nodeList.append(psubexprNode1)
    return nodeList, 57

def new382(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pquantifiedNode2 = nodeArrayList1[0]
    psubexprNode1 = AQuantifiedSubexpr(pquantifiedNode2)
    nodeList.append(psubexprNode1)
    return nodeList, 57

def new383(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pquantifierkeyNode2 = nodeArrayList1[0]
    pvariablelistNode3 = nodeArrayList2[0]
    tlparNode4 = nodeArrayList3[0]
    pexprNode5 = nodeArrayList4[0]
    trparNode6 = nodeArrayList5[0]
    pquantifiedNode1 = AQuantified(pquantifierkeyNode2,pvariablelistNode3,tlparNode4,pexprNode5,trparNode6)
    nodeList.append(pquantifiedNode1)
    return nodeList, 58

def new384(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pmoleculeNode2 = nodeArrayList1[0]
    psimpleNode1 = AMoleculeSimple(pmoleculeNode2)
    nodeList.append(psimpleNode1)
    return nodeList, 59

def new385(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pcomparisonNode2 = nodeArrayList1[0]
    psimpleNode1 = AComparisonSimple(pcomparisonNode2)
    nodeList.append(psimpleNode1)
    return nodeList, 59

def new386(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ptermNode2 = nodeArrayList1[0]
    psimpleNode1 = AAtomSimple(ptermNode2)
    nodeList.append(psimpleNode1)
    return nodeList, 59

def new387(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ptermNode2 = nodeArrayList1[0]
    pcptopNode4 = nodeArrayList2[0]
    ptermlistNode5 = nodeArrayList3[0]
    pmoleculeNode1 = AConceptMoleculePreferredMolecule(ptermNode2,None,pcptopNode4,ptermlistNode5)
    nodeList.append(pmoleculeNode1)
    return nodeList, 60

def new388(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ptermNode2 = nodeArrayList1[0]
    pattrspecificationNode3 = nodeArrayList2[0]
    pcptopNode4 = nodeArrayList3[0]
    ptermlistNode5 = nodeArrayList4[0]
    pmoleculeNode1 = AConceptMoleculePreferredMolecule(ptermNode2,pattrspecificationNode3,pcptopNode4,ptermlistNode5)
    nodeList.append(pmoleculeNode1)
    return nodeList, 60

def new389(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ptermNode2 = nodeArrayList1[0]
    pcptopNode3 = nodeArrayList2[0]
    ptermlistNode4 = nodeArrayList3[0]
    pattrspecificationNode5 = nodeArrayList4[0]
    pmoleculeNode1 = AConceptMoleculeNonpreferredMolecule(ptermNode2,pcptopNode3,ptermlistNode4,pattrspecificationNode5)
    nodeList.append(pmoleculeNode1)
    return nodeList, 60

def new390(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ptermNode2 = nodeArrayList1[0]
    pattrspecificationNode3 = nodeArrayList2[0]
    pmoleculeNode1 = AAttributeMoleculeMolecule(ptermNode2,pattrspecificationNode3)
    nodeList.append(pmoleculeNode1)
    return nodeList, 60

def new391(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tlbracketNode2 = nodeArrayList1[0]
    pattrrellistNode3 = nodeArrayList2[0]
    trbracketNode4 = nodeArrayList3[0]
    pattrspecificationNode1 = AAttrSpecification(tlbracketNode2,pattrrellistNode3,trbracketNode4)
    nodeList.append(pattrspecificationNode1)
    return nodeList, 61

def new392(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pattrrelationNode2 = nodeArrayList1[0]
    pattrrellistNode1 = AAttrRelationAttrRelList(pattrrelationNode2)
    nodeList.append(pattrrellistNode1)
    return nodeList, 62

def new393(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pattrrellistNode2 = nodeArrayList1[0]
    tcommaNode3 = nodeArrayList2[0]
    pattrrelationNode4 = nodeArrayList3[0]
    pattrrellistNode1 = AAttrRelList(pattrrellistNode2,tcommaNode3,pattrrelationNode4)
    nodeList.append(pattrrellistNode1)
    return nodeList, 62

def new394(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ptermNode2 = nodeArrayList1[0]
    pattrdefopNode3 = nodeArrayList2[0]
    ptermlistNode4 = nodeArrayList3[0]
    pattrrelationNode1 = AAttrDefAttrRelation(ptermNode2,pattrdefopNode3,ptermlistNode4)
    nodeList.append(pattrrelationNode1)
    return nodeList, 63

def new395(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ptermNode2 = nodeArrayList1[0]
    tthasvalueNode3 = nodeArrayList2[0]
    ptermlistNode4 = nodeArrayList3[0]
    pattrrelationNode1 = AAttrValAttrRelation(ptermNode2,tthasvalueNode3,ptermlistNode4)
    nodeList.append(pattrrelationNode1)
    return nodeList, 63

def new396(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ptermNode2 = nodeArrayList1[0]
    pcompopNode3 = nodeArrayList2[0]
    ptermNode4 = nodeArrayList3[0]
    pcomparisonNode1 = AComparison(ptermNode2,pcompopNode3,ptermNode4)
    nodeList.append(pcomparisonNode1)
    return nodeList, 64

def new397(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pidNode2 = nodeArrayList1[0]
    tlparNode3 = nodeArrayList2[0]
    trparNode5 = nodeArrayList3[0]
    pfunctionsymbolNode1 = AParametrizedFunctionsymbol(pidNode2,tlparNode3,None,trparNode5)
    nodeList.append(pfunctionsymbolNode1)
    return nodeList, 65

def new398(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pidNode2 = nodeArrayList1[0]
    tlparNode3 = nodeArrayList2[0]
    ptermsNode4 = nodeArrayList3[0]
    trparNode5 = nodeArrayList4[0]
    pfunctionsymbolNode1 = AParametrizedFunctionsymbol(pidNode2,tlparNode3,ptermsNode4,trparNode5)
    nodeList.append(pfunctionsymbolNode1)
    return nodeList, 65

def new399(self):
    nodeList = list()
    nodeArrayList5 = self.pop()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tlparNode2 = nodeArrayList1[0]
    pmathexprNode3 = nodeArrayList2[0]
    pmathopNode4 = nodeArrayList3[0]
    ptermNode5 = nodeArrayList4[0]
    trparNode6 = nodeArrayList5[0]
    pfunctionsymbolNode1 = AMathFunctionsymbol(tlparNode2,pmathexprNode3,pmathopNode4,ptermNode5,trparNode6)
    nodeList.append(pfunctionsymbolNode1)
    return nodeList, 65

def new400(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pmathexprNode2 = nodeArrayList1[0]
    pmathopNode3 = nodeArrayList2[0]
    ptermNode4 = nodeArrayList3[0]
    pmathexprNode1 = ASubMathexpr(pmathexprNode2,pmathopNode3,ptermNode4)
    nodeList.append(pmathexprNode1)
    return nodeList, 66

def new401(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ptermNode2 = nodeArrayList1[0]
    pmathexprNode1 = AMathexpr(ptermNode2)
    nodeList.append(pmathexprNode1)
    return nodeList, 66

def new402(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tgtNode2 = nodeArrayList1[0]
    pcompopNode1 = AGtCompOp(tgtNode2)
    nodeList.append(pcompopNode1)
    return nodeList, 67

def new403(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tltNode2 = nodeArrayList1[0]
    pcompopNode1 = ALtCompOp(tltNode2)
    nodeList.append(pcompopNode1)
    return nodeList, 67

def new404(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tgteNode2 = nodeArrayList1[0]
    pcompopNode1 = AGteCompOp(tgteNode2)
    nodeList.append(pcompopNode1)
    return nodeList, 67

def new405(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tlteNode2 = nodeArrayList1[0]
    pcompopNode1 = ALteCompOp(tlteNode2)
    nodeList.append(pcompopNode1)
    return nodeList, 67

def new406(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tequalNode2 = nodeArrayList1[0]
    pcompopNode1 = AEqualCompOp(tequalNode2)
    nodeList.append(pcompopNode1)
    return nodeList, 67

def new407(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tunequalNode2 = nodeArrayList1[0]
    pcompopNode1 = AUnequalCompOp(tunequalNode2)
    nodeList.append(pcompopNode1)
    return nodeList, 67

def new408(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ttmemberofNode2 = nodeArrayList1[0]
    pcptopNode1 = AMemberofCptOp(ttmemberofNode2)
    nodeList.append(pcptopNode1)
    return nodeList, 68

def new409(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ttsubconceptNode2 = nodeArrayList1[0]
    pcptopNode1 = ASubconceptofCptOp(ttsubconceptNode2)
    nodeList.append(pcptopNode1)
    return nodeList, 68

def new410(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ttforallNode2 = nodeArrayList1[0]
    pquantifierkeyNode1 = AForallQuantifierKey(ttforallNode2)
    nodeList.append(pquantifierkeyNode1)
    return nodeList, 69

def new411(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ttexistsNode2 = nodeArrayList1[0]
    pquantifierkeyNode1 = AExistsQuantifierKey(ttexistsNode2)
    nodeList.append(pquantifierkeyNode1)
    return nodeList, 69

def new412(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ttoftypeNode2 = nodeArrayList1[0]
    pattrdefopNode1 = AOftypeAttrDefOp(ttoftypeNode2)
    nodeList.append(pattrdefopNode1)
    return nodeList, 70

def new413(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ttimpliestypeNode2 = nodeArrayList1[0]
    pattrdefopNode1 = AImpliestypeAttrDefOp(ttimpliestypeNode2)
    nodeList.append(pattrdefopNode1)
    return nodeList, 70

def new414(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ttimpliesNode2 = nodeArrayList1[0]
    pimplyopNode1 = AImpliesImplyOp(ttimpliesNode2)
    nodeList.append(pimplyopNode1)
    return nodeList, 71

def new415(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ttimpliedbyNode2 = nodeArrayList1[0]
    pimplyopNode1 = AImpliedbyImplyOp(ttimpliedbyNode2)
    nodeList.append(pimplyopNode1)
    return nodeList, 71

def new416(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ttequivalentNode2 = nodeArrayList1[0]
    pimplyopNode1 = AEquivalentImplyOp(ttequivalentNode2)
    nodeList.append(pimplyopNode1)
    return nodeList, 71

def new417(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    taddopNode2 = nodeArrayList1[0]
    pmathopNode1 = AAddMathOp(taddopNode2)
    nodeList.append(pmathopNode1)
    return nodeList, 72

def new418(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tsubopNode2 = nodeArrayList1[0]
    pmathopNode1 = ASubMathOp(tsubopNode2)
    nodeList.append(pmathopNode1)
    return nodeList, 72

def new419(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tstarNode2 = nodeArrayList1[0]
    pmathopNode1 = AMulMathOp(tstarNode2)
    nodeList.append(pmathopNode1)
    return nodeList, 72

def new420(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tdivopNode2 = nodeArrayList1[0]
    pmathopNode1 = ADivMathOp(tdivopNode2)
    nodeList.append(pmathopNode1)
    return nodeList, 72

def new421(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tnameNode2 = nodeArrayList1[0]
    thashNode3 = nodeArrayList2[0]
    pprefixNode1 = APrefix(tnameNode2,thashNode3)
    nodeList.append(pprefixNode1)
    return nodeList, 73

def new422(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tnameNode3 = nodeArrayList1[0]
    psqnameNode1 = AAnySqname(None,tnameNode3)
    nodeList.append(psqnameNode1)
    return nodeList, 74

def new423(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pprefixNode2 = nodeArrayList1[0]
    tnameNode3 = nodeArrayList2[0]
    psqnameNode1 = AAnySqname(pprefixNode2,tnameNode3)
    nodeList.append(psqnameNode1)
    return nodeList, 74

def new424(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pprefixNode2 = nodeArrayList1[0]
    ttrelationNode3 = nodeArrayList2[0]
    psqnameNode1 = ARelationSqname(pprefixNode2,ttrelationNode3)
    nodeList.append(psqnameNode1)
    return nodeList, 74

def new425(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pprefixNode2 = nodeArrayList1[0]
    ttsourceNode3 = nodeArrayList2[0]
    psqnameNode1 = ASourceSqname(pprefixNode2,ttsourceNode3)
    nodeList.append(psqnameNode1)
    return nodeList, 74

def new426(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tfulliriNode2 = nodeArrayList1[0]
    piriNode1 = AIriIri(tfulliriNode2)
    nodeList.append(piriNode1)
    return nodeList, 75

def new427(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    psqnameNode2 = nodeArrayList1[0]
    piriNode1 = ASqnameIri(psqnameNode2)
    nodeList.append(piriNode1)
    return nodeList, 75

def new428(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    piriNode2 = nodeArrayList1[0]
    pidNode1 = AIriId(piriNode2)
    nodeList.append(pidNode1)
    return nodeList, 76

def new429(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tanonymousNode2 = nodeArrayList1[0]
    pidNode1 = AAnonymousId(tanonymousNode2)
    nodeList.append(pidNode1)
    return nodeList, 76

def new430(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ttunivtrueNode2 = nodeArrayList1[0]
    pidNode1 = AUniversalTruthId(ttunivtrueNode2)
    nodeList.append(pidNode1)
    return nodeList, 76

def new431(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ttunivfalseNode2 = nodeArrayList1[0]
    pidNode1 = AUniversalFalsehoodId(ttunivfalseNode2)
    nodeList.append(pidNode1)
    return nodeList, 76

def new432(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pidNode2 = nodeArrayList1[0]
    pidlistNode1 = AIdIdlist(pidNode2)
    nodeList.append(pidlistNode1)
    return nodeList, 77

def new433(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    tlbraceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    trbraceNode5 = nodeArrayList3[0]
    pidlistNode1 = AIdlistIdlist(tlbraceNode2,pidNode3,listNode4,trbraceNode5)
    nodeList.append(pidlistNode1)
    return nodeList, 77

def new434(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    tlbraceNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    trbraceNode6 = nodeArrayList4[0]
    pidlistNode1 = AIdlistIdlist(tlbraceNode2,pidNode3,listNode5,trbraceNode6)
    nodeList.append(pidlistNode1)
    return nodeList, 77

def new435(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tcommaNode2 = nodeArrayList1[0]
    pidNode3 = nodeArrayList2[0]
    pmoreidsNode1 = AMoreids(tcommaNode2,pidNode3)
    nodeList.append(pmoreidsNode1)
    return nodeList, 78

def new436(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pfunctionsymbolNode2 = nodeArrayList1[0]
    pvalueNode1 = ADatatypeValue(pfunctionsymbolNode2)
    nodeList.append(pvalueNode1)
    return nodeList, 79

def new437(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pidNode2 = nodeArrayList1[0]
    pvalueNode1 = ATermValue(pidNode2)
    nodeList.append(pvalueNode1)
    return nodeList, 79

def new438(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pnumberNode2 = nodeArrayList1[0]
    pvalueNode1 = ANumericValue(pnumberNode2)
    nodeList.append(pvalueNode1)
    return nodeList, 79

def new439(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tstringNode2 = nodeArrayList1[0]
    pvalueNode1 = AStringValue(tstringNode2)
    nodeList.append(pvalueNode1)
    return nodeList, 79

def new440(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pvalueNode2 = nodeArrayList1[0]
    pvaluelistNode1 = ATermValuelist(pvalueNode2)
    nodeList.append(pvaluelistNode1)
    return nodeList, 80

def new441(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode4 = list()
    tlbraceNode2 = nodeArrayList1[0]
    pvalueNode3 = nodeArrayList2[0]
    trbraceNode5 = nodeArrayList3[0]
    pvaluelistNode1 = AValuelistValuelist(tlbraceNode2,pvalueNode3,listNode4,trbraceNode5)
    nodeList.append(pvaluelistNode1)
    return nodeList, 80

def new442(self):
    nodeList = list()
    nodeArrayList4 = self.pop()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode5 = list()
    tlbraceNode2 = nodeArrayList1[0]
    pvalueNode3 = nodeArrayList2[0]
    listNode4 = nodeArrayList3[0]
    if (listNode4 != None):
        listNode5.extend(listNode4)
    trbraceNode6 = nodeArrayList4[0]
    pvaluelistNode1 = AValuelistValuelist(tlbraceNode2,pvalueNode3,listNode5,trbraceNode6)
    nodeList.append(pvaluelistNode1)
    return nodeList, 80

def new443(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tcommaNode2 = nodeArrayList1[0]
    pvalueNode3 = nodeArrayList2[0]
    pmorevaluesNode1 = AMorevalues(tcommaNode2,pvalueNode3)
    nodeList.append(pmorevaluesNode1)
    return nodeList, 81

def new444(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pvalueNode2 = nodeArrayList1[0]
    ptermNode1 = ADataTerm(pvalueNode2)
    nodeList.append(ptermNode1)
    return nodeList, 82

def new445(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tvariableNode2 = nodeArrayList1[0]
    ptermNode1 = AVarTerm(tvariableNode2)
    nodeList.append(ptermNode1)
    return nodeList, 82

def new446(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tnbanonymousNode2 = nodeArrayList1[0]
    ptermNode1 = ANbAnonymousTerm(tnbanonymousNode2)
    nodeList.append(ptermNode1)
    return nodeList, 82

def new447(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ptermNode2 = nodeArrayList1[0]
    ptermsNode1 = ATermTerms(ptermNode2)
    nodeList.append(ptermsNode1)
    return nodeList, 83

def new448(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    ptermsNode2 = nodeArrayList1[0]
    tcommaNode3 = nodeArrayList2[0]
    ptermNode4 = nodeArrayList3[0]
    ptermsNode1 = ATerms(ptermsNode2,tcommaNode3,ptermNode4)
    nodeList.append(ptermsNode1)
    return nodeList, 83

def new449(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    ptermNode2 = nodeArrayList1[0]
    ptermlistNode1 = ATermTermlist(ptermNode2)
    nodeList.append(ptermlistNode1)
    return nodeList, 84

def new450(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tlbraceNode2 = nodeArrayList1[0]
    ptermsNode3 = nodeArrayList2[0]
    trbraceNode4 = nodeArrayList3[0]
    ptermlistNode1 = ATermlist(tlbraceNode2,ptermsNode3,trbraceNode4)
    nodeList.append(ptermlistNode1)
    return nodeList, 84

def new451(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tvariableNode2 = nodeArrayList1[0]
    pvariablesNode1 = AVariableVariables(tvariableNode2)
    nodeList.append(pvariablesNode1)
    return nodeList, 85

def new452(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    pvariablesNode2 = nodeArrayList1[0]
    tcommaNode3 = nodeArrayList2[0]
    tvariableNode4 = nodeArrayList3[0]
    pvariablesNode1 = AVariables(pvariablesNode2,tcommaNode3,tvariableNode4)
    nodeList.append(pvariablesNode1)
    return nodeList, 85

def new453(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tvariableNode2 = nodeArrayList1[0]
    pvariablelistNode1 = AVariableVariablelist(tvariableNode2)
    nodeList.append(pvariablelistNode1)
    return nodeList, 86

def new454(self):
    nodeList = list()
    nodeArrayList3 = self.pop()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tlbraceNode2 = nodeArrayList1[0]
    pvariablesNode3 = nodeArrayList2[0]
    trbraceNode4 = nodeArrayList3[0]
    pvariablelistNode1 = AVariableListVariablelist(tlbraceNode2,pvariablesNode3,trbraceNode4)
    nodeList.append(pvariablelistNode1)
    return nodeList, 86

def new455(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tposintegerNode3 = nodeArrayList1[0]
    pintegerNode1 = AInteger(None,tposintegerNode3)
    nodeList.append(pintegerNode1)
    return nodeList, 87

def new456(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tsubopNode2 = nodeArrayList1[0]
    tposintegerNode3 = nodeArrayList2[0]
    pintegerNode1 = AInteger(tsubopNode2,tposintegerNode3)
    nodeList.append(pintegerNode1)
    return nodeList, 87

def new457(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    tposdecimalNode3 = nodeArrayList1[0]
    pdecimalNode1 = ADecimal(None,tposdecimalNode3)
    nodeList.append(pdecimalNode1)
    return nodeList, 88

def new458(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    tsubopNode2 = nodeArrayList1[0]
    tposdecimalNode3 = nodeArrayList2[0]
    pdecimalNode1 = ADecimal(tsubopNode2,tposdecimalNode3)
    nodeList.append(pdecimalNode1)
    return nodeList, 88

def new459(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pintegerNode2 = nodeArrayList1[0]
    pnumberNode1 = AIntegerNumber(pintegerNode2)
    nodeList.append(pnumberNode1)
    return nodeList, 89

def new460(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    pdecimalNode2 = nodeArrayList1[0]
    pnumberNode1 = ADecimalNumber(pdecimalNode2)
    nodeList.append(pnumberNode1)
    return nodeList, 89

def new461(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    pdefinitionNode1 = nodeArrayList1[0]
    if (pdefinitionNode1 != None):
        listNode2.append(pdefinitionNode1)
    nodeList.append(listNode2)
    return nodeList, 90

def new462(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    pdefinitionNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (pdefinitionNode2 != None):
        listNode3.append(pdefinitionNode2)
    nodeList.append(listNode3)
    return nodeList, 90

def new463(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    pheaderNode1 = nodeArrayList1[0]
    if (pheaderNode1 != None):
        listNode2.append(pheaderNode1)
    nodeList.append(listNode2)
    return nodeList, 91

def new464(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    pheaderNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (pheaderNode2 != None):
        listNode3.append(pheaderNode2)
    nodeList.append(listNode3)
    return nodeList, 91

def new465(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    pprepostassoreffNode1 = nodeArrayList1[0]
    if (pprepostassoreffNode1 != None):
        listNode2.append(pprepostassoreffNode1)
    nodeList.append(listNode2)
    return nodeList, 92

def new466(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    pprepostassoreffNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (pprepostassoreffNode2 != None):
        listNode3.append(pprepostassoreffNode2)
    nodeList.append(listNode3)
    return nodeList, 92

def new467(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    pinterfacesNode1 = nodeArrayList1[0]
    if (pinterfacesNode1 != None):
        listNode2.append(pinterfacesNode1)
    nodeList.append(listNode2)
    return nodeList, 93

def new468(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    pinterfacesNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (pinterfacesNode2 != None):
        listNode3.append(pinterfacesNode2)
    nodeList.append(listNode3)
    return nodeList, 93

def new469(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    pmoreprefixdefinitionsNode1 = nodeArrayList1[0]
    if (pmoreprefixdefinitionsNode1 != None):
        listNode2.append(pmoreprefixdefinitionsNode1)
    nodeList.append(listNode2)
    return nodeList, 94

def new470(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    pmoreprefixdefinitionsNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (pmoreprefixdefinitionsNode2 != None):
        listNode3.append(pmoreprefixdefinitionsNode2)
    nodeList.append(listNode3)
    return nodeList, 94

def new471(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    pattributevalueNode1 = nodeArrayList1[0]
    if (pattributevalueNode1 != None):
        listNode2.append(pattributevalueNode1)
    nodeList.append(listNode2)
    return nodeList, 95

def new472(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    pattributevalueNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (pattributevalueNode2 != None):
        listNode3.append(pattributevalueNode2)
    nodeList.append(listNode3)
    return nodeList, 95

def new473(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    pmoreidsNode1 = nodeArrayList1[0]
    if (pmoreidsNode1 != None):
        listNode2.append(pmoreidsNode1)
    nodeList.append(listNode2)
    return nodeList, 96

def new474(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    pmoreidsNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (pmoreidsNode2 != None):
        listNode3.append(pmoreidsNode2)
    nodeList.append(listNode3)
    return nodeList, 96

def new475(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    pontologyelementNode1 = nodeArrayList1[0]
    if (pontologyelementNode1 != None):
        listNode2.append(pontologyelementNode1)
    nodeList.append(listNode2)
    return nodeList, 97

def new476(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    pontologyelementNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (pontologyelementNode2 != None):
        listNode3.append(pontologyelementNode2)
    nodeList.append(listNode3)
    return nodeList, 97

def new477(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    pattributeNode1 = nodeArrayList1[0]
    if (pattributeNode1 != None):
        listNode2.append(pattributeNode1)
    nodeList.append(listNode2)
    return nodeList, 98

def new478(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    pattributeNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (pattributeNode2 != None):
        listNode3.append(pattributeNode2)
    nodeList.append(listNode3)
    return nodeList, 98

def new479(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    pattributefeatureNode1 = nodeArrayList1[0]
    if (pattributefeatureNode1 != None):
        listNode2.append(pattributefeatureNode1)
    nodeList.append(listNode2)
    return nodeList, 99

def new480(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    pattributefeatureNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (pattributefeatureNode2 != None):
        listNode3.append(pattributefeatureNode2)
    nodeList.append(listNode3)
    return nodeList, 99

def new481(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    pmoreparamtypeNode1 = nodeArrayList1[0]
    if (pmoreparamtypeNode1 != None):
        listNode2.append(pmoreparamtypeNode1)
    nodeList.append(listNode2)
    return nodeList, 100

def new482(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    pmoreparamtypeNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (pmoreparamtypeNode2 != None):
        listNode3.append(pmoreparamtypeNode2)
    nodeList.append(listNode3)
    return nodeList, 100

def new483(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    pmorevaluesNode1 = nodeArrayList1[0]
    if (pmorevaluesNode1 != None):
        listNode2.append(pmorevaluesNode1)
    nodeList.append(listNode2)
    return nodeList, 101

def new484(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    pmorevaluesNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (pmorevaluesNode2 != None):
        listNode3.append(pmorevaluesNode2)
    nodeList.append(listNode3)
    return nodeList, 101

def new485(self):
    nodeList = list()
    nodeArrayList1 = self.pop()
    listNode2 = list()
    plogexprNode1 = nodeArrayList1[0]
    if (plogexprNode1 != None):
        listNode2.append(plogexprNode1)
    nodeList.append(listNode2)
    return nodeList, 102

def new486(self):
    nodeList = list()
    nodeArrayList2 = self.pop()
    nodeArrayList1 = self.pop()
    listNode3 = list()
    listNode1 = nodeArrayList1[0]
    plogexprNode2 = nodeArrayList2[0]
    if (listNode1 != None):
        listNode3.extend(listNode1)
    if (plogexprNode2 != None):
        listNode3.append(plogexprNode2)
    nodeList.append(listNode3)
    return nodeList, 102

newnode = [
  new0,
  new1,
  new2,
  new3,
  new4,
  new5,
  new6,
  new7,
  new8,
  new9,
  new10,
  new11,
  new12,
  new13,
  new14,
  new15,
  new16,
  new17,
  new18,
  new19,
  new20,
  new21,
  new22,
  new23,
  new24,
  new25,
  new26,
  new27,
  new28,
  new29,
  new30,
  new31,
  new32,
  new33,
  new34,
  new35,
  new36,
  new37,
  new38,
  new39,
  new40,
  new41,
  new42,
  new43,
  new44,
  new45,
  new46,
  new47,
  new48,
  new49,
  new50,
  new51,
  new52,
  new53,
  new54,
  new55,
  new56,
  new57,
  new58,
  new59,
  new60,
  new61,
  new62,
  new63,
  new64,
  new65,
  new66,
  new67,
  new68,
  new69,
  new70,
  new71,
  new72,
  new73,
  new74,
  new75,
  new76,
  new77,
  new78,
  new79,
  new80,
  new81,
  new82,
  new83,
  new84,
  new85,
  new86,
  new87,
  new88,
  new89,
  new90,
  new91,
  new92,
  new93,
  new94,
  new95,
  new96,
  new97,
  new98,
  new99,
  new100,
  new101,
  new102,
  new103,
  new104,
  new105,
  new106,
  new107,
  new108,
  new109,
  new110,
  new111,
  new112,
  new113,
  new114,
  new115,
  new116,
  new117,
  new118,
  new119,
  new120,
  new121,
  new122,
  new123,
  new124,
  new125,
  new126,
  new127,
  new128,
  new129,
  new130,
  new131,
  new132,
  new133,
  new134,
  new135,
  new136,
  new137,
  new138,
  new139,
  new140,
  new141,
  new142,
  new143,
  new144,
  new145,
  new146,
  new147,
  new148,
  new149,
  new150,
  new151,
  new152,
  new153,
  new154,
  new155,
  new156,
  new157,
  new158,
  new159,
  new160,
  new161,
  new162,
  new163,
  new164,
  new165,
  new166,
  new167,
  new168,
  new169,
  new170,
  new171,
  new172,
  new173,
  new174,
  new175,
  new176,
  new177,
  new178,
  new179,
  new180,
  new181,
  new182,
  new183,
  new184,
  new185,
  new186,
  new187,
  new188,
  new189,
  new190,
  new191,
  new192,
  new193,
  new194,
  new195,
  new196,
  new197,
  new198,
  new199,
  new200,
  new201,
  new202,
  new203,
  new204,
  new205,
  new206,
  new207,
  new208,
  new209,
  new210,
  new211,
  new212,
  new213,
  new214,
  new215,
  new216,
  new217,
  new218,
  new219,
  new220,
  new221,
  new222,
  new223,
  new224,
  new225,
  new226,
  new227,
  new228,
  new229,
  new230,
  new231,
  new232,
  new233,
  new234,
  new235,
  new236,
  new237,
  new238,
  new239,
  new240,
  new241,
  new242,
  new243,
  new244,
  new245,
  new246,
  new247,
  new248,
  new249,
  new250,
  new251,
  new252,
  new253,
  new254,
  new255,
  new256,
  new257,
  new258,
  new259,
  new260,
  new261,
  new262,
  new263,
  new264,
  new265,
  new266,
  new267,
  new268,
  new269,
  new270,
  new271,
  new272,
  new273,
  new274,
  new275,
  new276,
  new277,
  new278,
  new279,
  new280,
  new281,
  new282,
  new283,
  new284,
  new285,
  new286,
  new287,
  new288,
  new289,
  new290,
  new291,
  new292,
  new293,
  new294,
  new295,
  new296,
  new297,
  new298,
  new299,
  new300,
  new301,
  new302,
  new303,
  new304,
  new305,
  new306,
  new307,
  new308,
  new309,
  new310,
  new311,
  new312,
  new313,
  new314,
  new315,
  new316,
  new317,
  new318,
  new319,
  new320,
  new321,
  new322,
  new323,
  new324,
  new325,
  new326,
  new327,
  new328,
  new329,
  new330,
  new331,
  new332,
  new333,
  new334,
  new335,
  new336,
  new337,
  new338,
  new339,
  new340,
  new341,
  new342,
  new343,
  new344,
  new345,
  new346,
  new347,
  new348,
  new349,
  new350,
  new351,
  new352,
  new353,
  new354,
  new355,
  new356,
  new357,
  new358,
  new359,
  new360,
  new361,
  new362,
  new363,
  new364,
  new365,
  new366,
  new367,
  new368,
  new369,
  new370,
  new371,
  new372,
  new373,
  new374,
  new375,
  new376,
  new377,
  new378,
  new379,
  new380,
  new381,
  new382,
  new383,
  new384,
  new385,
  new386,
  new387,
  new388,
  new389,
  new390,
  new391,
  new392,
  new393,
  new394,
  new395,
  new396,
  new397,
  new398,
  new399,
  new400,
  new401,
  new402,
  new403,
  new404,
  new405,
  new406,
  new407,
  new408,
  new409,
  new410,
  new411,
  new412,
  new413,
  new414,
  new415,
  new416,
  new417,
  new418,
  new419,
  new420,
  new421,
  new422,
  new423,
  new424,
  new425,
  new426,
  new427,
  new428,
  new429,
  new430,
  new431,
  new432,
  new433,
  new434,
  new435,
  new436,
  new437,
  new438,
  new439,
  new440,
  new441,
  new442,
  new443,
  new444,
  new445,
  new446,
  new447,
  new448,
  new449,
  new450,
  new451,
  new452,
  new453,
  new454,
  new455,
  new456,
  new457,
  new458,
  new459,
  new460,
  new461,
  new462,
  new463,
  new464,
  new465,
  new466,
  new467,
  new468,
  new469,
  new470,
  new471,
  new472,
  new473,
  new474,
  new475,
  new476,
  new477,
  new478,
  new479,
  new480,
  new481,
  new482,
  new483,
  new484,
  new485,
  new486
]

actionTable = [
                [
                  [-1, 1, 0],
                  [39, 0, 1],
                  [40, 0, 2],
                  [48, 0, 3],
                  [51, 0, 4],
                  [52, 0, 5],
                  [68, 0, 6],
                  [69, 0, 7],
                  [70, 0, 8],
                  [71, 0, 9],
                ],
                [
                  [-1, 1, 144],
                  [19, 0, 23],
                  [20, 0, 24],
                  [43, 0, 25],
                  [49, 0, 26],
                  [60, 0, 27],
                  [64, 0, 28],
                  [66, 0, 29],
                  [67, 0, 30],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 27],
                  [19, 0, 23],
                  [20, 0, 24],
                  [33, 0, 48],
                  [43, 0, 25],
                  [45, 0, 49],
                  [49, 0, 26],
                  [66, 0, 29],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 3],
                  [6, 0, 57],
                  [78, 0, 58],
                ],
                [
                  [-1, 1, 273],
                  [19, 0, 23],
                  [20, 0, 24],
                  [32, 0, 60],
                  [35, 0, 61],
                  [43, 0, 25],
                  [44, 0, 62],
                  [49, 0, 26],
                  [57, 0, 63],
                  [58, 0, 64],
                  [66, 0, 29],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 80],
                  [19, 0, 23],
                  [20, 0, 24],
                  [43, 0, 25],
                  [49, 0, 26],
                  [60, 0, 27],
                  [64, 0, 28],
                  [67, 0, 30],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 43],
                  [19, 0, 23],
                  [20, 0, 24],
                  [33, 0, 48],
                  [43, 0, 25],
                  [45, 0, 49],
                  [49, 0, 26],
                  [66, 0, 29],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 176],
                  [19, 0, 23],
                  [20, 0, 24],
                  [43, 0, 25],
                  [49, 0, 26],
                  [60, 0, 84],
                  [64, 0, 28],
                  [66, 0, 29],
                  [67, 0, 30],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 8],
                  [78, 0, 90],
                ],
                [
                  [-1, 1, 208],
                  [19, 0, 23],
                  [20, 0, 24],
                  [43, 0, 25],
                  [49, 0, 26],
                  [60, 0, 84],
                  [64, 0, 28],
                  [66, 0, 29],
                  [67, 0, 30],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 10],
                  [80, 2, -1],
                ],
                [
                  [-1, 1, 1],
                  [39, 0, 1],
                  [40, 0, 2],
                  [48, 0, 3],
                  [51, 0, 4],
                  [52, 0, 5],
                  [68, 0, 6],
                  [69, 0, 7],
                  [71, 0, 9],
                ],
                [
                  [-1, 1, 2],
                  [39, 0, 1],
                  [40, 0, 2],
                  [51, 0, 4],
                  [52, 0, 5],
                  [68, 0, 6],
                  [69, 0, 7],
                  [71, 0, 9],
                ],
                [
                  [-1, 1, 59],
                ],
                [
                  [-1, 1, 61],
                ],
                [
                  [-1, 1, 461],
                ],
                [
                  [-1, 1, 62],
                ],
                [
                  [-1, 1, 76],
                ],
                [
                  [-1, 1, 77],
                ],
                [
                  [-1, 1, 78],
                ],
                [
                  [-1, 1, 79],
                ],
                [
                  [-1, 1, 60],
                ],
                [
                  [-1, 1, 4],
                  [39, 0, 1],
                  [40, 0, 2],
                  [51, 0, 4],
                  [52, 0, 5],
                  [68, 0, 6],
                  [69, 0, 7],
                  [71, 0, 9],
                ],
                [
                  [-1, 1, 431],
                ],
                [
                  [-1, 1, 430],
                ],
                [
                  [-1, 3, 25],
                  [6, 0, 100],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 26],
                  [19, 0, 23],
                  [20, 0, 24],
                  [38, 0, 103],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 27],
                  [6, 0, 107],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 28],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 29],
                  [6, 0, 100],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 30],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 429],
                ],
                [
                  [-1, 1, 426],
                ],
                [
                  [-1, 1, 422],
                  [8, 0, 112],
                ],
                [
                  [-1, 1, 463],
                ],
                [
                  [-1, 1, 70],
                ],
                [
                  [-1, 1, 71],
                ],
                [
                  [-1, 1, 69],
                ],
                [
                  [-1, 1, 160],
                ],
                [
                  [-1, 1, 244],
                ],
                [
                  [-1, 1, 245],
                ],
                [
                  [-1, 1, 148],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 152],
                  [67, 0, 30],
                ],
                [
                  [-1, 3, 43],
                  [57, 0, 116],
                  [60, 0, 117],
                  [79, 0, 118],
                ],
                [
                  [-1, 1, 427],
                ],
                [
                  [-1, 1, 428],
                ],
                [
                  [-1, 1, 145],
                  [43, 0, 25],
                  [49, 0, 26],
                  [60, 0, 27],
                  [64, 0, 28],
                  [66, 0, 29],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 146],
                  [43, 0, 25],
                  [49, 0, 26],
                  [60, 0, 27],
                  [64, 0, 28],
                  [66, 0, 29],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 11],
                  [19, 0, 23],
                  [20, 0, 24],
                  [31, 0, 127],
                  [37, 0, 128],
                  [43, 0, 25],
                  [49, 0, 26],
                  [54, 0, 129],
                  [55, 0, 130],
                  [59, 0, 131],
                  [66, 0, 29],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 253],
                  [6, 0, 137],
                  [19, 0, 23],
                  [20, 0, 24],
                  [34, 0, 138],
                  [43, 0, 25],
                  [49, 0, 26],
                  [53, 0, 139],
                  [66, 0, 29],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 31],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 270],
                ],
                [
                  [-1, 1, 269],
                ],
                [
                  [-1, 1, 467],
                ],
                [
                  [-1, 1, 28],
                  [33, 0, 48],
                  [43, 0, 25],
                  [45, 0, 49],
                  [49, 0, 26],
                  [66, 0, 29],
                ],
                [
                  [-1, 1, 29],
                  [33, 0, 48],
                  [43, 0, 25],
                  [45, 0, 49],
                  [49, 0, 26],
                  [66, 0, 29],
                ],
                [
                  [-1, 1, 35],
                  [45, 0, 49],
                ],
                [
                  [-1, 3, 57],
                  [78, 0, 151],
                  [79, 0, 152],
                ],
                [
                  [-1, 1, 63],
                ],
                [
                  [-1, 1, 9],
                ],
                [
                  [-1, 3, 60],
                  [19, 0, 23],
                  [20, 0, 24],
                  [36, 0, 154],
                  [49, 0, 26],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 61],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 313],
                  [19, 0, 23],
                  [20, 0, 24],
                  [47, 0, 160],
                  [49, 0, 26],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 63],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 64],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 475],
                ],
                [
                  [-1, 1, 281],
                ],
                [
                  [-1, 1, 282],
                ],
                [
                  [-1, 1, 283],
                ],
                [
                  [-1, 1, 284],
                ],
                [
                  [-1, 1, 285],
                ],
                [
                  [-1, 1, 274],
                  [32, 0, 60],
                  [35, 0, 61],
                  [43, 0, 25],
                  [44, 0, 62],
                  [49, 0, 26],
                  [57, 0, 63],
                  [58, 0, 64],
                  [66, 0, 29],
                ],
                [
                  [-1, 1, 275],
                  [32, 0, 60],
                  [35, 0, 61],
                  [43, 0, 25],
                  [44, 0, 62],
                  [49, 0, 26],
                  [57, 0, 63],
                  [58, 0, 64],
                  [66, 0, 29],
                ],
                [
                  [-1, 1, 277],
                  [32, 0, 60],
                  [35, 0, 61],
                  [44, 0, 62],
                  [57, 0, 63],
                  [58, 0, 64],
                ],
                [
                  [-1, 1, 84],
                  [60, 0, 27],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 82],
                  [43, 0, 25],
                  [60, 0, 27],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 112],
                ],
                [
                  [-1, 1, 88],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 96],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 81],
                  [43, 0, 25],
                  [49, 0, 26],
                  [60, 0, 27],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 47],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 44],
                  [33, 0, 48],
                  [43, 0, 25],
                  [45, 0, 49],
                  [49, 0, 26],
                  [66, 0, 29],
                ],
                [
                  [-1, 1, 45],
                  [33, 0, 48],
                  [43, 0, 25],
                  [45, 0, 49],
                  [49, 0, 26],
                  [66, 0, 29],
                ],
                [
                  [-1, 1, 51],
                  [45, 0, 49],
                ],
                [
                  [-1, 3, 84],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 192],
                ],
                [
                  [-1, 1, 180],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 184],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 177],
                  [43, 0, 25],
                  [49, 0, 26],
                  [60, 0, 84],
                  [64, 0, 28],
                  [66, 0, 29],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 178],
                  [43, 0, 25],
                  [49, 0, 26],
                  [60, 0, 84],
                  [64, 0, 28],
                  [66, 0, 29],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 8],
                ],
                [
                  [-1, 1, 224],
                ],
                [
                  [-1, 1, 212],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 216],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 209],
                  [43, 0, 25],
                  [49, 0, 26],
                  [60, 0, 84],
                  [64, 0, 28],
                  [66, 0, 29],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 210],
                  [43, 0, 25],
                  [49, 0, 26],
                  [60, 0, 84],
                  [64, 0, 28],
                  [66, 0, 29],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 3],
                  [39, 0, 1],
                  [40, 0, 2],
                  [51, 0, 4],
                  [52, 0, 5],
                  [68, 0, 6],
                  [69, 0, 7],
                  [71, 0, 9],
                ],
                [
                  [-1, 1, 5],
                  [39, 0, 1],
                  [40, 0, 2],
                  [51, 0, 4],
                  [52, 0, 5],
                  [68, 0, 6],
                  [69, 0, 7],
                  [71, 0, 9],
                ],
                [
                  [-1, 1, 6],
                  [39, 0, 1],
                  [40, 0, 2],
                  [51, 0, 4],
                  [52, 0, 5],
                  [68, 0, 6],
                  [69, 0, 7],
                  [71, 0, 9],
                ],
                [
                  [-1, 1, 462],
                ],
                [
                  [-1, 3, 100],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 432],
                ],
                [
                  [-1, 1, 73],
                ],
                [
                  [-1, 1, 74],
                ],
                [
                  [-1, 1, 471],
                ],
                [
                  [-1, 3, 105],
                  [41, 0, 214],
                ],
                [
                  [-1, 3, 106],
                  [19, 0, 23],
                  [20, 0, 24],
                  [38, 0, 215],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 107],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 241],
                ],
                [
                  [-1, 1, 246],
                ],
                [
                  [-1, 1, 72],
                ],
                [
                  [-1, 1, 240],
                ],
                [
                  [-1, 1, 421],
                ],
                [
                  [-1, 1, 164],
                ],
                [
                  [-1, 1, 156],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 168],
                ],
                [
                  [-1, 1, 424],
                ],
                [
                  [-1, 1, 425],
                ],
                [
                  [-1, 1, 423],
                ],
                [
                  [-1, 1, 161],
                ],
                [
                  [-1, 1, 149],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 153],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 147],
                  [43, 0, 25],
                  [49, 0, 26],
                  [60, 0, 27],
                  [64, 0, 28],
                  [66, 0, 29],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 464],
                ],
                [
                  [-1, 1, 162],
                ],
                [
                  [-1, 1, 150],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 154],
                  [67, 0, 30],
                ],
                [
                  [-1, 3, 127],
                  [19, 0, 23],
                  [20, 0, 24],
                  [36, 0, 154],
                  [49, 0, 26],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 128],
                  [19, 0, 23],
                  [20, 0, 24],
                  [36, 0, 154],
                  [49, 0, 26],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 129],
                  [19, 0, 23],
                  [20, 0, 24],
                  [36, 0, 154],
                  [49, 0, 26],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 130],
                  [19, 0, 23],
                  [20, 0, 24],
                  [36, 0, 154],
                  [49, 0, 26],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 131],
                  [6, 0, 232],
                  [72, 0, 233],
                ],
                [
                  [-1, 1, 15],
                  [31, 0, 127],
                  [37, 0, 128],
                  [54, 0, 129],
                  [55, 0, 130],
                ],
                [
                  [-1, 1, 465],
                ],
                [
                  [-1, 1, 12],
                  [31, 0, 127],
                  [37, 0, 128],
                  [43, 0, 25],
                  [49, 0, 26],
                  [54, 0, 129],
                  [55, 0, 130],
                  [59, 0, 131],
                  [66, 0, 29],
                ],
                [
                  [-1, 1, 13],
                  [31, 0, 127],
                  [37, 0, 128],
                  [43, 0, 25],
                  [49, 0, 26],
                  [54, 0, 129],
                  [55, 0, 130],
                  [59, 0, 131],
                  [66, 0, 29],
                ],
                [
                  [-1, 1, 19],
                  [31, 0, 127],
                  [37, 0, 128],
                  [54, 0, 129],
                  [55, 0, 130],
                ],
                [
                  [-1, 3, 137],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 138],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 139],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 257],
                  [53, 0, 139],
                ],
                [
                  [-1, 1, 261],
                ],
                [
                  [-1, 1, 254],
                  [34, 0, 138],
                  [43, 0, 25],
                  [49, 0, 26],
                  [53, 0, 139],
                  [66, 0, 29],
                ],
                [
                  [-1, 1, 255],
                  [34, 0, 138],
                  [43, 0, 25],
                  [49, 0, 26],
                  [53, 0, 139],
                  [66, 0, 29],
                ],
                [
                  [-1, 1, 39],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 32],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 30],
                  [33, 0, 48],
                  [43, 0, 25],
                  [45, 0, 49],
                  [49, 0, 26],
                  [66, 0, 29],
                ],
                [
                  [-1, 1, 36],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 33],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 37],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 468],
                ],
                [
                  [-1, 1, 67],
                ],
                [
                  [-1, 3, 152],
                  [78, 0, 255],
                ],
                [
                  [-1, 3, 153],
                  [0, 0, 256],
                  [7, 0, 257],
                ],
                [
                  [-1, 3, 154],
                  [2, 0, 260],
                  [15, 0, 261],
                  [16, 0, 262],
                  [17, 0, 263],
                  [18, 0, 264],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 363],
                  [36, 0, 154],
                ],
                [
                  [-1, 1, 361],
                ],
                [
                  [-1, 1, 365],
                ],
                [
                  [-1, 1, 362],
                  [36, 0, 154],
                  [49, 0, 26],
                ],
                [
                  [-1, 1, 286],
                  [19, 0, 23],
                  [20, 0, 24],
                  [49, 0, 26],
                  [61, 0, 292],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 160],
                  [6, 0, 100],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 317],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 315],
                  [19, 0, 23],
                  [20, 0, 24],
                  [49, 0, 26],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 314],
                  [19, 0, 23],
                  [20, 0, 24],
                  [41, 0, 214],
                  [47, 0, 160],
                  [49, 0, 26],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 321],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 331],
                  [2, 0, 305],
                  [30, 0, 306],
                  [49, 0, 26],
                  [62, 0, 307],
                ],
                [
                  [-1, 3, 166],
                  [2, 0, 312],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 276],
                  [32, 0, 60],
                  [35, 0, 61],
                  [43, 0, 25],
                  [44, 0, 62],
                  [49, 0, 26],
                  [57, 0, 63],
                  [58, 0, 64],
                  [66, 0, 29],
                ],
                [
                  [-1, 1, 278],
                  [32, 0, 60],
                  [35, 0, 61],
                  [44, 0, 62],
                  [57, 0, 63],
                  [58, 0, 64],
                ],
                [
                  [-1, 1, 279],
                  [32, 0, 60],
                  [35, 0, 61],
                  [44, 0, 62],
                  [57, 0, 63],
                  [58, 0, 64],
                ],
                [
                  [-1, 1, 476],
                ],
                [
                  [-1, 1, 116],
                ],
                [
                  [-1, 1, 92],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 100],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 86],
                  [60, 0, 27],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 114],
                ],
                [
                  [-1, 1, 90],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 98],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 120],
                ],
                [
                  [-1, 1, 104],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 128],
                ],
                [
                  [-1, 1, 85],
                  [60, 0, 27],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 83],
                  [43, 0, 25],
                  [60, 0, 27],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 113],
                ],
                [
                  [-1, 1, 89],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 97],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 55],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 48],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 46],
                  [33, 0, 48],
                  [43, 0, 25],
                  [45, 0, 49],
                  [49, 0, 26],
                  [66, 0, 29],
                ],
                [
                  [-1, 1, 52],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 49],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 53],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 196],
                ],
                [
                  [-1, 1, 188],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 200],
                ],
                [
                  [-1, 1, 193],
                ],
                [
                  [-1, 1, 181],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 185],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 179],
                  [43, 0, 25],
                  [49, 0, 26],
                  [60, 0, 84],
                  [64, 0, 28],
                  [66, 0, 29],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 194],
                ],
                [
                  [-1, 1, 182],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 186],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 228],
                ],
                [
                  [-1, 1, 220],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 232],
                ],
                [
                  [-1, 1, 225],
                ],
                [
                  [-1, 1, 213],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 217],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 211],
                  [43, 0, 25],
                  [49, 0, 26],
                  [60, 0, 84],
                  [64, 0, 28],
                  [66, 0, 29],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 226],
                ],
                [
                  [-1, 1, 214],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 218],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 7],
                  [39, 0, 1],
                  [40, 0, 2],
                  [51, 0, 4],
                  [52, 0, 5],
                  [68, 0, 6],
                  [69, 0, 7],
                  [71, 0, 9],
                ],
                [
                  [-1, 3, 213],
                  [0, 0, 359],
                  [7, 0, 360],
                ],
                [
                  [-1, 3, 214],
                  [2, 0, 363],
                  [6, 0, 364],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [73, 0, 31],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 75],
                ],
                [
                  [-1, 1, 472],
                ],
                [
                  [-1, 3, 217],
                  [0, 0, 359],
                  [7, 0, 367],
                ],
                [
                  [-1, 1, 172],
                ],
                [
                  [-1, 1, 165],
                ],
                [
                  [-1, 1, 157],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 169],
                ],
                [
                  [-1, 1, 163],
                ],
                [
                  [-1, 1, 151],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 155],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 166],
                ],
                [
                  [-1, 1, 158],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 170],
                ],
                [
                  [-1, 1, 249],
                ],
                [
                  [-1, 1, 250],
                ],
                [
                  [-1, 1, 248],
                ],
                [
                  [-1, 1, 247],
                ],
                [
                  [-1, 3, 232],
                  [72, 0, 374],
                ],
                [
                  [-1, 1, 453],
                ],
                [
                  [-1, 1, 10],
                ],
                [
                  [-1, 1, 23],
                  [31, 0, 127],
                  [37, 0, 128],
                  [54, 0, 129],
                  [55, 0, 130],
                ],
                [
                  [-1, 1, 16],
                  [31, 0, 127],
                  [37, 0, 128],
                  [54, 0, 129],
                  [55, 0, 130],
                ],
                [
                  [-1, 1, 14],
                  [31, 0, 127],
                  [37, 0, 128],
                  [43, 0, 25],
                  [49, 0, 26],
                  [54, 0, 129],
                  [55, 0, 130],
                  [59, 0, 131],
                  [66, 0, 29],
                ],
                [
                  [-1, 1, 20],
                  [31, 0, 127],
                  [37, 0, 128],
                  [54, 0, 129],
                  [55, 0, 130],
                ],
                [
                  [-1, 1, 17],
                  [31, 0, 127],
                  [37, 0, 128],
                  [54, 0, 129],
                  [55, 0, 130],
                ],
                [
                  [-1, 1, 21],
                  [31, 0, 127],
                  [37, 0, 128],
                  [54, 0, 129],
                  [55, 0, 130],
                ],
                [
                  [-1, 1, 466],
                ],
                [
                  [-1, 3, 242],
                  [0, 0, 359],
                  [7, 0, 380],
                ],
                [
                  [-1, 1, 271],
                ],
                [
                  [-1, 1, 272],
                ],
                [
                  [-1, 1, 265],
                ],
                [
                  [-1, 1, 258],
                  [53, 0, 139],
                ],
                [
                  [-1, 1, 262],
                ],
                [
                  [-1, 1, 256],
                  [34, 0, 138],
                  [43, 0, 25],
                  [49, 0, 26],
                  [53, 0, 139],
                  [66, 0, 29],
                ],
                [
                  [-1, 1, 259],
                  [53, 0, 139],
                ],
                [
                  [-1, 1, 263],
                ],
                [
                  [-1, 1, 40],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 34],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 38],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 41],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 66],
                ],
                [
                  [-1, 3, 256],
                  [78, 0, 151],
                  [79, 0, 152],
                ],
                [
                  [-1, 1, 64],
                ],
                [
                  [-1, 1, 469],
                ],
                [
                  [-1, 3, 259],
                  [0, 0, 256],
                  [7, 0, 388],
                ],
                [
                  [-1, 3, 260],
                  [2, 0, 260],
                  [16, 0, 262],
                  [17, 0, 263],
                  [18, 0, 264],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 261],
                  [2, 0, 260],
                  [16, 0, 262],
                  [17, 0, 263],
                  [18, 0, 264],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 262],
                  [2, 0, 260],
                  [16, 0, 262],
                  [17, 0, 263],
                  [18, 0, 264],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 411],
                ],
                [
                  [-1, 1, 410],
                ],
                [
                  [-1, 3, 265],
                  [75, 0, 395],
                  [76, 0, 396],
                ],
                [
                  [-1, 1, 445],
                ],
                [
                  [-1, 1, 446],
                ],
                [
                  [-1, 1, 455],
                ],
                [
                  [-1, 1, 457],
                ],
                [
                  [-1, 1, 439],
                ],
                [
                  [-1, 1, 485],
                ],
                [
                  [-1, 3, 272],
                  [1, 0, 397],
                  [11, 0, 398],
                  [12, 0, 399],
                  [13, 0, 400],
                  [14, 0, 401],
                ],
                [
                  [-1, 1, 374],
                  [10, 0, 403],
                ],
                [
                  [-1, 1, 375],
                  [9, 0, 404],
                ],
                [
                  [-1, 1, 377],
                ],
                [
                  [-1, 1, 382],
                ],
                [
                  [-1, 1, 380],
                ],
                [
                  [-1, 1, 384],
                ],
                [
                  [-1, 1, 385],
                ],
                [
                  [-1, 1, 436],
                ],
                [
                  [-1, 3, 281],
                  [6, 0, 232],
                  [72, 0, 233],
                ],
                [
                  [-1, 1, 437],
                  [2, 0, 406],
                ],
                [
                  [-1, 1, 444],
                ],
                [
                  [-1, 1, 386],
                  [4, 0, 407],
                  [21, 0, 408],
                  [22, 0, 409],
                  [23, 0, 410],
                  [24, 0, 411],
                  [25, 0, 412],
                  [26, 0, 413],
                  [47, 0, 414],
                  [61, 0, 415],
                ],
                [
                  [-1, 1, 459],
                ],
                [
                  [-1, 1, 460],
                ],
                [
                  [-1, 1, 438],
                ],
                [
                  [-1, 1, 369],
                  [2, 0, 260],
                  [15, 0, 261],
                  [16, 0, 262],
                  [17, 0, 263],
                  [18, 0, 264],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 367],
                ],
                [
                  [-1, 1, 364],
                  [36, 0, 154],
                ],
                [
                  [-1, 1, 366],
                ],
                [
                  [-1, 3, 292],
                  [6, 0, 100],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 288],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 287],
                  [19, 0, 23],
                  [20, 0, 24],
                  [49, 0, 26],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 477],
                ],
                [
                  [-1, 3, 296],
                  [42, 0, 425],
                  [46, 0, 426],
                  [50, 0, 427],
                  [56, 0, 428],
                  [63, 0, 429],
                  [65, 0, 430],
                ],
                [
                  [-1, 1, 290],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 329],
                ],
                [
                  [-1, 1, 325],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 319],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 323],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 318],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 316],
                  [19, 0, 23],
                  [20, 0, 24],
                  [49, 0, 26],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 322],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 305],
                  [42, 0, 425],
                  [50, 0, 427],
                ],
                [
                  [-1, 3, 306],
                  [75, 0, 441],
                ],
                [
                  [-1, 3, 307],
                  [6, 0, 100],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 339],
                ],
                [
                  [-1, 1, 333],
                  [49, 0, 26],
                  [62, 0, 307],
                ],
                [
                  [-1, 1, 335],
                  [49, 0, 26],
                ],
                [
                  [-1, 1, 332],
                  [2, 0, 305],
                  [49, 0, 26],
                  [62, 0, 307],
                ],
                [
                  [-1, 3, 312],
                  [2, 0, 363],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [73, 0, 31],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 313],
                  [2, 0, 450],
                ],
                [
                  [-1, 1, 280],
                  [32, 0, 60],
                  [35, 0, 61],
                  [44, 0, 62],
                  [57, 0, 63],
                  [58, 0, 64],
                ],
                [
                  [-1, 1, 124],
                ],
                [
                  [-1, 1, 108],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 132],
                ],
                [
                  [-1, 1, 118],
                ],
                [
                  [-1, 1, 94],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 102],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 122],
                ],
                [
                  [-1, 1, 106],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 130],
                ],
                [
                  [-1, 1, 136],
                ],
                [
                  [-1, 1, 117],
                ],
                [
                  [-1, 1, 93],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 101],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 87],
                  [60, 0, 27],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 115],
                ],
                [
                  [-1, 1, 91],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 99],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 121],
                ],
                [
                  [-1, 1, 105],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 129],
                ],
                [
                  [-1, 1, 56],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 50],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 54],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 57],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 204],
                ],
                [
                  [-1, 1, 197],
                ],
                [
                  [-1, 1, 189],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 201],
                ],
                [
                  [-1, 1, 195],
                ],
                [
                  [-1, 1, 183],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 187],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 198],
                ],
                [
                  [-1, 1, 190],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 202],
                ],
                [
                  [-1, 1, 236],
                ],
                [
                  [-1, 1, 229],
                ],
                [
                  [-1, 1, 221],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 233],
                ],
                [
                  [-1, 1, 227],
                ],
                [
                  [-1, 1, 215],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 219],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 230],
                ],
                [
                  [-1, 1, 222],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 234],
                ],
                [
                  [-1, 3, 359],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 433],
                ],
                [
                  [-1, 1, 473],
                ],
                [
                  [-1, 3, 362],
                  [0, 0, 359],
                  [7, 0, 478],
                ],
                [
                  [-1, 3, 363],
                  [2, 0, 363],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 364],
                  [2, 0, 363],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [73, 0, 31],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 440],
                ],
                [
                  [-1, 1, 330],
                ],
                [
                  [-1, 1, 242],
                ],
                [
                  [-1, 3, 368],
                  [0, 0, 359],
                  [7, 0, 482],
                ],
                [
                  [-1, 1, 173],
                ],
                [
                  [-1, 1, 167],
                ],
                [
                  [-1, 1, 159],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 171],
                ],
                [
                  [-1, 1, 174],
                ],
                [
                  [-1, 1, 451],
                ],
                [
                  [-1, 3, 375],
                  [0, 0, 484],
                  [7, 0, 485],
                ],
                [
                  [-1, 1, 24],
                  [31, 0, 127],
                  [37, 0, 128],
                  [54, 0, 129],
                  [55, 0, 130],
                ],
                [
                  [-1, 1, 18],
                  [31, 0, 127],
                  [37, 0, 128],
                  [54, 0, 129],
                  [55, 0, 130],
                ],
                [
                  [-1, 1, 22],
                  [31, 0, 127],
                  [37, 0, 128],
                  [54, 0, 129],
                  [55, 0, 130],
                ],
                [
                  [-1, 1, 25],
                  [31, 0, 127],
                  [37, 0, 128],
                  [54, 0, 129],
                  [55, 0, 130],
                ],
                [
                  [-1, 1, 251],
                ],
                [
                  [-1, 3, 381],
                  [0, 0, 359],
                  [7, 0, 487],
                ],
                [
                  [-1, 1, 266],
                ],
                [
                  [-1, 1, 260],
                  [53, 0, 139],
                ],
                [
                  [-1, 1, 264],
                ],
                [
                  [-1, 1, 267],
                ],
                [
                  [-1, 1, 42],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 68],
                ],
                [
                  [-1, 1, 65],
                ],
                [
                  [-1, 1, 470],
                ],
                [
                  [-1, 3, 390],
                  [3, 0, 489],
                  [11, 0, 398],
                  [12, 0, 399],
                  [13, 0, 400],
                ],
                [
                  [-1, 3, 391],
                  [27, 0, 490],
                  [28, 0, 491],
                  [29, 0, 492],
                  [30, 0, 493],
                ],
                [
                  [-1, 1, 386],
                  [4, 0, 407],
                  [21, 0, 408],
                  [22, 0, 409],
                  [23, 0, 410],
                  [24, 0, 411],
                  [25, 0, 412],
                  [26, 0, 413],
                  [27, 1, 401],
                  [28, 1, 401],
                  [29, 1, 401],
                  [30, 1, 401],
                  [47, 0, 414],
                  [61, 0, 415],
                ],
                [
                  [-1, 3, 393],
                  [1, 0, 495],
                  [11, 0, 398],
                  [12, 0, 399],
                  [13, 0, 400],
                ],
                [
                  [-1, 1, 379],
                ],
                [
                  [-1, 1, 456],
                ],
                [
                  [-1, 1, 458],
                ],
                [
                  [-1, 1, 372],
                ],
                [
                  [-1, 1, 414],
                ],
                [
                  [-1, 1, 415],
                ],
                [
                  [-1, 1, 416],
                ],
                [
                  [-1, 3, 401],
                  [2, 0, 260],
                  [16, 0, 262],
                  [17, 0, 263],
                  [18, 0, 264],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 402],
                  [2, 0, 260],
                  [16, 0, 262],
                  [17, 0, 263],
                  [18, 0, 264],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 403],
                  [2, 0, 260],
                  [16, 0, 262],
                  [17, 0, 263],
                  [18, 0, 264],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 404],
                  [2, 0, 260],
                  [16, 0, 262],
                  [17, 0, 263],
                  [18, 0, 264],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 405],
                  [2, 0, 500],
                ],
                [
                  [-1, 3, 406],
                  [2, 0, 363],
                  [3, 0, 501],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 407],
                  [2, 0, 363],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 402],
                ],
                [
                  [-1, 1, 403],
                ],
                [
                  [-1, 1, 404],
                ],
                [
                  [-1, 1, 405],
                ],
                [
                  [-1, 1, 406],
                ],
                [
                  [-1, 1, 407],
                ],
                [
                  [-1, 1, 408],
                ],
                [
                  [-1, 1, 409],
                ],
                [
                  [-1, 1, 390],
                  [47, 0, 414],
                  [61, 0, 415],
                ],
                [
                  [-1, 3, 417],
                  [2, 0, 363],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 418],
                  [2, 0, 363],
                  [6, 0, 509],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 486],
                ],
                [
                  [-1, 1, 368],
                ],
                [
                  [-1, 1, 294],
                ],
                [
                  [-1, 1, 292],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 289],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 291],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 296],
                ],
                [
                  [-1, 3, 426],
                  [2, 0, 513],
                ],
                [
                  [-1, 1, 295],
                ],
                [
                  [-1, 1, 312],
                ],
                [
                  [-1, 1, 310],
                ],
                [
                  [-1, 1, 309],
                ],
                [
                  [-1, 3, 431],
                  [2, 0, 514],
                  [6, 0, 100],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 479],
                ],
                [
                  [-1, 3, 433],
                  [42, 0, 425],
                  [46, 0, 426],
                  [50, 0, 427],
                  [56, 0, 428],
                  [63, 0, 429],
                  [65, 0, 430],
                ],
                [
                  [-1, 1, 478],
                ],
                [
                  [-1, 1, 327],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 326],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 320],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 324],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 439],
                  [6, 0, 100],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 440],
                  [0, 0, 521],
                  [3, 0, 522],
                ],
                [
                  [-1, 1, 352],
                ],
                [
                  [-1, 1, 351],
                ],
                [
                  [-1, 1, 341],
                ],
                [
                  [-1, 1, 337],
                  [49, 0, 26],
                ],
                [
                  [-1, 1, 343],
                ],
                [
                  [-1, 1, 340],
                ],
                [
                  [-1, 1, 334],
                  [49, 0, 26],
                  [62, 0, 307],
                ],
                [
                  [-1, 1, 336],
                  [49, 0, 26],
                ],
                [
                  [-1, 3, 449],
                  [0, 0, 529],
                  [3, 0, 530],
                ],
                [
                  [-1, 3, 450],
                  [2, 0, 363],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [73, 0, 31],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 140],
                ],
                [
                  [-1, 1, 126],
                ],
                [
                  [-1, 1, 110],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 134],
                ],
                [
                  [-1, 1, 138],
                ],
                [
                  [-1, 1, 125],
                ],
                [
                  [-1, 1, 109],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 133],
                ],
                [
                  [-1, 1, 119],
                ],
                [
                  [-1, 1, 95],
                  [64, 0, 28],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 103],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 123],
                ],
                [
                  [-1, 1, 107],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 131],
                ],
                [
                  [-1, 1, 137],
                ],
                [
                  [-1, 1, 58],
                  [45, 0, 49],
                ],
                [
                  [-1, 1, 205],
                ],
                [
                  [-1, 1, 199],
                ],
                [
                  [-1, 1, 191],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 203],
                ],
                [
                  [-1, 1, 206],
                ],
                [
                  [-1, 1, 237],
                ],
                [
                  [-1, 1, 231],
                ],
                [
                  [-1, 1, 223],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 235],
                ],
                [
                  [-1, 1, 238],
                ],
                [
                  [-1, 1, 435],
                ],
                [
                  [-1, 1, 434],
                ],
                [
                  [-1, 1, 474],
                ],
                [
                  [-1, 1, 401],
                ],
                [
                  [-1, 3, 481],
                  [0, 0, 529],
                  [7, 0, 542],
                ],
                [
                  [-1, 1, 243],
                ],
                [
                  [-1, 1, 175],
                ],
                [
                  [-1, 3, 484],
                  [72, 0, 544],
                ],
                [
                  [-1, 1, 454],
                ],
                [
                  [-1, 1, 26],
                  [31, 0, 127],
                  [37, 0, 128],
                  [54, 0, 129],
                  [55, 0, 130],
                ],
                [
                  [-1, 1, 252],
                ],
                [
                  [-1, 1, 268],
                ],
                [
                  [-1, 1, 381],
                ],
                [
                  [-1, 1, 417],
                ],
                [
                  [-1, 1, 418],
                ],
                [
                  [-1, 1, 419],
                ],
                [
                  [-1, 1, 420],
                ],
                [
                  [-1, 3, 494],
                  [2, 0, 363],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 371],
                ],
                [
                  [-1, 3, 496],
                  [1, 0, 546],
                  [11, 0, 398],
                  [12, 0, 399],
                  [13, 0, 400],
                ],
                [
                  [-1, 1, 373],
                  [10, 0, 403],
                ],
                [
                  [-1, 1, 376],
                  [9, 0, 404],
                ],
                [
                  [-1, 1, 378],
                ],
                [
                  [-1, 3, 500],
                  [2, 0, 260],
                  [16, 0, 262],
                  [17, 0, 263],
                  [18, 0, 264],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 397],
                ],
                [
                  [-1, 1, 447],
                ],
                [
                  [-1, 3, 503],
                  [0, 0, 548],
                  [3, 0, 549],
                ],
                [
                  [-1, 3, 504],
                  [0, 0, 550],
                  [5, 0, 551],
                ],
                [
                  [-1, 1, 392],
                ],
                [
                  [-1, 3, 506],
                  [41, 0, 552],
                  [42, 0, 553],
                  [50, 0, 554],
                ],
                [
                  [-1, 3, 507],
                  [2, 0, 363],
                  [6, 0, 509],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 396],
                ],
                [
                  [-1, 3, 509],
                  [2, 0, 363],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 449],
                ],
                [
                  [-1, 1, 387],
                  [4, 0, 407],
                ],
                [
                  [-1, 1, 293],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 513],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 3, 514],
                  [75, 0, 560],
                ],
                [
                  [-1, 3, 515],
                  [6, 0, 100],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 297],
                  [49, 0, 26],
                ],
                [
                  [-1, 3, 517],
                  [2, 0, 514],
                  [6, 0, 100],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 480],
                ],
                [
                  [-1, 1, 328],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 347],
                ],
                [
                  [-1, 3, 521],
                  [42, 0, 425],
                  [50, 0, 427],
                ],
                [
                  [-1, 1, 348],
                ],
                [
                  [-1, 1, 481],
                ],
                [
                  [-1, 3, 524],
                  [0, 0, 521],
                  [3, 0, 566],
                ],
                [
                  [-1, 1, 345],
                ],
                [
                  [-1, 1, 342],
                ],
                [
                  [-1, 1, 338],
                  [49, 0, 26],
                ],
                [
                  [-1, 1, 344],
                ],
                [
                  [-1, 3, 529],
                  [2, 0, 363],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [73, 0, 31],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 353],
                  [49, 0, 26],
                ],
                [
                  [-1, 1, 483],
                ],
                [
                  [-1, 3, 532],
                  [0, 0, 529],
                  [3, 0, 571],
                ],
                [
                  [-1, 3, 533],
                  [0, 0, 529],
                  [3, 0, 573],
                ],
                [
                  [-1, 1, 142],
                ],
                [
                  [-1, 1, 141],
                ],
                [
                  [-1, 1, 127],
                ],
                [
                  [-1, 1, 111],
                  [67, 0, 30],
                ],
                [
                  [-1, 1, 135],
                ],
                [
                  [-1, 1, 139],
                ],
                [
                  [-1, 1, 207],
                ],
                [
                  [-1, 1, 239],
                ],
                [
                  [-1, 1, 441],
                ],
                [
                  [-1, 3, 543],
                  [0, 0, 529],
                  [7, 0, 576],
                ],
                [
                  [-1, 1, 452],
                ],
                [
                  [-1, 1, 400],
                  [3, 0, 577],
                ],
                [
                  [-1, 1, 370],
                ],
                [
                  [-1, 3, 547],
                  [3, 0, 578],
                  [11, 0, 398],
                  [12, 0, 399],
                  [13, 0, 400],
                ],
                [
                  [-1, 3, 548],
                  [2, 0, 363],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 398],
                ],
                [
                  [-1, 3, 550],
                  [2, 0, 363],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 391],
                ],
                [
                  [-1, 3, 552],
                  [2, 0, 363],
                  [6, 0, 509],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 413],
                ],
                [
                  [-1, 1, 412],
                ],
                [
                  [-1, 3, 555],
                  [2, 0, 363],
                  [6, 0, 509],
                  [19, 0, 23],
                  [20, 0, 24],
                  [28, 0, 265],
                  [72, 0, 266],
                  [73, 0, 31],
                  [74, 0, 267],
                  [75, 0, 268],
                  [76, 0, 269],
                  [77, 0, 270],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 388],
                ],
                [
                  [-1, 3, 557],
                  [0, 0, 548],
                  [7, 0, 583],
                ],
                [
                  [-1, 1, 389],
                ],
                [
                  [-1, 3, 559],
                  [3, 0, 584],
                ],
                [
                  [-1, 3, 560],
                  [3, 0, 585],
                  [29, 0, 586],
                  [75, 0, 587],
                ],
                [
                  [-1, 1, 299],
                  [49, 0, 26],
                ],
                [
                  [-1, 1, 301],
                ],
                [
                  [-1, 3, 563],
                  [6, 0, 100],
                  [19, 0, 23],
                  [20, 0, 24],
                  [73, 0, 31],
                  [78, 0, 32],
                  [79, 0, 33],
                ],
                [
                  [-1, 1, 298],
                  [49, 0, 26],
                ],
                [
                  [-1, 1, 350],
                ],
                [
                  [-1, 1, 349],
                ],
                [
                  [-1, 1, 482],
                ],
                [
                  [-1, 1, 346],
                ],
                [
                  [-1, 1, 443],
                ],
                [
                  [-1, 1, 357],
                ],
                [
                  [-1, 1, 355],
                  [49, 0, 26],
                ],
                [
                  [-1, 1, 484],
                ],
                [
                  [-1, 1, 354],
                  [49, 0, 26],
                ],
                [
                  [-1, 3, 574],
                  [0, 0, 529],
                  [3, 0, 594],
                ],
                [
                  [-1, 1, 143],
                ],
                [
                  [-1, 1, 442],
                ],
                [
                  [-1, 1, 399],
                ],
                [
                  [-1, 1, 383],
                ],
                [
                  [-1, 1, 448],
                ],
                [
                  [-1, 1, 393],
                ],
                [
                  [-1, 1, 395],
                ],
                [
                  [-1, 1, 394],
                ],
                [
                  [-1, 1, 450],
                ],
                [
                  [-1, 1, 311],
                ],
                [
                  [-1, 1, 305],
                ],
                [
                  [-1, 1, 308],
                ],
                [
                  [-1, 1, 307],
                ],
                [
                  [-1, 3, 588],
                  [3, 0, 595],
                ],
                [
                  [-1, 1, 303],
                ],
                [
                  [-1, 1, 300],
                  [49, 0, 26],
                ],
                [
                  [-1, 1, 302],
                ],
                [
                  [-1, 1, 359],
                ],
                [
                  [-1, 1, 358],
                ],
                [
                  [-1, 1, 356],
                  [49, 0, 26],
                ],
                [
                  [-1, 1, 306],
                ],
                [
                  [-1, 1, 304],
                ],
                [
                  [-1, 1, 360],
                ],
              ]

parser_gotoTable = [
                     [
                       [-1, 10],
                     ],
                     [
                       [-1, 11],
                     ],
                     [
                       [-1, 12],
                       [11, 96],
                     ],
                     [
                       [-1, 132],
                       [134, 236],
                       [135, 239],
                       [237, 377],
                     ],
                     [
                       [-1, 50],
                       [6, 80],
                       [54, 145],
                       [55, 148],
                       [81, 187],
                       [82, 190],
                       [146, 252],
                       [188, 336],
                     ],
                     [
                       [-1, 13],
                     ],
                     [
                       [-1, 14],
                     ],
                     [
                       [-1, 15],
                       [22, 99],
                       [97, 99],
                       [98, 99],
                       [212, 99],
                     ],
                     [
                       [-1, 59],
                     ],
                     [
                       [-1, 153],
                       [256, 387],
                     ],
                     [
                       [-1, 258],
                       [259, 389],
                     ],
                     [
                       [-1, 34],
                       [47, 123],
                       [55, 123],
                       [72, 123],
                       [82, 123],
                       [89, 123],
                       [95, 123],
                       [122, 123],
                       [135, 123],
                       [143, 123],
                       [146, 123],
                       [167, 123],
                       [188, 123],
                       [198, 123],
                       [208, 123],
                       [237, 123],
                       [248, 123],
                     ],
                     [
                       [-1, 35],
                     ],
                     [
                       [-1, 36],
                       [5, 74],
                       [75, 174],
                       [79, 181],
                       [182, 328],
                     ],
                     [
                       [-1, 37],
                       [5, 75],
                       [60, 155],
                       [62, 161],
                       [79, 182],
                       [127, 155],
                       [128, 155],
                       [129, 155],
                       [130, 155],
                       [158, 290],
                       [159, 293],
                       [162, 300],
                       [163, 302],
                       [165, 308],
                       [294, 423],
                       [303, 437],
                       [309, 443],
                       [310, 445],
                       [311, 446],
                       [444, 525],
                       [447, 526],
                       [448, 528],
                       [516, 562],
                       [527, 568],
                       [530, 570],
                       [561, 589],
                       [564, 591],
                       [571, 592],
                       [573, 593],
                       [590, 596],
                       [594, 597],
                     ],
                     [
                       [-1, 16],
                     ],
                     [
                       [-1, 17],
                     ],
                     [
                       [-1, 18],
                     ],
                     [
                       [-1, 19],
                     ],
                     [
                       [-1, 20],
                     ],
                     [
                       [-1, 38],
                       [5, 76],
                       [7, 85],
                       [9, 91],
                       [41, 113],
                       [42, 115],
                       [46, 119],
                       [47, 124],
                       [74, 171],
                       [75, 175],
                       [77, 178],
                       [78, 180],
                       [79, 183],
                       [86, 192],
                       [87, 194],
                       [88, 195],
                       [89, 199],
                       [92, 202],
                       [93, 204],
                       [94, 205],
                       [95, 209],
                       [114, 218],
                       [120, 219],
                       [121, 221],
                       [122, 222],
                       [125, 225],
                       [126, 227],
                       [172, 315],
                       [173, 317],
                       [174, 318],
                       [176, 321],
                       [177, 323],
                       [179, 324],
                       [181, 325],
                       [182, 329],
                       [184, 332],
                       [185, 334],
                       [193, 339],
                       [196, 340],
                       [197, 342],
                       [198, 343],
                       [200, 346],
                       [201, 348],
                       [203, 349],
                       [206, 350],
                       [207, 352],
                       [208, 353],
                       [210, 356],
                       [211, 358],
                       [220, 369],
                       [223, 370],
                       [224, 372],
                       [226, 373],
                       [316, 451],
                       [319, 452],
                       [320, 454],
                       [322, 455],
                       [326, 456],
                       [327, 458],
                       [328, 459],
                       [330, 462],
                       [331, 464],
                       [333, 465],
                       [341, 467],
                       [344, 468],
                       [345, 470],
                       [347, 471],
                       [351, 472],
                       [354, 473],
                       [355, 475],
                       [357, 476],
                       [371, 483],
                       [453, 534],
                       [457, 535],
                       [460, 536],
                       [461, 538],
                       [463, 539],
                       [469, 540],
                       [474, 541],
                       [537, 575],
                     ],
                     [
                       [-1, 39],
                       [7, 86],
                       [9, 92],
                       [88, 196],
                       [89, 200],
                       [94, 206],
                       [95, 210],
                       [198, 344],
                       [208, 354],
                     ],
                     [
                       [-1, 40],
                     ],
                     [
                       [-1, 41],
                       [5, 77],
                       [46, 120],
                       [47, 125],
                       [74, 172],
                       [75, 176],
                       [79, 184],
                       [122, 223],
                       [174, 319],
                       [181, 326],
                       [182, 330],
                       [328, 460],
                     ],
                     [
                       [-1, 42],
                       [5, 78],
                       [7, 87],
                       [9, 93],
                       [41, 114],
                       [46, 121],
                       [47, 126],
                       [74, 173],
                       [75, 177],
                       [77, 179],
                       [79, 185],
                       [86, 193],
                       [88, 197],
                       [89, 201],
                       [92, 203],
                       [94, 207],
                       [95, 211],
                       [120, 220],
                       [122, 224],
                       [125, 226],
                       [172, 316],
                       [174, 320],
                       [176, 322],
                       [181, 327],
                       [182, 331],
                       [184, 333],
                       [196, 341],
                       [198, 345],
                       [200, 347],
                       [206, 351],
                       [208, 355],
                       [210, 357],
                       [223, 371],
                       [319, 453],
                       [326, 457],
                       [328, 461],
                       [330, 463],
                       [344, 469],
                       [354, 474],
                       [460, 537],
                     ],
                     [
                       [-1, 133],
                       [136, 241],
                       [235, 241],
                       [238, 241],
                       [240, 241],
                       [376, 241],
                       [378, 241],
                       [379, 241],
                       [486, 241],
                     ],
                     [
                       [-1, 51],
                     ],
                     [
                       [-1, 52],
                     ],
                     [
                       [-1, 53],
                       [56, 150],
                       [83, 150],
                       [144, 150],
                       [147, 150],
                       [149, 150],
                       [186, 150],
                       [189, 150],
                       [191, 150],
                       [251, 150],
                       [253, 150],
                       [254, 150],
                       [335, 150],
                       [337, 150],
                       [338, 150],
                       [386, 150],
                       [466, 150],
                     ],
                     [
                       [-1, 140],
                       [142, 246],
                       [143, 249],
                       [248, 383],
                     ],
                     [
                       [-1, 141],
                       [140, 245],
                       [142, 247],
                       [143, 250],
                       [246, 382],
                       [248, 384],
                       [249, 385],
                       [383, 488],
                     ],
                     [
                       [-1, 21],
                     ],
                     [
                       [-1, 65],
                       [73, 170],
                       [168, 170],
                       [169, 170],
                       [314, 170],
                     ],
                     [
                       [-1, 66],
                     ],
                     [
                       [-1, 294],
                     ],
                     [
                       [-1, 439],
                       [296, 431],
                       [433, 517],
                     ],
                     [
                       [-1, 295],
                       [297, 434],
                       [422, 434],
                       [424, 434],
                       [512, 434],
                     ],
                     [
                       [-1, 515],
                       [517, 563],
                     ],
                     [
                       [-1, 588],
                     ],
                     [
                       [-1, 432],
                       [433, 518],
                     ],
                     [
                       [-1, 67],
                     ],
                     [
                       [-1, 162],
                       [163, 303],
                     ],
                     [
                       [-1, 104],
                       [106, 216],
                       [164, 216],
                       [299, 216],
                       [301, 216],
                       [304, 216],
                       [435, 216],
                       [436, 216],
                       [438, 216],
                       [519, 216],
                     ],
                     [
                       [-1, 68],
                     ],
                     [
                       [-1, 440],
                       [521, 565],
                     ],
                     [
                       [-1, 309],
                       [311, 447],
                     ],
                     [
                       [-1, 523],
                       [524, 567],
                     ],
                     [
                       [-1, 310],
                       [309, 444],
                       [311, 448],
                       [447, 527],
                     ],
                     [
                       [-1, 311],
                     ],
                     [
                       [-1, 69],
                     ],
                     [
                       [-1, 70],
                     ],
                     [
                       [-1, 156],
                       [127, 228],
                       [128, 229],
                       [129, 230],
                       [130, 231],
                     ],
                     [
                       [-1, 157],
                       [155, 289],
                       [158, 291],
                       [290, 420],
                     ],
                     [
                       [-1, 271],
                       [288, 419],
                     ],
                     [
                       [-1, 272],
                       [260, 390],
                       [261, 393],
                       [401, 496],
                       [500, 547],
                     ],
                     [
                       [-1, 273],
                       [402, 497],
                     ],
                     [
                       [-1, 274],
                       [403, 498],
                     ],
                     [
                       [-1, 275],
                       [262, 394],
                       [404, 499],
                     ],
                     [
                       [-1, 276],
                     ],
                     [
                       [-1, 277],
                     ],
                     [
                       [-1, 278],
                     ],
                     [
                       [-1, 416],
                       [511, 558],
                     ],
                     [
                       [-1, 504],
                     ],
                     [
                       [-1, 505],
                       [550, 580],
                     ],
                     [
                       [-1, 279],
                     ],
                     [
                       [-1, 280],
                     ],
                     [
                       [-1, 391],
                     ],
                     [
                       [-1, 417],
                     ],
                     [
                       [-1, 418],
                       [416, 507],
                     ],
                     [
                       [-1, 281],
                     ],
                     [
                       [-1, 555],
                     ],
                     [
                       [-1, 402],
                     ],
                     [
                       [-1, 494],
                     ],
                     [
                       [-1, 43],
                     ],
                     [
                       [-1, 44],
                     ],
                     [
                       [-1, 45],
                     ],
                     [
                       [-1, 282],
                       [1, 46],
                       [2, 54],
                       [4, 71],
                       [5, 79],
                       [6, 81],
                       [7, 88],
                       [9, 94],
                       [25, 101],
                       [26, 105],
                       [27, 108],
                       [28, 109],
                       [29, 101],
                       [30, 111],
                       [48, 134],
                       [49, 142],
                       [60, 158],
                       [61, 159],
                       [62, 163],
                       [63, 165],
                       [64, 166],
                       [84, 108],
                       [100, 213],
                       [106, 105],
                       [107, 217],
                       [127, 158],
                       [128, 158],
                       [129, 158],
                       [130, 158],
                       [137, 242],
                       [138, 243],
                       [139, 244],
                       [159, 296],
                       [160, 101],
                       [161, 105],
                       [162, 105],
                       [163, 105],
                       [164, 105],
                       [166, 313],
                       [292, 101],
                       [293, 296],
                       [294, 296],
                       [297, 296],
                       [299, 105],
                       [300, 105],
                       [301, 105],
                       [302, 105],
                       [303, 105],
                       [304, 105],
                       [307, 101],
                       [359, 477],
                       [422, 296],
                       [423, 296],
                       [424, 296],
                       [431, 101],
                       [435, 105],
                       [436, 105],
                       [437, 105],
                       [438, 105],
                       [439, 101],
                       [512, 296],
                       [513, 559],
                       [515, 101],
                       [517, 101],
                       [519, 105],
                       [563, 101],
                     ],
                     [
                       [-1, 102],
                       [29, 110],
                       [160, 298],
                       [292, 421],
                       [307, 442],
                       [431, 516],
                       [439, 520],
                       [515, 561],
                       [517, 564],
                       [563, 590],
                     ],
                     [
                       [-1, 361],
                       [362, 479],
                       [368, 479],
                       [381, 479],
                     ],
                     [
                       [-1, 283],
                       [214, 365],
                       [312, 449],
                       [364, 481],
                       [450, 533],
                       [529, 569],
                     ],
                     [
                       [-1, 366],
                     ],
                     [
                       [-1, 531],
                       [532, 572],
                       [543, 572],
                       [574, 572],
                     ],
                     [
                       [-1, 284],
                       [260, 392],
                       [363, 480],
                       [406, 502],
                       [407, 506],
                       [417, 508],
                       [418, 510],
                       [494, 545],
                       [507, 510],
                       [509, 502],
                       [548, 579],
                       [550, 506],
                       [552, 510],
                       [555, 510],
                     ],
                     [
                       [-1, 503],
                       [509, 557],
                     ],
                     [
                       [-1, 511],
                       [507, 556],
                       [552, 581],
                       [555, 582],
                     ],
                     [
                       [-1, 375],
                     ],
                     [
                       [-1, 234],
                       [281, 405],
                     ],
                     [
                       [-1, 285],
                     ],
                     [
                       [-1, 286],
                     ],
                     [
                       [-1, 287],
                     ],
                     [
                       [-1, 22],
                       [11, 97],
                       [12, 98],
                       [96, 212],
                     ],
                     [
                       [-1, 47],
                       [2, 55],
                       [4, 72],
                       [6, 82],
                       [7, 89],
                       [9, 95],
                       [46, 122],
                       [48, 135],
                       [49, 143],
                       [54, 146],
                       [71, 167],
                       [81, 188],
                       [88, 198],
                       [94, 208],
                       [134, 237],
                       [142, 248],
                     ],
                     [
                       [-1, 136],
                       [132, 235],
                       [134, 238],
                       [135, 240],
                       [236, 376],
                       [237, 378],
                       [239, 379],
                       [377, 486],
                     ],
                     [
                       [-1, 56],
                       [6, 83],
                       [50, 144],
                       [54, 147],
                       [55, 149],
                       [80, 186],
                       [81, 189],
                       [82, 191],
                       [145, 251],
                       [146, 253],
                       [148, 254],
                       [187, 335],
                       [188, 337],
                       [190, 338],
                       [252, 386],
                       [336, 466],
                     ],
                     [
                       [-1, 259],
                     ],
                     [
                       [-1, 106],
                       [62, 164],
                       [161, 299],
                       [162, 301],
                       [163, 304],
                       [300, 435],
                       [302, 436],
                       [303, 438],
                       [437, 519],
                     ],
                     [
                       [-1, 362],
                       [217, 368],
                       [242, 381],
                     ],
                     [
                       [-1, 73],
                       [71, 168],
                       [72, 169],
                       [167, 314],
                     ],
                     [
                       [-1, 297],
                       [293, 422],
                       [294, 424],
                       [423, 512],
                     ],
                     [
                       [-1, 433],
                     ],
                     [
                       [-1, 524],
                     ],
                     [
                       [-1, 532],
                       [481, 543],
                       [533, 574],
                     ],
                     [
                       [-1, 288],
                     ],
                   ]
    
errorMessages = [
                  "expecting: 'ggMediator', 'goal', 'namespace', 'ontology', 'ooMediator', 'webService', 'wgMediator', 'wsmlVariant', 'wwMediator', EOF",
                  "expecting: 'false', 'true', 'ggMediator', 'goal', 'importsOntology', t nfp, 'ontology', 'ooMediator', 'source', 'target', 'usesMediator', 'usesService', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: 'false', 'true', 'capability', 'ggMediator', 'goal', 'importsOntology', 'interface', t nfp, 'ontology', 'ooMediator', 'usesMediator', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: '{', full iri",
                  "expecting: 'false', 'true', 'axiom', 'concept', 'ggMediator', 'goal', 'importsOntology', 'instance', t nfp, 'ontology', 'ooMediator', 'relation', 'relationInstance', 'usesMediator', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: 'false', 'true', 'ggMediator', 'goal', 'importsOntology', t nfp, 'ontology', 'ooMediator', 'source', 'target', 'usesService', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: full iri",
                  "expecting: EOF",
                  "expecting: 'ggMediator', 'goal', 'namespace', 'ontology', 'ooMediator', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'ggMediator', 'goal', 'ontology', 'ooMediator', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: ',', endpoint, '(', ')', '[', ']', '}', 'and', 'or', t implies, t implied by, t equivalent, ':-', 'false', 'true', '>', '<', '>=', '=<', '=', '!=', '+', '-', '*', '/', 'assumption', 'axiom', 'capability', 'choreography', 'concept', 'definedBy', 'effect', t endnfp, 'ggMediator', 'goal', 'hasValue', 'impliesType', 'importsOntology', 'instance', 'interface', 'inverseOf', 'memberOf', t nfp, 'ofType', 'ontology', 'ooMediator', 'orchestration', 'postcondition', 'precondition', 'reflexive', 'relation', 'relationInstance', 'sharedVariables', 'source', 'subConceptOf', 'subRelationOf', 'symmetric', 'target', 'transitive', 'usesMediator', 'usesService', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: '{', 'false', 'true', '_#', full iri, name",
                  "expecting: 'false', 'true', t endnfp, '_#', full iri, name",
                  "expecting: 'false', 'true', '_#', full iri, name",
                  "expecting: ',', endpoint, '(', ')', '[', ']', '}', '#', 'and', 'or', t implies, t implied by, t equivalent, ':-', 'false', 'true', '>', '<', '>=', '=<', '=', '!=', '+', '-', '*', '/', 'assumption', 'axiom', 'capability', 'choreography', 'concept', 'definedBy', 'effect', t endnfp, 'ggMediator', 'goal', 'hasValue', 'impliesType', 'importsOntology', 'instance', 'interface', 'inverseOf', 'memberOf', t nfp, 'ofType', 'ontology', 'ooMediator', 'orchestration', 'postcondition', 'precondition', 'reflexive', 'relation', 'relationInstance', 'sharedVariables', 'source', 'subConceptOf', 'subRelationOf', 'symmetric', 'target', 'transitive', 'usesMediator', 'usesService', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: 'assumption', 'axiom', 'capability', 'choreography', 'concept', 'effect', 'ggMediator', 'goal', 'importsOntology', 'instance', 'interface', t nfp, 'ontology', 'ooMediator', 'orchestration', 'postcondition', 'precondition', 'relation', 'relationInstance', 'sharedVariables', 'source', 'target', 'usesMediator', 'usesService', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'ggMediator', 'goal', 'ontology', 'ooMediator', 'target', 'usesService', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'ggMediator', 'goal', 'ontology', 'ooMediator', 'usesService', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'relation', 'source', name",
                  "expecting: 'ggMediator', 'goal', 'importsOntology', t nfp, 'ontology', 'ooMediator', 'source', 'target', 'usesMediator', 'usesService', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'false', 'true', 'assumption', 'effect', 'ggMediator', 'goal', 'importsOntology', 'interface', t nfp, 'ontology', 'ooMediator', 'postcondition', 'precondition', 'sharedVariables', 'usesMediator', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: '{', 'false', 'true', 'choreography', 'ggMediator', 'goal', 'importsOntology', 'interface', t nfp, 'ontology', 'ooMediator', 'orchestration', 'usesMediator', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: 'ggMediator', 'goal', 'interface', 'ontology', 'ooMediator', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'capability', 'ggMediator', 'goal', 'importsOntology', 'interface', t nfp, 'ontology', 'ooMediator', 'usesMediator', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: full iri, name",
                  "expecting: 'false', 'true', 'definedBy', t nfp, '_#', full iri, name",
                  "expecting: 'false', 'true', 'axiom', 'concept', 'ggMediator', 'goal', 'instance', 'memberOf', t nfp, 'ontology', 'ooMediator', 'relation', 'relationInstance', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: 'axiom', 'concept', 'ggMediator', 'goal', 'instance', 'ontology', 'ooMediator', 'relation', 'relationInstance', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'axiom', 'concept', 'ggMediator', 'goal', 'importsOntology', 'instance', t nfp, 'ontology', 'ooMediator', 'relation', 'relationInstance', 'usesMediator', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'ggMediator', 'goal', 'ontology', 'ooMediator', 'source', 'target', 'usesService', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'ggMediator', 'goal', 'importsOntology', 'ontology', 'ooMediator', 'source', 'target', 'usesService', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'ggMediator', 'goal', 'importsOntology', t nfp, 'ontology', 'ooMediator', 'source', 'target', 'usesService', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: ',', ')', 'false', 'true', 'assumption', 'axiom', 'capability', 'choreography', 'concept', 'effect', 'ggMediator', 'goal', 'importsOntology', 'instance', 'interface', t nfp, 'ontology', 'ooMediator', 'orchestration', 'postcondition', 'precondition', 'relation', 'relationInstance', 'sharedVariables', 'source', 'target', 'usesMediator', 'usesService', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: 'false', 'true', 'assumption', 'axiom', 'capability', 'choreography', 'concept', 'definedBy', 'effect', 'ggMediator', 'goal', 'importsOntology', 'instance', 'interface', t nfp, 'ontology', 'ooMediator', 'orchestration', 'postcondition', 'precondition', 'relation', 'relationInstance', 'sharedVariables', 'source', 'target', 'usesMediator', 'usesService', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: 'false', 'true', 'axiom', 'concept', t endnfp, 'ggMediator', 'goal', 'instance', 'ontology', 'ooMediator', 'relation', 'relationInstance', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: 'hasValue'",
                  "expecting: '{', variable",
                  "expecting: 'assumption', 'effect', 'ggMediator', 'goal', 'interface', 'ontology', 'ooMediator', 'postcondition', 'precondition', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'assumption', 'effect', 'ggMediator', 'goal', 'importsOntology', 'interface', t nfp, 'ontology', 'ooMediator', 'postcondition', 'precondition', 'sharedVariables', 'usesMediator', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'ggMediator', 'goal', 'interface', 'ontology', 'ooMediator', 'orchestration', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'choreography', 'ggMediator', 'goal', 'importsOntology', 'interface', t nfp, 'ontology', 'ooMediator', 'orchestration', 'usesMediator', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: ',', '}'",
                  "expecting: '(', '!-', t not, 'exists', 'forall', 'false', 'true', '-', variable, '_#', nb anonymous, pos integer, pos decimal, string, full iri, name",
                  "expecting: 'assumption', 'axiom', 'concept', 'definedBy', 'effect', 'ggMediator', 'goal', 'instance', 'interface', 'ontology', 'ooMediator', 'postcondition', 'precondition', 'relation', 'relationInstance', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'assumption', 'axiom', 'concept', 'effect', 'ggMediator', 'goal', 'instance', 'interface', 'ontology', 'ooMediator', 'postcondition', 'precondition', 'relation', 'relationInstance', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'assumption', 'axiom', 'concept', 'definedBy', 'effect', 'ggMediator', 'goal', 'instance', 'interface', t nfp, 'ontology', 'ooMediator', 'postcondition', 'precondition', 'relation', 'relationInstance', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'false', 'true', 'axiom', 'concept', 'ggMediator', 'goal', 'instance', t nfp, 'ontology', 'ooMediator', 'relation', 'relationInstance', 'subConceptOf', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: 'false', 'true', 'axiom', 'concept', 'ggMediator', 'goal', 'instance', 'ontology', 'ooMediator', 'relation', 'relationInstance', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: 'false', 'true', 'axiom', 'concept', 'ggMediator', 'goal', 'instance', t nfp, 'ontology', 'ooMediator', 'relation', 'relationInstance', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: 'false', 'true', 'axiom', 'concept', 'ggMediator', 'goal', 'hasValue', 'instance', 'memberOf', t nfp, 'ontology', 'ooMediator', 'relation', 'relationInstance', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: '(', '/', 'axiom', 'concept', 'ggMediator', 'goal', 'instance', t nfp, 'ontology', 'ooMediator', 'relation', 'relationInstance', 'subRelationOf', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: '(', 'false', 'true', '_#', full iri, name",
                  "expecting: '(', '{', 'false', 'true', '-', '_#', pos integer, pos decimal, string, full iri, name",
                  "expecting: variable",
                  "expecting: '(', 'assumption', 'effect', 'ggMediator', 'goal', 'interface', 'ontology', 'ooMediator', 'postcondition', 'precondition', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: '(', t not, 'exists', 'forall', 'false', 'true', '-', variable, '_#', nb anonymous, pos integer, pos decimal, string, full iri, name",
                  "expecting: pos integer, pos decimal",
                  "expecting: ',', endpoint, ')', '[', ']', '}', 'and', 'or', t implies, t implied by, t equivalent, ':-', '>', '<', '>=', '=<', '=', '!=', '+', '-', '*', '/', 'hasValue', 'impliesType', 'memberOf', 'ofType', 'subConceptOf'",
                  "expecting: ',', endpoint, ')', '[', ']', '}', 'and', 'or', t implies, t implied by, t equivalent, ':-', 'false', 'true', '>', '<', '>=', '=<', '=', '!=', '+', '-', '*', '/', 'axiom', 'concept', t endnfp, 'ggMediator', 'goal', 'hasValue', 'impliesType', 'instance', 'memberOf', 'ofType', 'ontology', 'ooMediator', 'relation', 'relationInstance', 'subConceptOf', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: '(', '!-', t not, 'exists', 'forall', 'false', 'true', '-', 'assumption', 'axiom', 'concept', 'effect', 'ggMediator', 'goal', 'instance', 'interface', 'ontology', 'ooMediator', 'postcondition', 'precondition', 'relation', 'relationInstance', 'webService', 'wgMediator', 'wwMediator', variable, '_#', nb anonymous, pos integer, pos decimal, string, full iri, name, EOF",
                  "expecting: endpoint, t implies, t implied by, t equivalent, ':-'",
                  "expecting: endpoint, ')', 'or', t implies, t implied by, t equivalent, ':-'",
                  "expecting: endpoint, ')', 'and', 'or', t implies, t implied by, t equivalent, ':-'",
                  "expecting: ',', endpoint, '(', ')', '[', ']', '}', 'and', 'or', t implies, t implied by, t equivalent, ':-', 'false', 'true', '>', '<', '>=', '=<', '=', '!=', '+', '-', '*', '/', 'axiom', 'concept', t endnfp, 'ggMediator', 'goal', 'hasValue', 'impliesType', 'instance', 'memberOf', 'ofType', 'ontology', 'ooMediator', 'relation', 'relationInstance', 'subConceptOf', 'webService', 'wgMediator', 'wwMediator', '_#', full iri, name, EOF",
                  "expecting: endpoint, ')', '[', 'and', 'or', t implies, t implied by, t equivalent, ':-', '>', '<', '>=', '=<', '=', '!=', 'memberOf', 'subConceptOf'",
                  "expecting: 'impliesType', 'inverseOf', 'ofType', 'reflexive', 'symmetric', 'transitive'",
                  "expecting: 'impliesType', 'ofType'",
                  "expecting: pos integer",
                  "expecting: 'axiom', 'concept', 'ggMediator', 'goal', 'instance', t nfp, 'ontology', 'ooMediator', 'relation', 'relationInstance', 'subRelationOf', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: 'axiom', 'concept', 'ggMediator', 'goal', 'instance', t nfp, 'ontology', 'ooMediator', 'relation', 'relationInstance', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: '(', 'axiom', 'concept', 'ggMediator', 'goal', 'instance', t nfp, 'ontology', 'ooMediator', 'relation', 'relationInstance', 'subRelationOf', 'webService', 'wgMediator', 'wwMediator', EOF",
                  "expecting: '(', 'false', 'true', '-', '_#', pos integer, pos decimal, string, full iri, name",
                  "expecting: '('",
                  "expecting: '(', 'false', 'true', '-', variable, '_#', nb anonymous, pos integer, pos decimal, string, full iri, name",
                  "expecting: ')', t implies, t implied by, t equivalent",
                  "expecting: '+', '-', '*', '/'",
                  "expecting: ')', '[', 'and', 'or', t implies, t implied by, t equivalent, '>', '<', '>=', '=<', '=', '!=', '+', '-', '*', '/', 'memberOf', 'subConceptOf'",
                  "expecting: endpoint, t implies, t implied by, t equivalent",
                  "expecting: '(', ')', 'false', 'true', '-', variable, '_#', nb anonymous, pos integer, pos decimal, string, full iri, name",
                  "expecting: '(', '{', 'false', 'true', '-', variable, '_#', nb anonymous, pos integer, pos decimal, string, full iri, name",
                  "expecting: endpoint, ')', 'and', 'or', t implies, t implied by, t equivalent, ':-', 'memberOf', 'subConceptOf'",
                  "expecting: '(', '{', 'false', 'true', '_#', full iri, name",
                  "expecting: ',', ')'",
                  "expecting: ',', ')', '}'",
                  "expecting: ',', ']'",
                  "expecting: 'hasValue', 'impliesType', 'ofType'",
                  "expecting: ',', endpoint, ')', '[', ']', 'and', 'or', t implies, t implied by, t equivalent, ':-'",
                  "expecting: endpoint, ')', '[', 'and', 'or', t implies, t implied by, t equivalent, ':-'",
                  "expecting: ')', '+', '-', '*', '/'",
                  "expecting: ')'",
                  "expecting: ')', '*', pos integer",
                ]
    
errors = [
           0, 1, 2, 3, 4, 5, 2, 1, 6, 1, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 11, 12, 11, 13, 11, 13, 10, 10, 14, 15, 15, 15, 15, 9, 16, 16, 16, 17, 18, 10, 10, 19, 19, 20, 21, 22, 22, 22, 22, 23, 23, 22, 24, 9, 9, 25, 13, 26, 13, 13, 27, 27, 27, 27, 27, 27, 28, 28, 27, 29, 30, 9, 16, 17, 31, 22, 23, 23, 22, 13, 9, 16, 17, 19, 19, 8, 9, 16, 17, 19, 19, 9, 9, 9, 9, 13, 32, 15, 33, 34, 35, 12, 13, 16, 17, 15, 9, 18, 9, 17, 9, 10, 10, 10, 9, 16, 17, 19, 15, 9, 16, 17, 25, 25, 25, 25, 36, 37, 37, 38, 38, 37, 13, 13, 13, 39, 22, 40, 40, 22, 22, 23, 22, 22, 22, 22, 41, 6, 41, 42, 43, 27, 44, 45, 46, 11, 47, 48, 49, 47, 50, 51, 28, 27, 27, 27, 9, 16, 17, 29, 9, 16, 17, 9, 17, 9, 29, 30, 9, 16, 17, 22, 22, 23, 22, 22, 22, 9, 17, 9, 9, 16, 17, 19, 9, 16, 17, 9, 17, 9, 9, 16, 17, 19, 9, 16, 17, 9, 41, 52, 33, 34, 41, 9, 9, 17, 9, 9, 16, 17, 9, 17, 9, 37, 37, 37, 37, 53, 54, 37, 37, 37, 38, 37, 37, 37, 37, 41, 39, 22, 22, 39, 22, 40, 39, 22, 22, 22, 22, 22, 41, 24, 9, 41, 41, 55, 55, 55, 36, 36, 56, 57, 57, 58, 58, 58, 59, 60, 61, 62, 62, 62, 62, 62, 62, 58, 36, 63, 57, 64, 58, 58, 58, 59, 44, 43, 44, 11, 47, 48, 47, 65, 47, 48, 47, 47, 47, 47, 48, 47, 66, 67, 11, 27, 68, 69, 70, 71, 72, 27, 9, 17, 9, 9, 16, 17, 9, 17, 9, 9, 9, 16, 17, 29, 9, 16, 17, 9, 17, 9, 22, 22, 22, 22, 9, 9, 17, 9, 9, 16, 17, 9, 17, 9, 9, 9, 17, 9, 9, 16, 17, 9, 17, 9, 13, 32, 41, 41, 73, 71, 34, 34, 16, 41, 9, 9, 17, 9, 9, 41, 41, 37, 37, 37, 37, 22, 41, 22, 39, 22, 22, 22, 41, 9, 41, 74, 75, 76, 77, 62, 58, 58, 59, 55, 55, 55, 55, 55, 55, 55, 72, 78, 73, 73, 73, 73, 73, 73, 73, 79, 79, 80, 73, 79, 59, 44, 48, 47, 47, 47, 81, 72, 81, 65, 65, 65, 81, 65, 65, 47, 47, 47, 47, 47, 11, 82, 70, 69, 27, 69, 27, 27, 68, 69, 82, 71, 9, 9, 17, 9, 9, 9, 17, 9, 9, 16, 17, 9, 17, 9, 9, 22, 9, 9, 17, 9, 9, 9, 9, 17, 9, 9, 41, 32, 41, 75, 41, 16, 9, 53, 54, 37, 22, 22, 62, 73, 73, 73, 73, 73, 59, 77, 61, 62, 62, 55, 58, 83, 82, 84, 84, 85, 79, 62, 73, 86, 87, 47, 13, 67, 11, 48, 81, 65, 47, 82, 66, 68, 82, 82, 27, 27, 69, 27, 71, 69, 83, 82, 82, 9, 9, 9, 17, 9, 9, 9, 9, 34, 41, 41, 88, 59, 74, 73, 58, 73, 80, 79, 79, 79, 79, 62, 41, 62, 89, 90, 48, 47, 11, 48, 82, 68, 82, 27, 83, 27, 69, 83, 69, 82, 9, 34, 58, 62, 83, 84, 84, 84, 86, 65, 11, 89, 89, 89, 47, 48, 47, 27, 27, 69, 11, 47, 27, 
         ]
                                   
class Parser(object):
    def __init__(self, lexer):
        self.lexer = lexer
        self.stack = Stack()
     
    def goTo(self, index):
        state = self.state()
        low = 1
        high = len(parser_gotoTable[index]) - 1
        value = parser_gotoTable[index][0][1]

        while (low <= high):
            middle = (low + high) // 2

            if (state < parser_gotoTable[index][middle][0]):
                high = middle - 1
            elif (state > parser_gotoTable[index][middle][0]):
                low = middle + 1
            else:
                value = parser_gotoTable[index][middle][1]
                break

        return value

    def push(self, numstate, listNode):
        self.stack.push(State(numstate, listNode))

    def state(self):
        return self.stack.peek().state

    def pop(self):
        return self.stack.pop().nodes

    def parse(self):
        self.push(0, None)
        lexer = self.lexer
        last_shift = 0
        last_pos = 0
        last_line = 0
        last_token = None
        action = [0,0]
        
        while 1:
            while (lexer.peek().TokenIndex == -1):
                lexer.next()

            token = lexer.peek()
            last_pos = token.getPos()
            last_line = token.getLine()
            last_token = token

            index = token.TokenIndex
            action[0] = actionTable[self.state()][0][1]
            action[1] = actionTable[self.state()][0][2]

            low = 1
            high = len(actionTable[self.state()]) - 1

            while (low <= high):
                middle = (low + high) // 2

                if (index < actionTable[self.state()][middle][0]):
                    high = middle - 1
                elif (index > actionTable[self.state()][middle][0]):
                    low = middle + 1
                else:
                    action[0] = actionTable[self.state()][middle][1]
                    action[1] = actionTable[self.state()][middle][2]
                    break

            if (action[0] == ACTION_SHIFT):
                nodeList = list()
                nodeList.append(lexer.next())
                self.push(action[1], nodeList)
                last_shift = action[1]
            elif (action[0] == ACTION_REDUCE):
                if (action[1] >= 0 and action[1] <= 486):
                    nodeList, leftside = newnode[action[1]](self)
                    self.push(self.goTo(leftside), nodeList)
            elif (action[0] == ACTION_ACCEPT):
                node2 = lexer.next()
                node1 = self.pop()[0]
                node = Start(node1, node2)
                return node
            elif (action[0] == ACTION_ERROR):
                print("Exception in:")
                print(' => last_token', str(last_token))
                print(' => last_line', str(last_line))
                print(' => last_pos', str(last_pos))
                raise ParserException(last_token, "[" + str(last_line) + "," + str(last_pos) + "] " + errorMessages[errors[action[1]]])
    
    def unescape (self, s):
        _out_ = StringBuffer()
      
        for i in range(len(s)):
            c = s[i]

            if (c == '\\'):
                if ((i + 1) < len(s)):
                    i += 1
                    if (s[i] == 'n'):
                        _out_.append ("\n")
                    elif (s[i] == 'r'):
                        _out_.append("\r")
                    elif (s[i] == '"'):
                        _out_.append ("\"");
                    elif (s[i] == '\\'):
                        _out_.append ("\\");
                    elif (s[i] == '0'):
                        if (s[i:].startswith("000")):
                            _out_.append("\000")
                            i += 2
                        else:
                            _out_.append ("\\")
                            _out_.append(s[i])
                    elif (s[i] == 'u'):
                        hstr = s[i+1:(i + 5)]
                    
                        if (len(hstr) == 4):
                            try:
                                _out_.append(unichr(int(hstr, 16)))
                                i += 5
                            except ValueError:
                                _out_.append("\\")
                                _out_.append(s[i])
                        else:
                            _out_.append("\\")
                            _out_.append(s[i])
                    else:
                        _out_.append("\\")
                        _out_.append(s[i])
                else:
                    _out_.append(c)
            else:
                _out_.append(c)
              
        return str(_out_)

############################# Analisador ############################################## 

class Knowledge:
    def __init__(self):
        self.facts = dict()
        self.facts['ontology'] = []
        self.facts['conceptTerm'] = []
        self.facts['instance'] = []
        self.facts['memberOf'] = []
        self.facts['hasValue'] = []
        self.facts['nfp'] = []
        self.facts['conceptAttribute'] = []
        self.facts['relation'] = []
        self.facts['relationType'] = []
        self.instanceRelations = []
        self.axioms = []
        self.imports = []

    def clean(self):
        self.facts = dict()
        self.facts['ontology'] = []
        self.facts['conceptTerm'] = []
        self.facts['instance'] = []
        self.facts['memberOf'] = []
        self.facts['hasValue'] = []
        self.facts['nfp'] = []
        self.facts['conceptAttribute'] = []
        self.facts['relation'] = []
        self.facts['relationType'] = []
        self.instanceRelations = []
        self.axioms = []
        self.imports = []

class PySwipAnalysis(Analysis):
    def __init__(self,knowledge):
        self.knowledge = knowledge
        self.saveAxiomsVariablesTemp = True
        self.axiomsVariablesTemp = []
        self.printComments = False
        self.termQuotes = True
        self.isQuery = False

    def caseStart(self, node):
        # node - Class Start
        if self.printComments: 
            print('-- caseStart --')
        node.getPWsml().apply(self) # returning AWsml

    def caseAWsml(self, node):
        # node - Class AWsml
        # Gramática
        # wsml = wsmlvariant? namespace? definition*;
        if self.printComments: 
            print('-- caseAWsml --')
        
        # node.getDefinition()
        for definition in node.getDefinition():
            definition.apply(self)

    def caseAOntologyDefinition(self,node):
        # node - Class AOntologyDefinition
        if self.printComments: 
            print('-- caseAOntologyDefinition --')        
        node.getOntology().apply(self) # returning AOntology
        
    def caseAStringValue(self,node):
        return str(node.getString()).strip()

    def caseATermValue(self,node):
        return "'" + str(node.getId().apply(self)).strip() + "'"

    def caseAIriId(self,node):
        return node.getIri().apply(self)
    
    def caseAIriIri(self, node):
        return str(node.getFullIri())

    def caseASqnameIri(self,node):
        return node.getSqname().apply(self)

    def caseAAnySqname(self,node):
        return str(node.getName()).strip()

    def caseAVarTerm(self,node):
        termo = str(node.getVariable()).strip()
        termo = termo[1:].capitalize()
        
        if self.saveAxiomsVariablesTemp == True and termo not in self.axiomsVariablesTemp:
            self.axiomsVariablesTemp.append(termo)

        return termo

    def caseADataTerm(self,node):
        #print(type(node.getValue()))
        #print(node.getValue().apply(self))
        return node.getValue().apply(self)

    def caseANumericValue(self,node):
        return str(node.getNumber()).strip()

    def caseADatatypeValue(self,node):
        return node.getFunctionsymbol().apply(self)

    def caseAParametrizedFunctionsymbol(self,node):
        id = node.getId().apply(self)
        terms = node.getTerms()
        if terms != None:
            terms = terms.apply(self)
            
            if type(terms) != str:
                terms = ','.join(terms)
            
            return "'"+id + '(' + terms + ')'+"'"
        else:
            return ""

    def caseAMathFunctionsymbol(self,node):
        lpar = '('
        mathexpr = str(node.getMathexpr().apply(self)).strip()
        op = str(node.getMathOp()).strip()
        term = str(node.getTerm().apply(self)).strip()
        rpar = ')'
        
        return lpar + mathexpr + op + term + rpar

    def caseAMathexpr(self,node):
        return node.getTerm().apply(self)
        
    def caseATermlist(self,node):
        return node.getTerms().apply(self)
    
    def caseATerms(self,node):
        terms = []
        if node.getTerms() != None :
            term = node.getTerms().apply(self)
            if type(term) == str:
                term = [term]
            
            terms = terms + term

        term = node.getTerm().apply(self)
        terms = terms + [term]
        return terms

    def caseATermTerms(self,node):
        return node.getTerm().apply(self)

    def caseATermTermlist(self,node):
        term = node.getTerm().apply(self)
        return [term]

    def caseAOntology(self,node):
        # node - Class AOntology
        # Gramática
        # ontology = t_ontology id? header* ontology_element*;
        if self.printComments: 
            print('-- caseAOntology --')
        
        # t_ontology
        # node.getTOntology()

        # id?
        if node.getId() != None: # returning AIriId
        #    print(node.getId()) # Salvar id da ontologia
            ontologyId = "'"+node.getId().apply(self)+"'"
            self.knowledge.facts['ontology'].append(ontologyId)

        for ontologyHeader in node.getHeader():
            if (isinstance(ontologyHeader,AImportsontologyHeader)):
                for imp in ontologyHeader.apply(self):
                    if imp != None and imp not in self.knowledge.imports:
                        self.knowledge.imports.append(imp)
            else:
                nfps = ontologyHeader.apply(self)
                if nfps != None:
                    for nfpAttributeList in ontologyHeader.apply(self):
                        for nfpAttribute in nfpAttributeList:
                            # nfp = "nfp("+str(nfpAttribute[0])+" hasValue "+str(nfpAttribute[1])+")"
                            nfpId,nfpValue = nfpAttribute
                            nfpFact = (ontologyId,nfpId,nfpValue)
                            self.knowledge.facts['nfp'].append(nfpFact)

        for ontologyElement in node.getOntologyElement():
            ontologyElement.apply(self)
    
    def caseAImportsontologyHeader(self,node):
        # print(type(node.getImportsontology()))
        return node.getImportsontology().apply(self)

    def caseAImportsontology(self,node):
        # print(type(node.getIdlist()))
        return node.getIdlist().apply(self)

    def caseANfpHeader(self,node):
        return node.getNfp().apply(self)

    def caseANfp(self,node):
        listAttributeValue = []
        for attributeValue in node.getAttributevalue():
            listAttributeValue.append(attributeValue.apply(self))
        return listAttributeValue

    def caseAConceptOntologyElement(self,node):
        # node - Class AConceptOntologyElement
        if self.printComments: 
            print('-- caseAConceptOntologyElement --')
        node.getConcept().apply(self) # returning AConcept

    def caseAConcept(self,node):
        # node - Class AConcept
        # Gramática
        # concept	= t_concept id superconcept? nfp? attribute*;
        if self.printComments: 
            print('-- caseAConcept --')

        conceptId = "'"+node.getId().apply(self)+"'"
        self.knowledge.facts['conceptTerm'].append(conceptId)
        # header*
        nfp = node.getNfp()
        if nfp != None:
            nfpAttributeList = nfp.apply(self)
            for nfpAttribute in nfpAttributeList:
                for nfpAttribute in nfpAttribute:
                    # nfp = "nfp("+str(nfpAttribute[0])+" hasValue "+str(nfpAttribute[1])+")"
                    nfpId,nfpValue = nfpAttribute
                    nfpFact = (conceptId,nfpId,nfpValue)
                    self.knowledge.facts['nfp'].append(nfpFact)
        
        listAttribute = node.getAttribute()
        if listAttribute != None:
            for attribute in listAttribute:
                factAttributeValue = attribute.apply(self)
                for factAttr in factAttributeValue:     
                    fact = tuple([conceptId]+factAttr)
                    self.knowledge.facts['conceptAttribute'].append(fact)

    def caseAAttribute(self,node):
        idAttr = "'"+node.getId().apply(self)+"'"
        # print(node.getAttributefeature())
        typeAttr = "'"+str(node.getAttType()).strip()+"'"
        # print(node.getCardinality())
        ids = node.getIdlist().apply(self)
        # print(node.getNfp())
        attributes = []
        for id in ids:
            attributes.append([idAttr,typeAttr,"'"+id+"'"])
        
        return attributes

    def caseAInstanceOntologyElement(self,node):
        # node - Class AInstanceOntologyElement
        if self.printComments: 
            print('-- caseAInstanceOntologyElement --')
        node.getInstance().apply(self) # returning AInstance

    def caseAInstance(self,node):
        # node - Class AInstance
        # Gramática
        # instance = t_instance id? memberof? nfp? attributevalue*;
        if self.printComments: 
            print('-- caseAInstance --')
        
        instanceId = "'"+node.getId().apply(self)+"'"
        self.knowledge.facts['instance'].append(instanceId)

        if node.getMemberof() == None:
            memberOfInstance = (instanceId,"'Thing'")
            self.knowledge.facts['memberOf'].append(memberOfInstance)
        else:
            ids = node.getMemberof().apply(self)
            for idMemberOf in ids:
                memberOfInstance = (instanceId,"'"+idMemberOf+"'")
                self.knowledge.facts['memberOf'].append(memberOfInstance)

        for attribute in node.getAttributevalue():
            attributeValues = attribute.apply(self)
            for attributeValue in attributeValues:
                attributeOfInstance = tuple([instanceId] + attributeValue)
                self.knowledge.facts['hasValue'].append(attributeOfInstance)
    
    def caseAMemberof(self,node):
        return node.getIdlist().apply(self)
    
    def caseAIdIdlist(self,node):
        return [node.getId().apply(self)]
    
    def caseAIdlistIdlist(self,node):
        idlist = []
        idlist.append(node.getId().apply(self)) 
        for id in node.getMoreids():
            idlist.append(id.apply(self))
        return idlist

    def caseAMoreids(self,node):
        return node.getId().apply(self)

    def caseAAttributevalue(self,node):
        idAttribute = "'"+node.getId().apply(self)+"'"
        valueAttribute = node.getValuelist().apply(self)
        factHasValue = []
        for value in valueAttribute:
            factHasValue.append([idAttribute,value])
        return factHasValue

    def caseAValuelistValuelist(self,node):
        valuelist = []
        valuelist.append(node.getValue().apply(self))
        for value in node.getMorevalues():
            valuelist.append(value.apply(self))
        return valuelist

    def caseAMorevalues(self,node):
        return node.getValue().apply(self)

    def caseATermValuelist(self,node):
        value = node.getValue().apply(self)
        #if (isinstance(node.getValue(),ATermValue)):
        #    value = value[1:-1]
        
        return [value]

    def caseAAxiomOntologyElement(self,node):
        for axiom in node.getAxiom().apply(self):
            if axiom not in self.knowledge.axioms:
                self.knowledge.axioms.append(axiom)
    
    def caseAAxiom(self,node):
        return node.getAxiomdefinition().apply(self)

    def caseADefinedAxiomAxiomdefinition(self,node):
        axioms = []
        axiomId = node.getId().apply(self)
        #if (axiomId[0] == axiomId[-1] == "'"):
        #    axiomId = axiomId[1:-1]
        
        self.axiomsVariablesTemp = []
        logDefinition = node.getLogDefinition().apply(self)

        for ax in logDefinition:
            axiom = ''
            axiom = axiomId + '('+ ','.join(self.axiomsVariablesTemp) +')'
            axiom = axiom + ' :- ' + str(ax)
            axioms.append(axiom)

        return axioms
    
    def caseALogDefinition(self,node):
        exprs = []
        logExprs = node.getLogExpr()
        isLpRuleAxiom = False
        for logExpr in logExprs:
            exp = logExpr.apply(self)
            if ':-' in exp:
                isLpRuleAxiom = True

        for logExpr in logExprs:
            exp = logExpr.apply(self)
            #print(type(logExpr))
            if isLpRuleAxiom == True and exp not in self.knowledge.axioms:
                self.knowledge.axioms.append(exp)
            
            else:
                exprs.append(exp)
        
        return exprs
    
    def caseALpRuleLogExpr(self,node):
        rule = ""
        rule = rule + node.getHead().apply(self)
        #print(type(node.getTImpliedByLp()))
        rule = rule + " :- "
        #print(type(node.getBody()))
        #print(node.getBody())
        rule = rule + node.getBody().apply(self)
        return rule

    def caseAOtherExpressionLogExpr(self,node):
        #print(type(node.getExpr()))
        #print(node.getExpr())
        
        return node.getExpr().apply(self)
    
    def caseAImplicationExpr(self,node):
        expr = node.getExpr().apply(self)
        # print(node.getImplyOp())
        exprImpl = node.getDisjunction().apply(self)
        if exprImpl != "" and exprImpl[0] == exprImpl[-1] == "'":
            exprImpl = exprImpl[1:-1]
        
        axiomImpl = exprImpl + ' :- ' + expr
        #print("Axiom Impl -- " + axiomImpl)
        if axiomImpl not in self.knowledge.axioms:
            self.knowledge.axioms.append(axiomImpl)
        
        return expr

    def caseADisjunctionExpr(self,node):
        #print(node.getDisjunction())
        #print(type(node.getDisjunction()))
        #print(node.getDisjunction().apply(self))
        disjunction = node.getDisjunction().apply(self)
        if disjunction != "" and disjunction[0] == disjunction[-1] == "'":
            disjunction = disjunction[1:-1]
        
        return disjunction
    
    def caseADisjunction(self,node):
        disj = node.getDisjunction().apply(self)
        conj = node.getConjunction().apply(self)
        return disj + ';' + conj

    def caseAConjunctionDisjunction(self,node):
        #print(type(node.getConjunction()))
        #print(node.getConjunction())
        return node.getConjunction().apply(self)
    
    def caseASimpleSubexpr(self,node):
        # AMoleculeSimple
        # AAtomSimple
        # AComparisonSimple
        #print(type(node.getSimple()))
        #print(node.getSimple())
        return node.getSimple().apply(self)

    def caseAComparisonSimple(self,node):
        #print(type(node.getComparison()))
        return node.getComparison().apply(self)
    
    def caseAComparison(self,node):
        left = str(node.getLeft().apply(self)).strip()
        op = str(node.getCompOp()).strip()
        if op == '=':
            op = 'is'
        right = str(node.getRight().apply(self)).strip()
        
        return left + ' ' + op + ' ' + right

    def caseAAtomSimple(self,node):
        self.termQuotes = False
        return node.getTerm().apply(self)
        self.termQuotes = True

    def caseAMoleculeSimple(self,node):
        # AttributeMoleculeMolecule
        # 
        #print(type(node.getMolecule()))
        return node.getMolecule().apply(self)

    def caseAAttributeMoleculeMolecule(self,node):
        term = node.getTerm().apply(self)
        # self.axiomsVariablesTemp.append(term)
        specification = node.getAttrSpecification().apply(self)
        molecule = ""
        if len(specification) > 0:
            for spec in specification:
                molecule += spec[1] + '(' + term + ',' + spec[0] + ',' + spec[2] + '),'
            if molecule[-1] == ',':
                molecule = molecule[0:-1]
        else:
            molecule = specification[1] + '(' + term + ',' + specification[0] + ',' + specification[2] + ')'

        return molecule

    def caseAAttrSpecification(self,node):
        return node.getAttrRelList().apply(self)

    def caseAAttrRelList(self,node):
        l = []
        
        attrRelation = node.getAttrRelation().apply(self)
        if attrRelation != None: 
            l += attrRelation

        attrRelList = node.getAttrRelList().apply(self)
        l += attrRelList

        return l

    def caseAAttrRelationAttrRelList(self,node):
        return node.getAttrRelation().apply(self)

    def caseAAttrValAttrRelation(self,node):
        # Tratar OR ?
        term =  node.getTerm().apply(self)
        #if term[0] == term[-1] == "'":
        #    term = term[1:-1]
        
        # node.getTHasvalue()
        termlist = node.getTermlist().apply(self)        
        #print('t'+term)
        #print(termlist[0])
        return [[term,'hasValue',termlist[0]]]
    
    def caseAConceptMoleculePreferredMolecule(self,node):
        molecule = ''
        # Tratar OR ?
        term = node.getTerm().apply(self)
        conceptOp = str(node.getCptOp()).strip()
        termlist = node.getTermlist().apply(self)
        #print(type(node.getTermlist()))
        #if termlist[0][0] == termlist[0][-1] == "'":
        #    termlist[0] = termlist[0][1:-1]

        # Montando o conceito
        molecule = molecule + conceptOp + '(' + term + ',' + termlist[0] + ')'
        #print(molecule)
        # Montando os termos adicionais
        if (node.getAttrSpecification() != None):
            specificationList = node.getAttrSpecification().apply(self)
            for specification in specificationList:
                # print(specification)
                moleculeSpecification = specification[1] + '(' + term + ',' + specification[0] + ',' + specification[2] + ')'            
                molecule = molecule + ',' + moleculeSpecification
        # print('molecule ===>>> '+str(molecule))
        # exit()
        return molecule

    def caseAConjunction(self,node):
        subExpr = node.getSubexpr().apply(self)
        if subExpr != "" and subExpr[0] == subExpr[-1] == "'":
            subExpr = subExpr[1:-1]
        conjuncao = ''
        conjuncao = node.getConjunction().apply(self)
        conjuncao = conjuncao + ',' # print(node.getTAnd())
        conjuncao = conjuncao + subExpr

        return conjuncao
    
    def caseASubexprConjunction(self,node):
        # print(type(node.getSubexpr()))
        # print(node.getSubexpr())
        subExpr = node.getSubexpr().apply(self)
        if subExpr != "" and subExpr[0] == subExpr[-1] == "'":
            subExpr = subExpr[1:-1]
        return subExpr

    def caseAComplexSubexpr(self,node):
        # print(node.getExpr().apply(self))
        return node.getExpr().apply(self)
    
    def caseARelationOntologyElement(self, node):
        node.getRelation().apply(self)

    def caseARelation(self, node):
        # Relations id
        relationId = "'"+node.getId().apply(self)+"'"
        self.knowledge.facts['relation'].append(relationId)
        
        # Relations params types
        listParamtyping = node.getParamtyping().apply(self)
        listParamtypingString = map(lambda item: "'"+str(item)+"'",listParamtyping)
        for param in listParamtyping:
            paramString = "'"+str(param).strip()+"'"
            relationType = tuple([relationId] + [paramString])
            self.knowledge.facts['relationType'].append(relationType)

        # Relations Nfp
        nfp = node.getNfp()
        if nfp != None:
            nfpAttributeList = nfp.apply(self)
            for nfpAttribute in nfpAttributeList:
                for nfpAttribute in nfpAttribute:
                    nfpId,nfpValue = nfpAttribute
                    nfpFact = (relationId,nfpId,nfpValue)
                    self.knowledge.facts['nfp'].append(nfpFact)

    def caseAParamtyping(self, node):
        params = []
        paramType = node.getParamtype().apply(self)
        params.append(paramType)
        moreParamtype = node.getMoreparamtype()
        for mParamType in moreParamtype:
            paramType = mParamType.apply(self)
            params.append(paramType)
        return params

    def caseAParamtype(self, node):
        return node.getIdlist()

    def caseAMoreparamtype(self, node):
        return node.getParamtype().apply(self)
    
    def caseARelationinstanceOntologyElement(self, node):
        node.getRelationinstance().apply(self)

    def caseARelationinstance(self, node):
        instanceRelation = []

        id = "'" + str(node.getRelation()).strip() + "'"
        instanceRelation.append(id)
        
        firstValue = node.getValue().apply(self)
        instanceRelation.append(firstValue)

        moreValues = node.getMorevalues()
        for value in moreValues:
            instanceRelation.append(value.apply(self))

        self.knowledge.instanceRelations.append(tuple(instanceRelation))
        
        # Relation instance nfp
        nfp = node.getNfp()
        if nfp != None:
            nfpAttributeList = nfp.apply(self)
            for nfpAttribute in nfpAttributeList:
                for nfpAttribute in nfpAttribute:
                    nfpId,nfpValue = nfpAttribute
                    nfpFact = (id,nfpId,nfpValue)
                    self.knowledge.facts['nfp'].append(nfpFact)

class Reasoner:
    def __init__(self,):
        self.loadedFiles = []
        self.analysis = PySwipAnalysis(Knowledge())
        self.prolog = Prolog()
        self.printLogLoading = False
        self.printFacts = False
        self.printAxioms = False
        self.printQueryProlog = False
        self.bufferFacts = []
        self.bufferAxioms = []
        self.hasImportExtendsFile = False

    def load(self,file):
        if not self.hasImportExtendsFile:
            self.prolog.consult(os.path.dirname(os.path.realpath(__file__)) + '/extends.pl')
            self.hasImportExtendsFile = True

        if os.path.exists(file) == False and self.printLogLoading == True:
            print('Arquivo '+ file + ' não foi encontrado!')
            return False
        
        fileCamArr = file.split('/')
        fileNameArr = str(fileCamArr[-1]).split('.')
        fileName = '.'.join(fileNameArr[0:-1])
        dirName = '/'.join(fileCamArr[0:-1]) + '/'

        self.analysis.knowledge.imports.append(fileName)
        
        os.chdir(dirName)

        for arqImp in self.analysis.knowledge.imports:
            arqImpStrip = arqImp.strip()

            if '_"/' in arqImpStrip:
                absPath = arqImpStrip[2:-1]
            elif '_"' in arqImpStrip:
                relativePath = arqImpStrip[2:-1]
                
                if relativePath[-5:] != '.wsml':
                    relativePath += '.wsml'

                if '~' in relativePath:
                    relativePath = relativePath.replace('~', os.path.expanduser('~'))

                absPath = os.path.abspath(relativePath)
            else:
                if arqImpStrip[-5:] != '.wsml':
                    arqImpStrip += '.wsml'

                absPath = os.path.abspath('./'+arqImpStrip)

            if absPath not in self.loadedFiles:
                if self.printLogLoading == True:
                    print('Start loading '+absPath)

                if os.path.exists(absPath):
                    parser = Parser(Lexer(absPath))
                    head = parser.parse()
                    head.apply(self.analysis)
                    if self.printLogLoading == True:
                        print('File ' + absPath + ' successfully uploaded!')
                else:
                    if self.printLogLoading == True:
                        print('WARNING: File ' + absPath + ' not found!')

            self.loadedFiles.append(absPath)
        
        # Load facts in memory
        for fact in self.analysis.knowledge.facts:
            for asserts in self.analysis.knowledge.facts[fact]:
                fato = fact+"("
                if isinstance(asserts,str):
                    fato = fato + asserts
                elif isinstance(asserts,tuple):
                    fato = fato + ','.join(asserts)
                fato = fato + ")"
                if (self.printFacts == True):
                    print(fato)
                self.prolog.assertz(fato)
                self.bufferFacts = self.bufferFacts + [fato]

        # Load axioms in memory
        for axiom in self.analysis.knowledge.axioms:
            if (self.printAxioms == True):
                print(axiom)
            self.prolog.assertz(axiom)
            self.bufferAxioms = self.bufferAxioms + [axiom]

        # Load instances relation in memory
        # print(self.analysis.knowledge.facts['relation'])
        # print(self.analysis.knowledge.instanceRelations)
        for factInstance in self.analysis.knowledge.instanceRelations:
            # Verify if relation exits
            rRelation = self.prolog.query("relation("+factInstance[0]+")")
            # print("relation("+factInstance[0]+")")
            rListRelation = None
            try:
                rListRelation = list(rRelation)
                if (len(rListRelation) > 0):
                    # Verify if type is match
                    rListInstanceRelation = list(self.prolog.query("relationType("+factInstance[0]+", Y)"))
                    if (len(rListInstanceRelation) + 1 == len(factInstance)):
                        isOk = True
                        for i in range(0,len(rListInstanceRelation)):
                            instance = factInstance[i+1]
                            concept = "'" + str(rListInstanceRelation[i]['Y']) + "'"
                            if concept[1] == '_':
                                if concept == "'_integer'" and not instance.isdigit():
                                    isOk = False
                                    break
                                elif concept == "'_string'" and instance[0] != '"' and instance[-1] != '"':
                                    isOk = False
                                    break
                            else:
                                rMemberOf = list(self.prolog.query("memberOf("+instance+","+concept+")"))
                                if len(rMemberOf) == 0:
                                    isOk = False
                                    break
                        if isOk:
                            head = factInstance[0][1:-1]
                            values = ','.join(factInstance[1:])
                            fact = head + '(' + values + ')'
                            if (self.printFacts == True):
                                print(fact)
                            self.prolog.assertz(fact)
            except Exception as ex:
                pass
        
        self.analysis.knowledge.clean()

    def getFacts(self):
        return self.bufferFacts

    def getAxioms(self):
        return self.bufferAxioms
            
    def convertQuery(self,query):
        #Criando uma ontologia default para poder traduzir a query
        query = "ontology DefaultMidsi axiom axiomDefault definedBy " + query + " implies " + query + ". "
        parser = Parser(Lexer(io.StringIO(query)))
        self.analysis.isQuery = True
        head = parser.parse()
        head.apply(self.analysis)
        queryProlog = self.analysis.knowledge.axioms[0].split(' :- ')[1]
        #if queryProlog[0] == "'" and queryProlog[-1] == "'":
        #    queryProlog = queryProlog[1:-1]
        self.analysis.isQuery = False
        return queryProlog

    def execute(self,query):
        reasoner = Reasoner()
        queryProlog = reasoner.convertQuery(query)
        
        if (self.printQueryProlog == True):
            print('Prolog: ' + queryProlog)
        return self.executeProlog(queryProlog)

    def executeProlog(self,queryProlog):
        result = self.prolog.query(queryProlog)
        resultList = None
        try:
            resultList = list(result)
        except Exception as ex:
            resultList = { 'error' : str(ex) }
        finally:
            return resultList
    
    def clear(self):
        for fact in self.bufferFacts:
            self.prolog.retractall(fact)
        self.bufferFacts = []
    
        for axiom in self.bufferAxioms:
            axiomParts = axiom.split(' :- ')
            head = axiomParts[0]
            self.prolog.retractall(head)
        self.bufferAxioms = []